[{"title":"配置 WSL 开发环境","url":"/2022/11/10/setup-wsl-development-environment/","content":"\n### 背景\n\n### 安装步骤\n\n##### 启用虚拟化和WSL\n\n![启用或关闭Windows功能](/images/setup-wsl-development-environment/turn-on-or-off-windows-features.jpg)\n\n完成之后需要重启。\n\n##### 启用WSL\n\n```sh\nwsl --install\n```\n完成之后*可能*需要重启。\n\n##### 安装Windows Terminal\n\n在 Microsoft Store （应用商城）中搜索 Windows Terminal 即可一键安装，此处省。\n\n##### 安装Ubuntu\n\n有多种方式可以安装 Ubuntu。最简单的方式，就是和上一步一样，在 Microsoft Store （应用商城）中搜索 Ubuntu 即可一键安装，此处省。\n\n##### 配置 apt 国内软件源镜像\n\n``` sh\nsudo cp /etc/apt/sources.list /etc/apt/sources.list.20221110.bak # 备份是个好习惯\nsudo vim /etc/apt/sources.list # 替换国内镜像源以加速，根据 Ubuntu 不同版本号，选择不同的路径\n```\n\n因为我在上海，使用的又是 Ubuntu 22.04，所以我的配置如下：\n\n``` /etc/apt/sources.list\ndeb https://mirror.sjtu.edu.cn/ubuntu/ jammy main restricted universe multiverse\n# deb-src https://mirror.sjtu.edu.cn/ubuntu/ jammy main restricted universe multiverse\ndeb https://mirror.sjtu.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\n# deb-src https://mirror.sjtu.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\ndeb https://mirror.sjtu.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\n# deb-src https://mirror.sjtu.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\ndeb https://mirror.sjtu.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\n# deb-src https://mirror.sjtu.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\n\n# deb https://mirror.sjtu.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\n# deb-src https://mirror.sjtu.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\n```\n\n##### 初始化\n\n安装完成之后，打开 Windows Terminal，选择 Ubuntu：\n\n![Windows Terminal](/images/setup-wsl-development-environment/windows-terminal.jpg)\n\n第一次打开会提示设置用户名密码（超级用户权限）。\n\n##### Windows 环境必要软件安装\n\n根据各开发者技术栈不同，需要安装的软件会有所不同。包括但不限于：[Docker Desktop](https://www.docker.com/products/docker-desktop/)、[Visual Studio Code](https://code.visualstudio.com)、[Remote Development Extension Pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)\n\n##### WSL 环境必要软件安装\n\n根据各开发者技术栈不同，需要安装的软件会有所不同。包括但不限于：[git](https://git-scm.com/download/linux)、[node.js](https://nodejs.org)、[python](https://www.python.org/downloads/)\n\n\n##### GitHub 加速\n\n其实，现在好多办法都可以加速访问 [GitHub](https://github.com)，我这里介绍一种特别原始的办法，就是修改 hosts 文件。\n\n1. 以管理员权限，打开记事本\n2. 记事本中打开 `C:\\Windows\\System32\\drivers\\etc\\hosts` 文件\n3. 添加以下 IP 映射：\n```sh\n# 需要定期更新如下代码\n# New！欢迎使用基于DNS的新方案\n# https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts\n# 地址可能会变动，请务必关注GitHub、Gitlab获取最新消息\n# 也可以关注公众号：湖中剑，保证不迷路\n# GitHub Host Start\n\n140.82.114.3                 central.github.com\n140.82.114.3                 assets-cdn.github.com\n151.101.1.6                  github.map.fastly.net\n151.101.1.6                  github.global.ssl.fastly.net\n140.82.114.3                 gist.github.com\n185.199.108.153              github.io\n140.82.114.3                 github.com\n140.82.114.3                 api.github.com\n140.82.114.3                 codeload.github.com\n72.21.206.80                 github-cloud.s3.amazonaws.com\n72.21.206.80                 github-com.s3.amazonaws.com\n72.21.206.80                 github-production-release-asset-2e65be.s3.amazonaws.com\n72.21.206.80                 github-production-user-asset-6210df.s3.amazonaws.com\n72.21.206.80                 github-production-repository-file-5c1aeb.s3.amazonaws.com\n185.199.108.153              githubstatus.com\n140.82.113.18                github.community\n140.82.114.3                 raw.github.com\n\n# Please Star : https://github.com/ineo6/hosts\n# Mirror Repo : https://gitlab.com/ineo6/hosts\n\n# Update at: 2022-11-10 16:20:33\n\n# GitHub Host End\n```\n4. 运行命令 `ipconfig /flushdns` 刷新 DNS。\n\n当然，也有其他的提供最新 hosts（比如 https://raw.hellogithub.com/hosts ) 或者自动 switchhosts（比如 https://github.com/oldj/SwitchHosts ），或者其他科学上网方式，感兴趣的请自行搜索。\n\n### 参考链接\n\n- [<i class=\"fa fa-windows\" aria-hidden=\"true\"></i>Install Linux on Windows with WSL](https://learn.microsoft.com/en-us/windows/wsl/install)\n- [上海交通大学 Linux 用户组 软件源镜像服务](https://mirrors.sjtug.sjtu.edu.cn/docs/ubuntu)\n- [<i class=\"fa fa-windows\" aria-hidden=\"true\"></i>Set up a WSL development environment](https://learn.microsoft.com/en-us/windows/wsl/setup/environment)\n- [<i class=\"fa fa-github\" aria-hidden=\"true\"></i>GitHub Hosts | hosts](https://ineo6.github.io/hosts/)\n","tags":["wsl","docker"]},{"title":"SQL Server 实例间的数据同步","url":"/2022/10/07/data-synchronise-between-SQL-Server-instances/","content":"\n# 背景\n组内有两套 SQL Server 环境，简单理解：一套生产环境，一套测试环境。测试环境还好，和本地开发环境类似，是互通的，也即是说可以直接通过 SSMS/Visual Studio/其他 app 或者程序连接上去。问题就出现在生产环境上。一般来说，生产环境有专人负责运维的，一般开发是不会接触的到。但是有的时候，开发真的需要生产环境的一些数据（比如日志），或者开发有几个 hotfix 数据包需要发布到生产环境，同时情况又很紧急，不想走审批流程，有没有简单又快速的办法？\n\n不同的程序员估计会有不同的解决方案。我的解决方案，超级简单粗暴，但是亲测有效，就是把一个环境（源）下的数据先导出成 excel/csv 文件，然后人肉复制粘贴到另一个环境（目标）下，然后再导入数据库。\n\n我用 dotnet 写成了一个小程序，可以直接运行。欢迎大家参考并提出宝贵意见。[<i class=\"fa fa-github\" aria-hidden=\"true\"></i>](https://github.com/ZXS66/SQLServerSync)\n\n# 参考链接\n\n- [<i class=\"fa fa-github\" aria-hidden=\"true\"></i> ZXS66/SQLServerSync](https://github.com/ZXS66/SQLServerSync)\n","tags":["bulk insert","sql server"]},{"title":"CSV转Excel","url":"/2022/07/14/csv-to-excel-file/","content":"\n本篇是接 [上一篇文章](/2022/05/13/dotnet-core-build-standalone-executable-program/)，具体到 CSV 转 Excel 这一个场景下的实际应用。\n\n# 背景\n\n一般从数据库(比如 MySQL 或者 SQL Server)或者一些数据平台（比如 Symantec 日志）导出的 CSV 文件，基本都是采用 `UTF-8` 编码保存的文件。使用 `UTF-8` 保存的 CSV 文件作为通用的传输数据媒介，一般来说，是没有问题的。然而，有一些朋友，使用 CSV 文件并不一定是用来传输数据的，而是用来查看的。这些情况下，他们会尝试使用 Microsoft Excel 打开。哦额，问题来了，Excel 一般不会优先使用 `UTF-8` 编码打开 CSV 文件，结果就是乱码。\n\n一般的通用解决办法是：\n\n**使用 Excel 的“数据”菜单，选择“自文本”，然后通过一些列的鼠标点点点操作，把 CSV 文件加载到 Excel 中（具体细节请参考各大搜索引擎或博客）。**\n\n~~本篇完！~~😄\n\n既然身为程序员，最不能容忍的事情就是重复自己！最喜欢做的事情就是重复造轮子。😏\n\n# 技术简介\n\n直入主题，如何使用代码，才能把 CSV 转换成 Excel 格式？\n\n1. 选择编程语言\n2. 读取 CSV 文件文本内容\n3. 按 CSV（Comma Separated Values）文件规范，转换成二维表格数据\n4. 按 Excel 文件规范，把二维表格数据转换成 Excel 文件\n5. 保存 Excel 文件\n\n### 选择编程语言\n\n这个就无所谓了，既然是造轮子，哪个语言顺手就用哪个。\n\n### 读取 CSV 文件内容\n### 按 CSV（Comma Separated Values）文件规范，转换成二维表格数据\n\n上面两个内容我放一起，主要是~~我懒~~考虑到读取 CSV 文件实在是太常见了，网上已经有很多成熟的解决方案。我这里引用的是 [ClosedXML]()。\n\n### 按 Excel 文件规范，把二维表格数据转换成 Excel 文件\n### 保存 Excel 文件\n\n同上，保存数据到 Excel 也太稀疏平常了。我这里引用的是 [ClosedXML]()。\n\n综上，我们需要做的，就非常少了，仅剩一些业务代码。\n\n[点击此处](https://github.com/ZXS66/csv2excel) 查看源代码。\n","tags":["unicode","csv","encoding","utf-8","gb2312","excel","asp.net core"]},{"title":"MySQL 正则表达式支持多字节字符","url":"/2022/06/25/MySQL-regex-for-multi-bytes-character/","content":"\n# 背景\n\n最近在工作中遇到一个小问题，就是需要一些简单的字符串匹配，自然而然想到使用正则表达式了。简单搜索了一下，`MySQL` 中如何使用正则，基本上都介绍用 [REGEXP](https://dev.mysql.com/doc/refman/8.0/en/regexp.html) 函数。\n\n但是，这个函数有个限制，在 MySQL 8.0.4 之前的版本，它是按字节匹配的，而不是字符！换句话说，对于汉字或者 Emoji 这样多字节的字符，它不支持！\n\n> The REGEXP and RLIKE operators work in byte-wise fashion, so they are not multibyte safe and may produce unexpected results with multibyte character sets. In addition, these operators compare characters by their byte values and accented characters may not compare as equal even if a given collation treats them as equal. [[<fa-link/>](https://your-link.here)](https://dev.mysql.com/doc/refman/5.6/en/regexp.html)\n\n所以，在 MySQL 8.0.4 之前的版本，我们该如何针对多字节的字符使用正则表达式呢？\n\n升级 MySQL？好吧，当我没问。🙊\n\n针对一个线上的 MySQL，如果要必须要实现业务逻辑，又不能变更 MySQL，有什么好的办法？\n\n不用正则表达式，采用 IF ELSE 语句替代？也不是不可以，但是逻辑稍负责一点，SQL 脚本就开始变得冗长、性能低下且难以维护了。\n\n以下是我自己的经验总结，仅供参考。\n\n# 思考\n\n既然 MySQL 8.0.4 之前的 REGEXP 只能支持单字节，那我把多字节字符都替换成单字节字符再正则匹配不就行了？[REPLACE](https://dev.mysql.com/doc/refman/8.0/en/replace.html) 函数是支持多字节的。\n\n# 放码\n\n```sql\nDELIMITER $$\n\nUSE `project_otis2019`$$\nDROP FUNCTION IF EXISTS `fx_regexp_over_multi_characters_sample`$$\n\nCREATE DEFINER=`zxs66`@`%` FUNCTION `fx_regexp_over_multi_characters_sample`(content TEXT) RETURNS TINYINT(4)\n    COMMENT 'check if given content match specific regular expression'\nBEGIN\n\n\tDECLARE normalized_content TEXT;\n\tSET normalized_content=REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(\n\t\t\t\t\tREPLACE(REPLACE(REPLACE(\n\t\t\t\t\t\tREPLACE(REPLACE(REPLACE(REPLACE(REPLACE(content,'水果','`'),'蔬菜','`'),'牛奶','`'),'牛羊肉','`'),'杂粮','`'),\n\t\t\t\t\t\t'，',','),'；',','),'。',','),\n\t\t\t\t\t\t'种植','@'),'运输','@'),'储藏','@'),'销售','@'),'检验','@'),'保供','@'),'批发','@');\n\n\t-- the regular expression below can be revised based on your actual bussiness requirements.\n\tRETURN normalized_content REGEXP '`[^,;\\.]*@' OR normalized_content REGEXP '@[^,;\\.]*`'; \n\nEND$$\n\nDELIMITER ;\n```\n\n# 回顾\n\n上述脚本仅提供一种思路，肯定不是最优解，还存在诸多弊端，其中一个显而易见的问题就是，替换掉的单字节字符不能与原来的文件内容有冲突。如果有不同意见，还请不吝赐教。\n","tags":["mysql","regex","multi-bytes"]},{"title":"C# 批量插入记录至 MySQL","url":"/2022/05/20/CSharp-bulk-insert-records-into-MySQL/","content":"\n本以为，`C#` 批量插入记录至 `MySQL` 这个情况应该很普遍，批量插入的代码很简单，就像批量插入 `SQL Server` 一样 (使用 [SQLBulkCopy](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/bulk-copy-operations-in-sql-server))。结果：我草率了。\n\n一般 `.NET` 开发人员，使用 [MySql.Data](https://www.nuget.org/packages/MySql.Data) 这个官方包来连接 `MySQL`。这个包很优秀，能够满足绝大多数的问题，但不包括批量插入（如果有哪位大牛知道官方的推荐做法，烦请告知，提前感谢！）。唯一和批量插入(bulk insert)可能有关联的是 [MySqlBulkLoader](https://dev.mysql.com/doc/dev/connector-net/6.10/html/T_MySql_Data_MySqlClient_MySqlCommandBuilder.htm)，但这个类的使用场景是从 csv 文件批量导入，类似于以下命令：`LOAD DATA INFILE '/tmp/data.csv' INTO TABLE bulk FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n'`。\n\n但其实，`.NET` 开发人员在日常开发过程中，需要把运行时的列表批量插入到数据库，比如 `IEnumerable<object>`。网上稍微找了一通，发现没有现成的封装类或可供参考的代码。没办法了，自己动手吧。\n\n以下是我简单封装的代码，拿走不谢：\n\n```cs\n    /// <summary>\n    /// handy functions for inquiring mysql\n    /// </summary>\n    public static class MySQLCommonHelper\n    {\n        /// <summary>\n        /// bulk insert data into database\n        /// </summary>\n        /// <typeparam name=\"T\">data type</typeparam>\n        /// <param name=\"data\">the data to be inserted into database</param>\n        /// <param name=\"tableName\">destination table name</param>\n        /// <param name=\"connectionString\">connection string of MySQL</param>\n        /// <returns></returns>\n        /// <exception cref=\"ArgumentNullException\"></exception>\n        public static bool BulkInsert<T>(IEnumerable<T> data, string tableName, string connectionString)\n        {\n            if (CommonUtility.IsNullOrEmptyList(data))\n                return false;// throw new ArgumentNullException(nameof(dt));\n            if (string.IsNullOrWhiteSpace(tableName))\n                throw new ArgumentNullException(nameof(tableName));\n            if (string.IsNullOrEmpty(connectionString))\n                throw new ArgumentNullException(nameof(connectionString));\n\n            // init the DataTable for bulk inserting\n            var table = new DataTable(tableName);\n            var props = typeof(T).GetProperties();\n            foreach (var prop in props)\n            {\n                table.Columns.Add(new DataColumn(prop.Name, prop.PropertyType));\n            }\n            foreach(var d in data)\n            {\n                var row = table.NewRow();\n                foreach(var prop in props)\n                {\n                    row[prop.Name] = prop.GetValue(d, null);\n                }\n                table.Rows.Add(row);\n            }\n\n            using (MySqlConnection connection = new MySqlConnection(connectionString))\n            {\n                connection.Open();\n                using (MySqlCommand cmd = connection.CreateCommand())\n                {\n                    cmd.CommandText = $\"SELECT * FROM {tableName} LIMIT 0\";\n                    using (MySqlDataAdapter adapter = new MySqlDataAdapter(cmd))\n                    {\n                        adapter.UpdateBatchSize = 8192;\n                        using (MySqlCommandBuilder cb = new MySqlCommandBuilder(adapter))\n                        {\n                            adapter.InsertCommand = cb.GetInsertCommand();\n                            adapter.Fill(table);\n                            // Without the MySqlCommandBuilder this line would fail\n                            var rows = adapter.Update(table);\n                            return rows > 0;\n                        }\n                    };\n                }\n            }\n        }\n    }\n```\n\n### 参考链接\n- [Bulk Insert asp.net Datatable to Mysql](https://social.msdn.microsoft.com/forums/en-US/a8c1e923-e2d1-439c-a114-2b734c9e7fd4/bulk-insert-aspnet-datatable-to-mysql)\n- [Insert large amounts of data into Mysql](https://mysqly.com/educate/insert-bulk-into-mysql)\n","tags":["csharp","bulk insert","mysql","mysql.connector"]},{"title":"dotnet core 编译绿色版程序","url":"/2022/05/13/dotnet-core-build-standalone-executable-program/","content":"\n一般情况下，运维人员一般都会点 `Python`，遇到问题，都会写一些脚手架、小脚本什么的。如果写得好，领导看重，进而分享给更多同事/上传至服务器，这就需要运维人员把其编写的程序编译（打包）成 `exe` 程序（一般公司同事都在用 `Windows` 系统），然后同事直接双击 `exe` 程序即可获取相同结果（虽然编译/运行过程中会遇到各种各样的问题…）。\n\n但是，其实 `Windows` 系统理应是 `.NET` 程序员的主场。以前，传统 `.NET` 程序员会编写完控制台应用程序，然后使用 `Visual Studio` 编译好，直接把 `./bin/Debug` 或者 `./bin/Release` 文件夹下的文件打包复制到目标机器上，然后就可以跟在本地运行一样。当然，高级一点的，可以使用 `Visual Studio` 的发布功能，这样，在目标服务器上先安装，再使用。\n\n不过，这种方式有个缺点：**需要目标机器和本地机器一样，有安装运行环境（.net framework）**。\n\n但是，某些情况下，目标机器不允许安装运行环境（需要提升权限），或者，目标机器用户不知道需要安装运行环境，怎么办？\n\n~~一般这时候，通常轮到介绍 `Docker` 了 😏~~\n\n所以，`.NET` 程序员，如何解决“一次编写，到处运行”这个难题？\n\n直接揭晓“我的魔法”吧：**使用 `.NET Core` 编写**！\n\n实际代码编写就略过了，这里只讲如何编译：\n\n1. 右键项目，“发布”；\n2. 选择“文件夹发布”；\n3. 更换部署模式为“Self-contained”，根据目标机器类型 [<fa-link/>](https://docs.microsoft.com/en-us/dotnet/core/deploying/deploy-with-vs?tabs=vs156)：\n![publish profile](/images/dotnet-core-build-standalone-executable-program/publish_profile.png)\n\n当然，上述操作可以使用 `.NET Core CLI` 达到相同目的 [<fa-link/>](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish)\n\n### 参考链接\n\n- [.NET application publishing overview](https://docs.microsoft.com/en-us/dotnet/core/deploying/)\n","tags":["dotnet core","standalone","console program"]},{"title":"浏览器查找多个关键词","url":"/2022/05/04/browser-find-multiple-keywords/","content":"\n平时我们使用浏览器浏览页面时，经常使用 `Ctrl` + `F` 快捷键快速查找关键字。但，假如我们想查找多个关键字时该怎么办，一个一个便利关键字查找吗？不不不，合格的程序员是不会允许重复自己的。\n\n我的解决方案：使用油猴脚本同时高亮多个关键字。\n\n1. 安装油猴\n   不同浏览器安装方法都不一样，`Microsoft Edge` 的话，直接跳转 [这个页面](https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd) 安装即可\n2. 安装 [Text Highlight and Seek](https://greasyfork.org/scripts/13007-text-highlight-and-seek) 脚本\n3. 配置启用脚本\n   ![点击油猴图标，进入仪表盘](/images/browser-find-multiple-keywords/tampermonkey-menu.jpg)\n   ![点击已安装的脚本](/images/browser-find-multiple-keywords/tampermonkey-installed-userscripts.jpg)\n   ![进入脚本配置页](/images/browser-find-multiple-keywords/tampermonkey-settings.jpg)\n   ![添加 user includes](/images/browser-find-multiple-keywords/tampermonkey-user-includes.jpg)\n\n*备注：更多请查看 [油猴文档](https://www.tampermonkey.net/documentation.php#_include)*\n\n实际使用效果预览：\n\n![浏览器查找多个关键词](/images/browser-find-multiple-keywords/browser-find-multiple-entries.jpg)\n\n- [Tampermonkey - Microsoft Edge Addons](https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd)\n- [Tampermonkey · Documentation](https://www.tampermonkey.net/documentation.php)\n- [Text Highlight and Seek](https://greasyfork.org/scripts/13007-text-highlight-and-seek)\n","tags":["browser","tampermonkey"]},{"title":"MySQL 编码问题","url":"/2022/04/07/mysql-charset-issue/","content":"\n`MySQL` 到底支持不支持 `Emoji`？\n\n可能有些人说支持，有些人说不支持。并且双方都能给出自己的亲身实践经验。😄😄\n\n简单来说：支持，但是需要注意几个点：\n\n1. 数据库编码设置为 `utf8mb4`；\n2. 数据库连接编码设置为 `utf8`；\n3. 编程语言（`Python`、`SQL` 等）代码保存格式为 `utf8`。\n\n第一点简单，网上教设置（吐槽）的文章很多，就不赘述了。\n\n第二点，就是说从程序连接到 `MySQL` 时，需要显示的指明编码，比如 `C#` 的连接字符串：\n```xml\n<add name=\"MySQLConnection\" connectionString=\"server=xxxx;database=yyyy;uid=zzzz;pwd=your_password;charset=utf8\" />\n```\n再比如 `Python` 的连接字符串（默认是 [`utf8mb4`](https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html)）：\n```py\nmysqlconn.connect(user=user,password=password,database=database,charset='utf8',connection_timeout=timeout)\n```\n\n至于第三点，一般情况下，都不是问题，因为现代编程语言，基本默认都是存成 `utf8` 了。但是，当你卡壳了，记住，这一点也很重要！举个🌰：\n\n在 MySQL Workbench 查询窗口中，我是用 `ASCII` 字符拼接，是可以正常返回的：\n![sql query with normal characters concat statement](/images/mysql-character-set-issue/working-concat-sql.JPG)\n但当我尝试使用 `Emoji` 字符拼接时，它就不行了：\n![sql query with emoji characters concat statement](/images/mysql-character-set-issue/not-working-concat-sql.png)\n\n但是，其实你把同样的拼接语句，放在 `Python` 或者 `C#` 代码里直接运行，都是可以按照预期返回结果的（前提：正确配置连接编码）。\n\n### 参考链接\n\n- [Unicode HOWTO - Python](https://docs.python.org/3/howto/unicode.html)\n","tags":["mysql","encoding","charset","utf8","utf8mb4"]},{"title":"MySQL怪癖","url":"/2022/03/31/MySQL-quirks/","content":"\n### MySQL 即时查询窗口不支持 IF 表达式\n\n对于我这个菜鸡来说，虽然听起来很不可思议，但这是真的，你没（mèi）听错。根据 MySQL [官方文档](https://dev.mysql.com/doc/refman/8.0/en/if.html)，IF 表达式仅可以在存储程序（存储过程或函数）中适用（除此之外，还有一个 [IF 函数](https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html#function_if)），即时查询窗口中用不了！早在 2008 年就有大佬报怨 [<fa-link/>](https://www.bennadel.com/blog/1340-mysql-does-not-support-if-else-statements-in-general-sql-work-flow.htm)，都 2022 年了，这个问题还没有解决，也不知道 MySQL 团队是咋想的。\n\nBTW，[Oracle 开发工程师离职后怒喷 MySQL 很烂](https://www.theregister.com/2021/12/06/mysql_a_pretty_poor_database/) 这条新闻，去年就上了热搜，说起来确实是个笑话。\n\n### MySQL 中 PRINT 方法\n\nMySQL 中暂无此方法！如果有大佬知道，请告诉我，不胜感激！\n\n### 支持 Emoji 字符\n\n首先，MySQL 是支持 Emoji 字符的，但是，也不完全支持，即使编码设置的是 `utf8mb4`。\n\n这里就不展开了，更多可以查看我的 [另一篇文章](/2022/04/07/mysql-charset-issue/)。\n\n### MySQL 中 SLEEP 方法\n\n基于 [MySQL SLEEP 命令官方文档](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_sleep)，推荐用法是 `SELECT SLEEP(1)`。但是，如果这样书写方式，会给存储过程的既定输出造成影响。 \n\n通过面向搜索引擎编程，发现以下脚本居然可行？\n\n``` sql\n-- SELECT ...\nDO SLEEP(5);\n-- SELECT ...\n```\n\n为什么我需要到 `SLEEP` 方法，原因在于我需要根据参数 `ticket` 查询一个表的数据，但是目标表是不定时更新的。即使使用了 [批量插入](/2022/05/20/CSharp-bulk-insert-records-into-MySQL/)，把插入时间尽量缩短，仍存在插入途中遇到查询请求的情况。一般这时候都会引入锁的概念，以确保数据完整性。但是：\n\n1. 锁会降低并发量，得不偿失；\n2. 插入数据的代码不便更改，因为 owner 不是我（沟通/变更很费劲）。\n\n考虑到大多数情况下，一个 `ticket` 及其对应的数据都能在 5 秒之内成功插入。那为何我发现该 `ticket` 对应的数据还在插入中，我多等一会儿行不行？？\n\n### 真实案例\n\n``` sql\nDELIMITER $$\nUSE `mydb`$$\nDROP PROCEDURE IF EXISTS `sp_query_with_safe_check`$$\nCREATE DEFINER=`mysql_user`@`%` PROCEDURE `sp_query_with_safe_check`(IN `ticket` VARCHAR(128)) COMMENT 'query data by ticket, with safe check (return only if the data insertion completed)'\nproc_label:BEGIN\n\n\t\tDECLARE lastRowID INT;\n\t\tDECLARE newRowID INT;\n\t\tDECLARE lastTicket VARCHAR(45);\n\t\tSELECT MAX(t.id) INTO lastRowID FROM `mytable` t;\n\t\tSELECT t.ticket INTO lastTicket FROM `mytable` t WHERE id=lastRowID;\n\n\t\t-- SELECT lastRowID, lastTicket;\n\n\t\t-- safe check (if the data insertion completed)\n\t\tIF lastTicket=`ticket` THEN\n\t\t\t-- the lastest row's ticket is equal to the querying request form\n\t\t\t-- wait for 5 seconds to see if any new rows inserted\n\t\t\t-- if yes, the insertion is happening and just exit the query\n\t\t\t-- if no, continue the query\n\t\t\tDO SLEEP(5);\n\t\t\tSELECT MAX(t.id) INTO newRowID FROM `mytable` t;\n\t\t\tIF newRowID!=lastRowID THEN LEAVE proc_label; END IF;\n\t\tEND IF;\n\n\t\tSELECT \n\t\t\tDISTINCT t.*\n\t\tFROM `mytable` t WHERE t.ticket=`ticket`;\n\tEND$$\nDELIMITER ;\n```\n\n*👆 上面代码其实还可以继续优化，使用 `WHILE` 写法，在插入结束之前一直等着，这样可以避免等待了 5s 之后仍在插入返回空的情况。*\n\n### 参考链接\n\n- [MySQL::Miscellaneous Functions::Sleep](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_sleep)\n- [<i class=\"fa fa-stack-overflow\" aria-hidden=\"true\"></i> How and when to use SLEEP() correctly in MySQL?](https://stackoverflow.com/questions/4284524/how-and-when-to-use-sleep-correctly-in-mysql)\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> Oracle大佬离职，怒喷MySQL是“糟糕的数据库”……](https://mp.weixin.qq.com/s/zajIrjPAJPYnBzrqyU0U4Q)\n","tags":["mysql","if statement","sleep"]},{"title":"在 Windows 命令行和 PowerShell 中显示非 ASCII 字符","url":"/2022/03/04/display-non-ASCII-characters-in-Windows-command-and-PowerShell/","content":"\n在 `Windows` 环境下，只要使用的足够多，相信大家一定会遇到在命令行 (`cmd.exe`) 和 `PowerShell` 中显示非 `ASCII` 字符（比如中日韩字符，俗称 `CJK` 编码）的情况。但是有时候，命令行并补能够正常所有字符，取而代之的是方块 `□` 或者问号 `�`。\n\n![PowerShell 默认显示](/images/display-non-ASCII-characters-in-Windows-command-and-PowerShell/ps-default.png)\n\n为什么会出现这种情况？简单来讲：\n\n> It does not make sense to have a string without knowing what encoding it uses. [<i class=\"fa fa-chain\" aria-hidden=\"true\"></i>](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/)\n> 一个字符串如果不知道它用的编码，将毫无意义。\n> <cite>Joel Spolsky</cite>\n\n换言之，命令行之所以出现乱码，都是因为编码不对。`Windows` 命令行的编码，默认都是 `UCS-2`（即 `UTF-16`，以前是 `Java` 和 `JavaScript` 中默认编码），这在二十年前，是相当常见的编码，基本上不会存在什么问题。但随着互联网的流行，`UTF-8` 编码变得越来越流行，使用 `UTF-8` 编码存储的文件也越来越普遍，这就有冲突了。*如果感兴趣，可以看看本篇的 [参考链接](#参考链接)。*\n\n那如何解决命令行中显示非 ASCII 字符的问题呢？\n\n按照网上说法，如果你使用的是默认命令行 (`cmd.exe`)，那么可以使用 `chcp` 命令来设置编码，比如：\n\n``` bat\nchcp 65001\n```\n\n或者你可以在 `.bat` 文件第一行使用该命令来设置编码。\n\n![PowerShell chcp 65001 也不行啊](/images/display-non-ASCII-characters-in-Windows-command-and-PowerShell/ps-with-chcp-65001.png)\n\n貌似不行啊… 😕\n\n如果你使用的是 `PowerShell`，那需要使用 `-Encoding` 参数，指定编码格式。\n\n```\n$PSDefaultParameterValues['*:Encoding'] = 'utf8'\n```\n\n![PowerShell 设置编码](/images/display-non-ASCII-characters-in-Windows-command-and-PowerShell/ps-set-encoding.png)\n\nemmm… 还是不行… 😢\n\n其实，还有另一种方式，那就是换个 `Terminal`，比如 [Windows Terminal](https://docs.microsoft.com/en-us/windows/terminal/)，他的默认编码就是 `UTF-8` 🙂。\n\n![Windows Terminal](/images/display-non-ASCII-characters-in-Windows-command-and-PowerShell/windows-terminal-default.png)\n\n![Windows Terminal chcp 65001 能行？](/images/display-non-ASCII-characters-in-Windows-command-and-PowerShell/windows-terminal-with-chcp-65001.png)\n\n### 参考链接\n\n- [<i class=\"fa fa-windows\" aria-hidden=\"true\"></i> Windows Command-Line: Backgrounder](https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/)\n- [<i class=\"fa fa-stack-overflow\" aria-hidden=\"true\"></i> Using non-ASCII characters in a cmd batch file](https://stackoverflow.com/questions/18813495/using-non-ascii-characters-in-a-cmd-batch-file)\n- [Set Windows PowerShell to UTF-8 Encoding to Fix GBK Codec Can Not Encode Character Error – PowerShell Tutorial](https://www.tutorialexample.com/set-windows-powershell-to-utf-8-encoding-to-fix-gbk-codec-can-not-encode-character-error-powershell-tutorial)\n- [<i class=\"fa fa-github\" aria-hidden=\"true\"></i> Add emoji support to Windows Console](https://github.com/Microsoft/Terminal/issues/190)\n","tags":["encoding","ASCII","UTF8","BOM"]},{"title":"MySQL 大小写问题","url":"/2022/02/10/MySQL-case-sensitivity-issue/","content":"\n先说结论，一个对于像我这样的 `MySQL` 小菜狗们来说可能不清楚的知识点：同样的 `SQL` 脚本，如果不注意大小规范，在某些系统上可以正常运行，而扔到另一个系统上可能就会报错。\n\n举个🌰：\n\n``` sql\nSELECT col_name FROM tbl_name AS a WHERE a.col_name = 1 OR A.col_name = 2;\n```\n\n默认情况下，在 `Unix` 系统中表别名区分大小写，而 `Windows` 或者 `macOS` 中不。👆 上述语句在 `Unix` 系统中会报错，因为它同时引用到 `a` 和 `A`。\n\n在 `MySQL` 中，存储在磁盘上的表格和数据库的名字由系统变量 [lower_case_table_names](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) 决定。该变量不影响触发器(trigger)标识符的大小写敏感性。在 `Unix` 系统，默认值是 `0`，在 `Windows` 系统，默认值是 `1`，而在 `macOS` 系统，默认值是 `2`。\n\n| 值 | 含义 |\n| --- | --- |\n| 0 | 存储在磁盘中的表格和数据的名字使用的是 [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) 或者 [CREATE DATABASE](https://dev.mysql.com/doc/refman/8.0/en/create-database.html) 语句中的字母大小写。名称比较区分大小写。如果你要在一个文件名大小写不敏感的系统上运行 `MySQL`**不**应该设置此变量为 `0`。如果你在一个文件名大小写不敏感的系统上使用 [--lower-case-table-names=0](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names) 强制设置该变量为 `0`，并且使用不同的大小写字母访问 `MyISAM` 表名，那么可能导致索引损坏。 |\n| 1 | 存储在磁盘中的表格和数据的名字都是小写，并且名称比较不区分大小写。`MySQL` 在存储和查找时把所有表名转换成小写。该行为也适用于数据库名字和表别名。 |\n| 2 | 存储在磁盘中的表格和数据的名字使用的是 [CREATE TABLE](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) 或者 [CREATE DATABASE](https://dev.mysql.com/doc/refman/8.0/en/create-database.html) 语句中的字母大小写，但是 `MySQL` 在查找时会把它们转换成小写。名称比较不区分大小写。这仅仅在大小写不敏感的系统上可行！`InnoDB` 表名和视图名存储的是小写，类似于 `lower_case_table_names=1`。 |\n\n如果你使用的 `MySQL` 服务器和客户端都是一个系统，那么使用默认值完全没问题。然而，如果你在文件系统大小写敏感性不一样的系统间传输表格和数据，你可能会遇到问题。\n\n比如，我有一个 `MySQL` 源数据库，部署在 `Linux` 服务器上，其配置如下（执行脚本：`SHOW VARIABLES like 'lower%';`）：\n\n| Variable_name | Value |\n|-----|-----|\n| lower_case_file_system | OFF |\n| lower_case_table_names | 0 |\n\n这意味着，其对应的数据库名和表明存储和查找时是区分大小写的！碰巧，我在上面有一个**名称大写**的数据库。\n\n现在，我有另一台 `MySQL` 目标数据库，部署在 `Windows` 服务器上：\n\n| Variable_name | Value |\n|-----|-----|\n| lower_case_file_system | ON |\n| lower_case_table_names | 1 |\n\n意味着存储时都是小写，查找时不区分大小写。\n\n当我像往常一样，创建一张 `FEDERATED` 表格时，居然报错了，提示 `The foreign data source you are trying to reference does not exist`。\n\n针对这个问题，`MySQL` 官方推荐了两个方法：\n\n- 在所有系统中设置 `lower_case_table_names=1`。这样做最大的不足是，当你使用 [SHOW TABLES](https://dev.mysql.com/doc/refman/8.0/en/show-tables.html) 或者 [SHOW DATABASES](https://dev.mysql.com/doc/refman/8.0/en/show-databases.html) ，你将不能看到这些名字原始的大小写。\n- 在 `Unix` 系统中设置 `lower_case_table_names=0`，在 `Windows` 中设置 `lower_case_table_names=2`。这样做将保留数据库和表名的字母大小写。缺点是你必须确保你的语句在 `Windows` 上始终以正确的字母大小写引用数据库和表名。如果你将你的 `sql` 语句迁移到 `Unix`(大小写很重要)，未正确拼写字母大小写将导致报错。\n\n**例外：**如果你使用 `InnoDB` 表格并且想要避免数据传输问题，你应当在所有平台使用 `lower_case_table_names=1` 来强制转换名字成小写。\n\nemmm，第一个推荐方法，我不能更改 `Linux` 上的 `MySQL` 啊，人家那是产品环境；第二个推荐办法，更改部署在 `Windows` 上的 `MySQL` 目标数据库配置？听起来似乎可行？且慢：\n\n> `lower_case_table_names` 仅能在初始化服务器的时候设置。在服务器初始化之后更改 `lower_case_table_names` 设置是被禁止的。[<fa-link/>](https://dev.mysql.com/doc/refman/8.0/en/identifier-case-sensitivity.html)\n\n> 禁止在服务器初始化之后，使用不同的 `lower_case_table_names` 设置来启动服务器。该限制十分必要，因为各种数据字典表字段使用的排序规则是由初始化服务器时的设置决定，使用不同的设置重新启动服务器会在标识符的排序和比较方式方面引入不一致。 [<fa-link/>](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names)\n\n以下是初始化服务器时的设置：\n\n![show advanced and logging options](/images/mysql-case/show-advanced-and-logging-options.png)\n\n![preserve given case](/images/mysql-case/preserve-given-case.png)\n\n什么鬼，推荐了两个不能用的办法???\n\n那还有没有其他办法？我先去倒杯咖啡，冷静一下！<i class=\"fa fa-coffee\" aria-hidden=\"true\"></i>\n\n<i class=\"fa fa-lightbulb-o\" aria-hidden=\"true\"></i> 有了！既然服务器配置无法更改，那我试试改数据库配置？我记得，`MySQL` 数据库中有一个编码问题（`utf8`、`latin` 等等），还有一个 `collation` 问题。\n\nOK，先调研，再备份，再动手。\n\n根据这篇文档，\n\n``` sql\nALTER DATABASE `your_database` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_as_cs;\n```\n\n``` sql\nCREATE SERVER s\nFOREIGN DATA WRAPPER mysql\nOPTIONS (USER 'Remote',PASSWORD '', HOST 'XXX.XXX.XXX.XXX', DATABASE 'test');\n```\n\n不行，没有预期结果。\n\n这个好像是和表里的**数据**编码有关系，而不是**数据库/表**名称的编码。\n\n所以，结论就是，到此为止了？？？\n\n有一个办法，虽然肯定不是最佳实践，但应该能解决问题（我没试过 😂）：用一个能够区分数据库/表名称大小写的 `MySQL` 实例中转，然后在这个实例中名称能小写的都小写。然后再对这个中转实例创建 `FEDERATED` 表格。\n\n### 参考链接\n\n- [MySQL::Identifier Case Sensitivity](https://dev.mysql.com/doc/refman/8.0/en/identifier-case-sensitivity.html)\n- [MySQL::Server System Variables](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lower_case_table_names)\n- [MySQL::Character Sets and Collations in MySQL](https://dev.mysql.com/doc/refman/8.0/en/charset-mysql.html)\n- [<i class=\"fa fa-stackoverflow\" aria-hidden=\"true\"></i> How can I transfer data between 2 MySQL databases?](https://stackoverflow.com/questions/3242504/how-can-i-transfer-data-between-2-mysql-databases)\n","tags":["mysql","case sensitivity"]},{"title":"Elasticsearch 入门","url":"/2022/02/03/get-started-with-elasticsearch/","content":"\n最近公司有使用 `elasticsearch` 的需求，正好借此机会，复习一下之前的知识。\n\n### 下载 elasticsearch 和 Kibana\n\n[elasticsearch](https://www.elastic.co) 这几年的变化，还是挺大的，特别是从 [更改 license](https://www.elastic.co/blog/license-change-clarification) 之后，变得更加强大了。\n\n~~我之前使用的是 `elasticsearch` 和 `elasticsearch-head` 插件，现在官方推出的 `Kibana` 足够强大了，就不用第三方插件了~~\n\n目前官方支持的系统，从 `Linux` 到 `MacOS`，再到 `Windows`，再到 `Docker`，应有尽有。\n\n因为我这边的日常工作基本上都是在 `Windows` 中进行，所以 [直接下载 zip 包](https://www.elastic.co/elastic-stack) 即可。当前我下载的版本是 `7.16.3` （`elasticsearch` 和 `Kibana` 版本一般需要统一，具体可以参考 [这个文档](https://www.elastic.co/support/matrix#matrix_compatibility)）。\n\n### 安装和配置\n\n1. 解压下载好的两个 zip 包\n2. 更改 `elasticsearch-7.16.3/config/elasticsearch.yml` 配置如下(可根据实际情况做调整)：\n  ``` elasticsearch.yml\n  cluster.name: my-es\n  node.name: ${HOSTNAME}\n  network.host: 192.168.0.8\n  http.port: 9200\n  path.data: C:\\my-es\\elasticsearch-data\n  path.logs: C:\\my-es\\elasticsearch-logs\n  xpack.security.enabled : true\n  discovery.type: single-node\n  ```\n3. 配置 `elasticsearch` 环境变量：因为 `elasticsearch` 是基于 `Apache Lucene` 构建的，所以 `Java` 虚拟机是必须的。为了减少小白用户的困扰，目前，`elasticsearch` 在下载好的 zip 包中已包含了 `jdk` (Open Java 版本) 的子文件夹。配置很简单，只需要设置 `ES_HOME`(`elasticsearch` zip 包解压文件夹) 和 `ES_JAVA_HOME`(`%ES_HOME%\\jdk`) 两个环境变量即可。当然，如果你电脑已经安装了 `JDK`，那 `JAVA_HOME` 肯定已经配置好了，这个时候如果没有配置 `ES_JAVA_HOME`，`elasticsearch` 就会回滚读取 `JAVA_HOME` 里的 `jdk` 了\n4. 设置 `elasticsearch` 密码 [<i class=\"fa fa-chain\" aria-hidden=\"true\"></i>](https://www.elastic.co/guide/en/elasticsearch/reference/7.16/security-minimal-setup.html)：\n  1. 进入 `ES_HOME` 目录，运行 `./bin/elasticsearch.bat` 命令;\n  2. 进入 `ES_HOME` 目录，运行 `./bin/elasticsearch-setup-passwords.bat interactive` 命令，会提示给默认的几个账户(`apm_system`、`kibana_system`、`kibana`、`logstash_system`、`beats_system`、`remote_monitoring_user`、`elastic`)设置密码;\n  3. 打开浏览器，输入网址 [http://192.168.0.8:9200](http://192.168.0.8:9200) 检查一下 ES 是否正常运行（需要提供上一步设置的用户名密码）。\n5. 注册 `elasticsearch` 成为 `Windows` 服务（可选）[<i class=\"fa fa-chain\" aria-hidden=\"true\"></i>](https://www.elastic.co/guide/en/elasticsearch/reference/7.16/zip-windows.html)：进入 `ES_HOME` 目录，运行 `./bin/elasticsearch-service.bat install` 命令\n6. 更改 `kibana-7.16.3-windows-x86_64/config/kibana.yml` 配置如下(可根据实际情况做调整)：\n  ``` kibana.yml\n  server.host: \"192.168.0.8\"\n  elasticsearch.hosts: [\"http://192.168.0.8:9200\"]\n  elasticsearch.username: \"kibana_system\"\n  elasticsearch.password: \"your_password_here\"\n  ```\n7. 打开浏览器，输入网址 [http://192.168.0.8:5601](http://192.168.0.8:5601) 检查一下 Kibana 是否正常运行。（需要提供上上一步设置的用户名密码）\n  ![install successfully](/images/get-started-with-elasticsearch/install-successfully.jpg)\n\n### 使用\n\n`elastic` 官方已经给出了很多使用案例，包括日志分析、机器学习（需要付费解锁😄）、网络安全监测等等。这里就不深入了，仅介绍入门使用：使用 `elasticsearch` 的来增强关系型数据库的全文搜索能力。\n\n首先需要插入部分数据（官方支持一键导入测试数据，此处略过）。\n\n\n\n\n### 参考链接\n\n- [Get started with Elasticsearch, Kibana and the Elastic Stack](https://www.elastic.co/start)\n- [Set up minimal security for Elasticsearch](https://www.elastic.co/guide/en/elasticsearch/reference/7.16/security-minimal-setup.html)\n- [Elasticsearch Guide](https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html)\n- [Python Elasticsearch Client](https://elasticsearch-py.readthedocs.io/en/stable/)\n- [@elastic/elasticsearch - npm](https://www.npmjs.com/package/@elastic/elasticsearch)\n","tags":["elasticsearch","kibana","logstash","elk"]},{"title":"低代码应用","url":"/2022/01/30/lowcode-apps/","content":"\n互联网黑话，一直在进化。低代码应用，是最近很流行的一个词汇。初听，感觉很厉害，出来了一个新东西啦！但其实仔细了解就知道，这其实是炒冷饭。直接说说我的个人看法吧。低代码是资本对 `RPA`() 的重新包装，让全民编程变得可能。编程，之前是程序员才能做的事，现在通过各种 `RPA`/低代码工具，让业务人员也可以独立完成一些重复性的劳动。\n\n所以，看见新名词不要慌，了解其背后的业务逻辑和原理，遇到再多的新名词都可以举一反三。\n\n和低代码相关的其他名词/产品有：\n\n### Tableau 和 Power BI\n\n以前，大公司都会请专门的人才（数据分析师/数据科学家等），使用 `Tableau` / `Power BI` 来做各种报表，分析市场数据/订单数据等，俗称 `BI` (`Business Intelligence`，业务智能)。\n\n### iOS 快捷指令(Shortcuts)\n\n`iOS Shortcuts`(快捷指令)，它不是第一个移动端编程 APP，但绝对是最出名的。可以说，它让全民编程时代来的更凶猛。\n\n![iOS Shortcuts](https://is5-ssl.mzstatic.com/image/thumb/Purple113/v4/3e/52/07/3e520776-0908-893c-2248-6c9d29a03cc7/AppIcon-0-1x_U007emarketing-0-0-GLES2_U002c0-512MB-sRGB-0-0-0-85-220-0-0-0-7.png/230x0w.webp)\n\n`鸿蒙系统` 的 `智慧生活`（`AI Life`），和 `iOS Shortcuts` 类似，可以让你的手机更加“智能”、简单。\n\n![智慧生活](https://appimg.dbankcdn.com/application/icon144/65/59a1f04d8b714e3cb7b7bad37783d714.png)\n\n### 机器人流程自动化(RPA, Robotic Process Automation)\n\n- [UI Path](https://images.ctfassets.net/5965pury2lcm/5emz38G3Bw126GqB1ss9Y6/6a32ae5f4c8dde876512f058356c5776/logo-lockup-Apps.png)\n- ![Power Automate](https://powerautomate.microsoft.com/images/application-logos/svg/powerautomate.svg)\n- [Blue prism](https://www.blueprism.com/assets/icons/logo-blue.svg)\n- [影刀](https://www.winrobot360.com/img/logo.svg)\n- [实在 RPA](https://cdn-static-resources.ai-indeed.com/official-website/images/pc/header/logo.png)\n\n### 聊天机器人(Chatbots)\n\n一般用于售后服务、知识库查阅等服务中心。（一般会于自然语言处理(`NLP`，`Natural Language Processing`) 和人工智能(`AI`,`Artificial Intelligence`)联系在一起）\n\n### Scriptable\n\n> Scriptable, an app that lets you automate iOS using JavaScript.\n\n### 参考链接\n\n- [What is Robotic Process Automation (RPA) | IBM](https://www.ibm.com/cloud/learn/rpa)\n- [Shortcuts on the App Store](https://apps.apple.com/us/app/shortcuts/id915249334)\n- [AI Life](https://appgallery.huawei.com/app/C10406921)\n- [Scriptable Docs](https://docs.scriptable.app/)\n","tags":["low code","power automate","shortcuts","scriptable","rpa","uipath"]},{"title":"我所遇到的 Python 常见问题","url":"/2022/01/21/python-common-issues-that-I-encountered/","content":"\n最近在使用 `Python` 写一些趁手的小工具，因为很久没有用 `Python` 了，有些生疏，导致一些基础的操作都忘了，没办法，又要面向搜索引擎编程了。 😂\n\n为此，记录一下我遇到的一些 `Python` 常见问题，以后再遇到直接翻这篇文章就好了。\n\n### 设置 pip 镜像源 \n`pip install` 默认使用的是 [pypi.org](https://pypi.org) 的镜像源。国内虽然也能访问，但访问速度有限，偶尔还会抽风。为此，推荐使用国内镜像源，比如清华大学、阿里云什么的。比如下面脚本就是全局设置清华大学数据源。\n\n``` sh\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n设置完后，安装速度直接起飞！ ✈\n\n### 使用代理\n\n`Python` 程序，包括使用 `pip` 安装第三方库，默认是不会使用系统的网络配置的。所以就会发生一种情况，电脑能够正常打开网页，但是运行 `Python` 程序，或者 `pip install` 总是报错说无法访问网络。可能原因之一是，电脑使用了代理脚本或者代理服务器。而 `Python` 或 `pip` 并没有使用代理。\n\n``` sh\npip install mysql-connector-python --proxy http://{username}:{password}@{host}:{port}\n```\n\n- *Note 1: `Python`连接 `MySQL` 数据库以前使用的是 [mysql.connector](https://pypi.org/project/mysql-connector/) 这个包，现在废弃了，Python 官方推荐使用 [mysql-connector-python](https://pypi.org/project/mysql-connector-python/)。如果你使用过程当中遇到一些奇怪的报错，请先卸载这两个包(`pip uninstall mysql.connector mysql-connector-python`)，再重新安装新的包 (`pip install mysql-connector-python`)*\n- *Note 2: 代理如果不需要登陆，用户名和密码可不填；如果需要用户名和密码的话，需要转义特殊字符 ([encodeURIComponent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)，比如 `@` 字符就要用 `%40` 代替)*\n\n### 类变量 (class variables)\n\n`Python` 的写法和其他编程语言不太一样，我们在类中声明的变量，默认是 [类变量](https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables)；通常在其他编程语言中，比如 `C#`、`Java`、`JS` 等，则是实例变量。\n\n``` py\nclass Dog:\n\n    kind = 'canine'         # class variable shared by all instances\n\n    def __init__(self, name):\n        self.name = name    # instance variable unique to each instance\n```\n\n上述代码声明的变量 `kind` 就是个类变量，简单理解就是 `C#` 中的静态变量(`static`)。而另一个更 tricky 的地方是，使用 `self` 和类名都可以引用到这个**变量**，但是使用 `self` 引用或者修改这个变量的话，只是修改了这个实例的变量，并未修改类变量。\n\n具体可以参考以下代码：\n\n``` py\nprint('-'*16)\nd1 = Dog('d1')\nprint(f\"d1.kind {d1.kind}\") \nprint(f\"Dog.kind {Dog.kind}\") \nprint('-'*16)\nd1.kind = \"barbet\"\nprint(f\"d1.kind {d1.kind}\") \nprint(f\"Dog.kind {Dog.kind}\") \nprint('-'*16)\nDog.kind = \"husky\"\nprint(f\"d1.kind {d1.kind}\") \nprint(f\"Dog.kind {Dog.kind}\") \nprint('-'*16)\nd2 = Dog('d2')\nprint(f\"d1.kind {d1.kind}\") \nprint(f\"d2.kind {d2.kind}\") \nprint(f\"Dog.kind {Dog.kind}\") \nprint('-'*16)\nd2.kind = \"collie\"\nprint(f\"d1.kind {d1.kind}\") \nprint(f\"d2.kind {d2.kind}\") \nprint(f\"Dog.kind {Dog.kind}\") \nprint('-'*16)\nDog.kind = \"pastoral\"\nprint(f\"d1.kind {d1.kind}\") \nprint(f\"d2.kind {d2.kind}\") \nprint(f\"Dog.kind {Dog.kind}\") \nprint('-'*16)\n```\n\n输出：\n```\n----------------\nd1.kind canine\nDog.kind canine\n----------------\nd1.kind barbet\nDog.kind canine\n----------------\nd1.kind barbet\nDog.kind husky\n----------------\nd1.kind barbet\nd2.kind husky\nDog.kind husky\n----------------\nd1.kind barbet\nd2.kind collie\nDog.kind husky\n----------------\nd1.kind barbet\nd2.kind collie\nDog.kind pastoral\n----------------\n```\n\n### 使用 Anaconda 环境运行 py 文件\n\n运行环境管理从来都是程序界永恒的难题。随着 `Jupyter` 的流行，`Anaconda` 也变得使用的越来越广泛了。但是我在我本地，使用 `Jupyter` 和 `Spyder` 编写的程序运行调试都没问题，我还用 “Anaconda Prompt (Anaconda3)” 单独运行也没有问题，通过测试了，我要部署到服务器怎么办就报错了？（“程序在我本地运行的好好的，怎么搬到服务器上就不行了？”）\n\n通常情况下，遇到这种问题，使用容器即可解决。但是项目组内没有人懂，或者没有专门的运维人员来维护怎么办（其实就是不想用容器 😄）。有一种快速解决的办法。仔细观察电脑中已经安装好的 “Anaconda Prompt (Anaconda3)” 其背后指向的路径：`%windir%\\System32\\cmd.exe \"/K\" C:\\Users\\xxx\\Anaconda3\\Scripts\\activate.bat C:\\Users\\xxx\\Anaconda3`，不难发现，它使用了 [激活虚拟环境](https://docs.python.org/3/tutorial/venv.html) 技术。这就好办了：在其他人的电脑上运行的话，我把我的虚拟环境 (`requirements.txt`) 也搬过去不就行了？(类似于 `Node` 的 `packages.json`)\n\n本来本地运行我的 `HelloWorld` 程序，只需要打开 “Anaconda Prompt (Anaconda3)”，切换运行目录 (cd ) 至当前环境，运行 `./helloworld.py` 或者 `python ./hello.py` 即可。现在只需要把以下代码运行以下的 `bat` 文件\n\n<!-- ``` bat\n`%windir%\\System32\\cmd.exe \"/K\" C:\\Users\\xxx\\Anaconda3\\Scripts\\activate.bat C:\\Users\\xxx\\Anaconda3 helloworld.py\n``` -->\n\n``` start.bat\n@echo OFF\nrem How to run a Python script in a given conda environment from a batch file.\n\nrem It doesn't require:\nrem - conda to be in the PATH\nrem - cmd.exe to be initialized with conda init\n\nrem Define here the path to your conda installation\nset CONDAPATH=C:\\Users\\yourname\\Anaconda3\nrem Define here the name of the environment\nset ENVNAME=base\n\nrem The following command activates the base environment.\nrem call C:\\Users\\yourname\\Anaconda3\\Scripts\\activate.bat C:\\Users\\yourname\\Anaconda3\nif %ENVNAME%==base (set ENVPATH=%CONDAPATH%) else (set ENVPATH=%CONDAPATH%\\envs\\%ENVNAME%)\n\nrem Activate the conda environment\nrem Using call is required here, see: https://stackoverflow.com/questions/24678144/conda-environments-and-bat-files\ncall %CONDAPATH%\\Scripts\\activate.bat %ENVPATH%\n\nrem Run a python main.py in that environment\npython main.py\n\nrem Deactivate the environment\ncall conda deactivate\n\nrem If conda is directly available from the command line then the following code works.\nrem call activate someenv\nrem python main.py\nrem conda deactivate\n\nrem One could also use the conda run command\nrem conda run -n someenv python main.py\npython main.py\n```\n\n将上述内容拷贝并保存至 `start.bat`，保存目录和需要运行的 `main.py` 一致。\n\n顺便提一下，建议安装 `Anaconda` 的时候，选择使用 `Anaconda` 作为默认的 `Python` 解释器，这样就不用维护多个 `Python` 版本了，且你在 `Spyder` 或者 `Jupyter Notebook` 运行的结果和你直接在命令行里运行 `Python` 命令结果一样了，不会出现各种模块找不到的问题。\n\n### 安装成功后无法执行命令\n\n某些情况下，安装成功后，无法执行命令，比如：\n\n```\npip install playwright\nplaywright install\n```\n\n上述命令，虽然第一个命令成功执行，第二个依然报错 `the term 'playwright' is not recognized`。通过检查，发现 `Python` 安装目录以及 `Scripts` 子目录都已经放到环境变量里了。解决办法是，还需要把用户目录里的 `Python/Scripts` 也加到环境变量中。[<i class=\"fa fa-chain\" aria-hidden=\"true\"></i>](https://packaging.python.org/en/latest/tutorials/installing-packages/#installing-to-the-user-site)\n\n```\n%USERPROFILE%\\AppData\\Roaming\\Python\\Python310\\Scripts\n```\n\n### 参考链接\n\n- [<i class=\"fa fa-github\" aria-hidden=\"true\"></i> run_python_script_in_conda_env.bat](https://gist.github.com/maximlt/531419545b039fa33f8845e5bc92edd6)\n- [Installing packages using pip and virtual environments](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments)\n- [<i class=\"fa fa-stack-overflow\" aria-hidden=\"true\"></i> pip installs packages successfully, but executables not found from command line](https://stackoverflow.com/questions/35898734/pip-installs-packages-successfully-but-executables-not-found-from-command-line)\n","tags":["proxy","python","anaconda"]},{"title":"Node.js 子进程","url":"/2021/12/30/Node-js-child-processes/","content":"\n很久之前，我写过[几个爬虫程序](/2021/07/24/crawling-web-via-Nightmare-js/)（个人学习用途！！！）。之前为了避免被反爬程序识别，特地一个一个串行执行，还降低爬取速度。但是多个目标站点就没必要自己给自己设限了。\n\n我的设想（需求）是：拿到一个 search term，我会把它分发给多个搜索引擎的爬虫程序（比如百度、谷歌、必应）同时搜。\n\n说干就干。\n\n```js\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst spawnProcess = require(\"child_process\");\nconst { exit } = require(\"process\");\n\nconst { REQUEST_DELAY } = require(\"./constants\");\n\nconst jobsFolder = \"./jobs\";\n\n/** send the search job to sogouCrawler */\nconst invokeSogouCrawler = searchTerm => {\n  return new Promise((resolve, reject) => {\n    console.log(\"start crawling sogou news for \" + searchTerm);\n    setTimeout(() => {\n      const p = spawnProcess.spawn(\"node\", [\n        \"./crawlers/sogouCrawler.js\",\n        searchTerm\n      ]);\n      p.on(\"close\", function(spawnCode) {\n        console.log(\"complete crawling sogou news for \" + searchTerm);\n        resolve(spawnCode);\n      });\n      setTimeout(resolve, 1048576); // bugfix: the program just stock there\n    }, REQUEST_DELAY);\n  });\n};\n\n/** send the search job to toutiaoCrawler */\nconst invokeToutiaoCrawler = searchTerm => {\n  return new Promise((resolve, reject) => {\n    console.log(\"start crawling toutiao news for \" + searchTerm);\n    setTimeout(() => {\n      const p = spawnProcess.spawn(\"node\", [\n        \"./crawlers/toutiaoCrawler.js\",\n        searchTerm\n      ]);\n      p.on(\"close\", function(spawnCode) {\n        console.log(\"complete crawling toutiao news for \" + searchTerm);\n        resolve(spawnCode);\n      });\n      setTimeout(resolve, 1048576); // bugfix: the program just stock there\n    }, REQUEST_DELAY);\n  });\n};\n\n// get job list\nfs.readdir(jobsFolder, (err, files) => {\n  if (err) {\n    console.error(err);\n    exit();\n  }\n  if (files == null || files.length === 0) {\n    console.warn(\"no job file was found!\");\n    exit();\n  }\n  // get the lastest job file\n  let theLatestFile = path.join(jobsFolder, files[0]);\n  let theLatestMTime = new Date();\n  for (let file of files) {\n    const filePath = path.join(jobsFolder, file);\n    const fileMTime = fs.statSync(filePath).mtime;\n    if (theLatestFile === filePath) {\n      theLatestMTime = fileMTime;\n      continue;\n    }\n    if (fileMTime > theLatestMTime) {\n      theLatestFile = filePath;\n      theLatestMTime = fileMTime;\n    }\n  }\n  // read content from the latest job file\n  fs.readFile(theLatestFile, \"utf8\", (err, content) => {\n    if (err) {\n      console.error(err);\n      exit();\n    }\n    if (content && content.length) {\n      const rows = content\n        .split(\"\\n\")\n        .filter(_ => _ && _.length)\n        .map(_ => _.trim());\n      const tprs = Array.from(\n        new Set(\n          rows\n            .map(_ => _.split(\"\\t\"))\n            .reduce((prev, curr) => {\n              return prev.concat(curr);\n            }, [])\n            .filter(_ => _.length >= 5)\n        )\n      );\n      if (tprs.length) {\n        console.log(tprs);\n        const allDoneSignal = \"Winner, Winner, Chicken Dinner~\";\n        /** invoke sogou crawler one by one */\n        const nextSogouCrawlItem = (idx_sogou = 0) => {\n          if (idx_sogou === tprs.length) {\n            return Promise.resolve(allDoneSignal);\n          }\n          const p = invokeSogouCrawler(tprs[idx_sogou]);\n          return p.then(() => {\n            idx_sogou++;\n            return nextSogouCrawlItem(idx_sogou);\n          });\n        };\n        /** invoke toutiao crawler one by one */\n        const nextToutiaoCrawlItem = (idx_toutiao = 0) => {\n          if (idx_toutiao === tprs.length) {\n            return Promise.resolve(allDoneSignal);\n          }\n          const p = invokeToutiaoCrawler(tprs[idx_toutiao]);\n          return p.then(() => {\n            idx_toutiao++;\n            return nextToutiaoCrawlItem(idx_toutiao);\n          });\n        };\n        let p_sogou = nextSogouCrawlItem();\n        let p_toutiao = nextToutiaoCrawlItem();\n        // let p_toutiao = Promise.resolve(allDoneSignal);  // disable temporary\n        Promise.all([p_sogou, p_toutiao]).then(exitCode => {\n          // exit code should always be equals to allDoneSignal\n          console.log(exitCode);\n          exit();\n        });\n      }\n    } else {\n      console.warn(\"empty job file: \", theLatestFile);\n      exit();\n    }\n  });\n});\n```\n\n\n### 参考链接\n\n- [Node.js documentation](https://nodejs.org/api/child_process.html)\n- [Node.js Child Process](https://www.educba.com/node-js-child-process/)\n","tags":["Node.js","multitasking"]},{"title":"消失的日期","url":"/2021/11/20/missing-days/","content":"\n前两天看见 *科普中国* 公众号发布的一篇[文章](https://mp.weixin.qq.com/s/W2jm-MUQ5QfTq6xo8PG4Ng)，大受震撼，长见识了！原来，历史上“消失了”一些日期。哈哈，和朋友 zhuangbility 的时候到了：为什么历史上会有消失的日期，这到底是自然选择还是集体被 “月读”；究竟是人性的扭曲，还是道德的沦丧。😄😄\n\n> 时间和空间并不存在，这只是人们的一个幻觉。\n> <cite>阿尔伯特·爱因斯坦</cite>\n\n以下是历史上“消失的”日期：\n\n| 国家 | “消失”的日期区间 | “消失”天数 |\n|-----|-----|-----|\n| 意大利、波兰、西班牙、葡萄牙 | 1582.10.5 - 1582.10.14 | 10 |\n| 法国 | 1582.12.10 - 1582.12.19 | 10 |\n| 比利时 | 1583.1.2 - 1583.1.11 | 10 |\n| 丹麦、挪威、德国部分 | 1700.2.19 - 1700.2.28 | 10 |\n| 英格兰、苏格兰、美国部分 | 1752.9.3 - 1752.9.13 | 11 |\n| 瑞典 | 1753.2.18 - 1753.2.28 | 11 |\n| 阿拉斯加 | 1867.10.6 - 1867.10.17 | 12 |\n| 俄罗斯 | 1918.2.1 - 1918.2.13 | 13 |\n| 希腊 | 1923.2.16 - 1923.2.28 | 13 |\n\n一句话概括：以前不同历法周期不一致，后来逐渐大一统了，从旧历法切换到新历法的时候，就需要强制把旧历法的日期改成新历法的日期，中间可能会删除掉某些日子。比如，意大利、波兰、西班牙、葡萄牙国家从儒略历切换到格里历的时候，就删除了 `1582/10/5` 到 `1582/10/14` 共十天的日期。\n\n学过编程算法的肯定都写过这样的代码：给定一个年份，判定其是否为闰年。\n\n其实这便是现在通用的**格里历**的规则：\n\n1. 年份能够被 4 整除则为闰年；\n2. 特别的，世纪年（年份为整百数）必须要被 400 整除才设为闰年，否则设为平年。\n\n即每 400 年当中只有 97 个闰年，平均每年 `(365×303+366×97)/400=365.2425` 日。\n\n而在此之前的**儒略历**仅有第一点规则，平均每年 `(365×3+366)/4=365.25` 日。这就导致，儒略历对应的日期相比格里历是滞后的（每 133 年差一天）。所以，在历法从儒略历切换到格里历时，就要把滞后的日子直接从日历中删除。（就是这么简单粗暴）\n\n如果你有心，翻看**某些**日历 APP，就会发现，它们会直接删除这些日期，比如：\n\n- ![iOS Calendar](/images/missing-days/ios-calendar.jpg)\n- ![Harmony OS](/images/missing-days/harmonyos-calendar.jpg)\n\n### 拓展一\n\n历法一般分三种，阳历（以地球绕太阳公转纪年）、阴历（以月相阴晴圆缺纪月，一年十二个月）、阴阳历（前两者结合，即以月相阴晴圆缺纪月为基础，通过设置闰月来纪年）。所以，我们的农历属于阴阳历。\n\n### 拓展二\n\n为了调节日期，我们有了闰月；但是其实为了调节每一天当中的时间，我们还有闰秒机制。过去几十年，地球自转在变慢，所以，为了等待赶不上趟的地球自转，自 1972 年开始，我们人为增加了 1 秒。具体的操作就是在某一天（通常是 6/30 或 12/31）的 `23:59:59` 之后，增加 `23:59:60`，再到第二天的 `00:00:00`，或者在 `23:59:58` 之后，跳过 `23:59:59` 直接到第二天的 `00:00:00`。\n\n迄今为止，我们总共增加了 27 次闰秒，但是还没有发生减少闰秒的情况：\n\n| 实施年份 | 6月30日 23:59:60 | 12月31日 23:59:60 |\n|------|------|------|\n| 1972年 | +1秒 | +1秒|\n| 1973年 | —— | +1秒 |\n| 1974年 | —— | +1秒 |\n| 1975年 | —— | +1秒 |\n| 1976年 | —— | +1秒 |\n| 1977年 | —— | +1秒 |\n| 1978年 | —— | +1秒 |\n| 1979年 | —— | +1秒 |\n| 1981年 | +1秒 | —— |\n| 1982年 | +1秒 | —— |\n| 1983年 | +1秒 | —— |\n| 1985年 | +1秒 | —— |\n| 1987年 | —— | +1秒 |\n| 1989年 | —— | +1秒 |\n| 1990年 | —— | +1秒 |\n| 1992年 | +1秒 | —— |\n| 1993年 | +1秒 | —— |\n| 1994年 | +1秒 | —— |\n| 1995年 | —— | +1秒 |\n| 1997年 | +1秒 | —— |\n| 1998年 | —— | +1秒 |\n| 2005年 | —— | +1秒 |\n| 2008年 | —— | +1秒 |\n| 2012年 | +1秒 | —— |\n| 2015年 | +1秒 | —— |\n| 2016年 | —— | +1秒 |\n\n这个操作，对普通人基本没有影响，但是对很多科学计算或精密工程的影响则十分巨大。这也会给软件系统带来 bug（具体可自行去网上搜寻，个中苦楚，恐怕只有行业中的人士才能懂 😭）。所以，现在有些人建议不要搞闰秒了，直接搞闰时好了，这样不用隔几年就要闰一次，方便你我他。\n\n### 拓展三\n\n其实，在编程领域，另一个和时间打交道时经常遇到的问题便是时区。虽然初中便学过，但这里面的水，简直不要太深。有兴趣的小伙伴，请戳 [这里](https://www.timeanddate.com/time/current-number-time-zones.html)，我就不赘述了。\n\n这里仅记录经常被问的问题和我总结的答案：\n\n1. 总共有多少个时区?\n   目前在使用的有 38 个（排除那些小众的，不被大多数人认可的时区，参考的是 [这里](https://www.timeanddate.com/time/current-number-time-zones.html)。下同）\n2. 印度是东 4.5 区？\n   是的，严格来说是 [UTC +4:30](https://www.timeanddate.com/time/zones/aft) 区，其他奇怪的时区还有 [UTC -9:30](https://www.timeanddate.com/time/zones/mart)、[UTC -3:30](https://www.timeanddate.com/time/zones/nst)、[UTC +3:30](https://www.timeanddate.com/time/zones/irst)、[UTC +5:30](https://www.timeanddate.com/time/zones/ist)、[UTC +5:45](https://www.timeanddate.com/time/zones/npt)、[UTC +6:30](https://www.timeanddate.com/time/zones/mmt)、[UTC +8:45](https://www.timeanddate.com/time/zones/acwst)、[UTC +9:30](https://www.timeanddate.com/time/zones/acst)、[UTC +10:30](https://www.timeanddate.com/time/zones/acdt)、[UTC +13](https://www.timeanddate.com/time/zones/nzdt)、[UTC +13:45](https://www.timeanddate.com/time/zones/chadt)、[UTC +14](https://www.timeanddate.com/time/zones/lint)\n3. 最早时间和最晚时间相差多久？\n   最早是 `UTC +14` 时间，最晚是 `UTC -12` 时间，所以前后相差 26 小时\n\n### 拓展四\n\n为了节约能源~~（减少碳排放）~~，部分国家还设置了冬令时和夏令时。我们国家在上个世纪曾效仿苏联，短暂实施过几次夏令时（1986 年至 1991 年），后来取消了。\n\n> 愚蠢的人类！\n> <cite>威震天</cite>\n\n### 拓展五\n\n以上这些紊乱的时间问题，导致我们在代码的世界中经常遇到莫名其妙的问题（~~bug~~ issue / feature 😂）。且这些问题，在不同的环境（context）下可能表现得还不太一样。\n\n比如，消失的天数，在 `Go`、`C#` 和 `js` 等编程语言中均体现不出来：\n\n![missing days in Go](/images/missing-days/go.png)\n![missing days in C#](/images/missing-days/cs.png)\n![missing days in js](/images/missing-days/js.png)\n\n但是，夏令时却：\n\n![daylight in C#](/images/missing-days/daylight-in-cs.png)\n![daylight in js](/images/missing-days/daylight-in-js.png)\n\n![什么鬼](/images/missing-days/what.gif)\n\n### 参考链接\n\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> 历史上\"消失\"的日期：我消失了，但仿佛又没消失…](https://mp.weixin.qq.com/s/W2jm-MUQ5QfTq6xo8PG4Ng)\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> 热搜第一！地球自转加速，一天不足24小时！网友最想知道的果然是它](https://mp.weixin.qq.com/s/hgZMUy54cEf3iPc_DLTQwg)\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> 计算机时间到底是怎么来的？程序员必看的时间知识！](https://mp.weixin.qq.com/s/Xw-CQV0QvxhKw0zMgbHpQA)\n- [Leap Seconds FAQs](https://www.nist.gov/pml/time-and-frequency-division/leap-seconds-faqs)\n- [一文看懂世界各国的夏令时冬令时](http://web.overseas-sa.com/article/5876.html)\n","tags":["随笔","DateTime"]},{"title":"mysql 字符串拆分行","url":"/2021/11/10/mysql-split-string/","content":"\nSQL Server 没有 [GROUP_CONCAT](/2021/02/28/GROUP-CONCAT-in-SQL-Server/)，MySQL 没有 [STRING_SPLIT](https://docs.microsoft.com/en-us/sql/t-sql/functions/string-split-transact-sql?view=sql-server-ver15)。 😔\n\n还能咋办，人肉填坑啊！\n\n大概看了一下网上的解决方案，很多都在推荐使用 [SUBSTRING_INDEX(str,delim,count)](https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_substring-index) 函数，join `mysql.help_topic` 表的自增列来完成。示例如下：\n\n``` sql\nSELECT\n    a.id,\n    a. NAME,\n    SUBSTRING_INDEX(\n        SUBSTRING_INDEX(\n            a.shareholder,\n            ',',\n            b.help_topic_id + 1\n        ),\n        ',' ,- 1\n    ) AS shareholder\nFROM\n    company a\nJOIN mysql.help_topic b ON b.help_topic_id < (\n    LENGTH(a.shareholder) - LENGTH(\n        REPLACE (a.shareholder, ',', '')\n    ) + 1\n)\n```\n\nemmm，不够优雅，但至少能解决大部分场景问题。\n\n可以参照 SQL Server 中 [STRING_SPLIT](https://www.sqlshack.com/the-string-split-function-in-sql-server/) 的用法，将上述的解决方案封装一下：\n\n``` sql\n-- todo\n```\n\n### 参考链接\n\n- [mysql根据逗号将一行数据拆分成多行数据](https://www.cnblogs.com/David3290/p/11378579.html)\n- [How to split the name string in mysql?](https://stackoverflow.com/questions/14950466/how-to-split-the-name-string-in-mysql)\n- [The STRING_SPLIT function in SQL Server](https://www.sqlshack.com/the-string-split-function-in-sql-server/)\n\n","tags":["mysql","split"]},{"title":"页面添加水印","url":"/2021/11/06/add-watermark-to-webpage/","content":"\n水印，这个让人又爱又恨的发明，终于，老板让我染指了… 😟\n\n需求很简单，就是给页面加上水印，这样不管用户是截图还是保存页面的时候，都会强制带上水印信息。\n\n简单来讲，按用途来分，水印也分两种：\n\n1. 版权声明。一般在网络上散布的各种图片当中，肉眼可见的水印。\n2. 监控回溯。比如之前有新闻报道，某员工将内部邮件截图发布到网上，然后公司立马约该员工喝茶，其实就是利用了邮件 APP 中肉眼极其难以分辨的水印。😰\n\n我这次的用户需求，更贴合第一种情况。\n\n首先，在面向搜索引擎编程之前，一定要自己试试，有哪些可能的解决方案。我大概构思了一下，简单列觉如下：\n\n1. 整体 `body` 或者主要内容的 `div` 设置 `background-image`，并设置 `opacity`；\n2. 在页面上放置一个 `position:fixed` 或者和页面同宽高的 `img` 或者 `div`（设置 `background-image`），然后设置 `z-index` 和 `opacity`；\n3. 给需要加水印的 `div` 或者 `img` 添加 `:before` 或者 `:after` 属性，自动添加水印；\n\n当然，为了防篡改，以上的这些 `CSS` 属性设置，也可以通过 `JS` 代码实现；并且通过定时任务，保持水印。更多防擦除水印，可以自行搜索，或者参考业界防复制的办法…\n\n我的解决办法，超级简单，就是采用第一种，整体设置 `background-image`。但是这个 `image` 比较特殊，是个 SVG。考虑用 SVG 的原因是：\n\n1. 水印内容为纯文本信息，很简单，省的制作背景图片了；\n2. 对提升网络请求有益；\n3. 方便之后动态设置水印内容（比如附带时间信息）；\n\nSVG 文件的内容参考如下：\n\n``` svg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 128 64\"><text x=\"50%\" y=\"50%\" dominant-baseline=\"middle\" text-anchor=\"middle\" opacity=\"0.125\" fill=\"#999\" font-style=\"italic\" transform-origin=\"center\" transform=\"rotate(-30)\">Confidential</text></svg>\n```\n\n设置整体 `background-image`：\n\n``` css\n#app-root {\n  background-image: url(\"/assets/images/confidential.svg\");\n}\n```\n\n如果需要通过代码设置动态 SVG 的话，可以使用以下代码：\n\n``` css\n.watermark {\n   background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 600 200'%3E%3Cpath d='M10 10h123v123H10z'/%3E%3C/svg%3E\");\n}\n```\n\n然后通过操作 [CSSOM](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model) 来替换对应的样式，比如 [CSSStyleSheet.replaceSync()](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/replaceSync) 整体替换，或者 `[cssRules](https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList)\\[index\\].style` 部分替换。\n\n``` js\n// https://bl.ocks.org/jennyknuth/222825e315d45a738ed9d6e04c7a88d0\nfunction encodeSvg(svg: string) {\n  return svg.replace('<svg', (~svg.indexOf('xmlns') ? '<svg' : '<svg xmlns=\"http://www.w3.org/2000/svg\"'))\n    .replace(/\"/g, '\\'')\n    .replace(/%/g, '%25')\n    .replace(/#/g, '%23')\n    .replace(/{/g, '%7B')\n    .replace(/}/g, '%7D')\n    .replace(/</g, '%3C')\n    .replace(/>/g, '%3E')\n}\nconst dataUri = `data:image/svg+xml;utf8,${encodeSvg(svg)}`;\nconst stylesheet = document.styleSheets[0]; // need to update accordingly\nstylesheet.cssRules[0].style.backgroundImage=dataUri; // need to update accordingly\n```\n\n某些时候，修改了以上代码之后，你会发现，页面好像没有任何的变动，或者只有部分组件有水印。这可能是因为，页面 `DOM` 设置了背景颜色，比如我的项目代码中引用了 `Ant Design` 的组件，而这些组件默认背景色就是白色。解决办法就是调整主题样式：\n\n``` css\n#app-root .ant-btn,\n#app-root .ant-card,\n#app-root .ant-alert,\n#app-root .ant-drawer,\n#app-root .ant-form,\n#app-root .ant-grid,\n#app-root .ant-moal,\n#app-root .ant-notification,\n#app-root .ant-popover,\n#app-root .ant-tabs,\n#app-root .ant-table,\n#app-root .ant-table tr th:not(.ant-table-cell-fix-left),\n#app-root .ant-table tr td:not(.ant-table-cell-fix-left) {\n  background-color: initial;\n}\n```\n\n### 参考链接\n\n- [How to add SVGs with CSS (background-image)](https://www.svgbackgrounds.com/how-to-add-svgs-with-css-background-image/)\n- [CSSStyleSheet.replaceSync()](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/replaceSync) \n- [Modify a stylesheet rule with CSSOM](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information#modify_a_stylesheet_rule_with_cssom)\n","tags":["watermark","svg"]},{"title":"Emoji 知识复习","url":"/2021/10/16/emoji-knowledge-review/","content":"\n`Emoji` 现在已经充满我们生活的各种角落里。平时说起 `Emoji`，自然会联想起 `Unicode`，有些人还可能会想起微信或者 `iOS`。事先说明一点，`Emoji` 不是微信表情包，也不是苹果原创！！！\n\n首先，有一点得承认，`Emoji` 是日本人原创（日语：絵文字／えもじ emoji），后来被 `Unicode` 收编（这也是为什么会有一些 `Emoji` 明明显示的是中文，被 `Unicode` 解释却是 `Japanese Character XXXX`，比如：🈲、㊙️）。\n\n然后，我们得了解，一个 `Emoji` 是如何在一台设备（主机、网页、手机、平板、便携设备等）上显示出来的。这其中会牵扯到很多因素，包括但不限于：码点（[Code Points](https://en.wikipedia.org/wiki/Code_point)）、字符集（[Character Set](https://en.wikipedia.org/wiki/Character_set)）、字体（[Font](https://www.dictionary.com/browse/font)）、`Unicode` 编码（[Unicode Encoding](https://techterms.com/definition/unicode)）、零宽度连接字符序列（[Emoji ZWJ Sequence](https://emojipedia.org/emoji-zwj-sequence/)，Emoji Zero Width Joiner Sequence） 等。\n\n### 码点\n\n每个字符（`ASCII`、中文、阿拉伯文等）在 `Unicode` 表中都会有一个坑，也就是码点（十六进制）。比如空格排 32，相应的码点是 `U+0020`；`a` 排 97，码点是 `U+0061`。相应的，`Emoji` 被收录到 `Unicode` 之后，也会给每个 `Emoji` 分配一个坑（码点）。\n\n比如，`😀` 的码点就是 `U+1F600`。\n\n### 字符集\n\n细心的同学可能发现了，Windows 系统自带了一个小工具，字符集（Character Map）。\n\n![Character Map](/images/emoji-knowledge-review/character-map.png)\n\n打开这个软件，大家就会发现，其实一个字符集定义了每个坑到底该存什么。\n\n### 字体\n\n字符集再往上就是字体了。一个字体里包含至少一套字符集。还是打开 Characte Map 这个软件，你会发现，同一个字符集中，即使是同一个码点，切换不同字体，它可能长得会不太一样。这就是字体的作用。字体其实定义了每个码点的字符到底该长什么样。计算机只有拿到字体了，它才能正常渲染字符，否则（未安装字体/该字体中未定义该字符对应的码点）该字符就会被异常显示，俗称乱码。\n\n扩展：\n\n1. 前端中有个概念叫 **图标字体**（Icon Font），就是自定义了字符展示方式。\n2. 同一个 `Emoji` 在不同平台（Windows/Android/iOS等）、不同软件（Chrome、输入法、微信等）、不同版本都不一样，很可能是背后所支持的字体不一样。\n\n### Unicode 编码\n\n关于 `Unicode`，网上资料数不胜数，此处就不赘述了。\n\n### 零宽度连接字符序列\n\n`Emoji` 其实就是 `Unicode` 中特定的码点。特别的，有这么一些 `Emoji`，是由一些简单的 `Emoji` 组合而来。比如 👩‍❤️‍👩，其实是由两个 👩 和一个 ❤️ 组合而来：\n\n![couple with heart woman woman emojipedia](/images/emoji-knowledge-review/couple-with-heart-woman-woman-emojipedia.jpg)\n\n而 `Emoji` 组合的时候，就会用到一些特殊的连接字符。如果设备支持的 `Unicode` 不是最新的，那就可能不会正常显示，一个 `Emoji` 会展示成为两个。\n\n### Emoji 搜索\n\n[<i class=\"fa fa-search\" aria-hidden=\"true\"></i> Emoji 搜索工具](/app/#/lab/emoji)\n\n### Emoji 清单\n\n我已整理当前完整的 `Emoji` 清单(v14.0)，请 [点击这里](/images/emoji-knowledge-review/full-emoji-list.json) 查收。\n\n- Smileys & Emotion\n  😀 😃 😄 😁 😆 😅 🤣 😂 🙂 🙃 🫠 😉 😊 😇 🥰 😍 🤩 😘 😗 ☺️ ☺ 😚 😙 🥲 😋 😛 😜 🤪 😝 🤑 🤗 🤭 🫢 🫣 🤫 🤔 🫡 🤐 🤨 😐 😑 😶 🫥 😶‍🌫️ 😶‍🌫 😏 😒 🙄 😬 😮‍💨 🤥 😌 😔 😪 🤤 😴 😷 🤒 🤕 🤢 🤮 🤧 🥵 🥶 🥴 😵 😵‍💫 🤯 🤠 🥳 🥸 😎 🤓 🧐 😕 🫤 😟 🙁 ☹️ ☹ 😮 😯 😲 😳 🥺 🥹 😦 😧 😨 😰 😥 😢 😭 😱 😖 😣 😞 😓 😩 😫 🥱 😤 😡 😠 🤬 😈 👿 💀 ☠️ ☠ 💩 🤡 👹 👺 👻 👽 👾 🤖 😺 😸 😹 😻 😼 😽 🙀 😿 😾 🙈 🙉 🙊 💋 💌 💘 💝 💖 💗 💓 💞 💕 💟 ❣️ ❣ 💔 ❤️‍🔥 ❤‍🔥 ❤️‍🩹 ❤‍🩹 ❤️ ❤ 🧡 💛 💚 💙 💜 🤎 🖤 🤍 💯 💢 💥 💫 💦 💨 🕳️ 🕳 💣 💬 👁️‍🗨️ 👁‍🗨️ 👁️‍🗨 👁‍🗨 🗨️ 🗨 🗯️ 🗯 💭 💤\n- People & Body\n  👋 👋🏻 👋🏼 👋🏽 👋🏾 👋🏿 🤚 🤚🏻 🤚🏼 🤚🏽 🤚🏾 🤚🏿 🖐️ 🖐 🖐🏻 🖐🏼 🖐🏽 🖐🏾 🖐🏿 ✋ ✋🏻 ✋🏼 ✋🏽 ✋🏾 ✋🏿 🖖 🖖🏻 🖖🏼 🖖🏽 🖖🏾 🖖🏿 🫱 🫱🏻 🫱🏼 🫱🏽 🫱🏾 🫱🏿 🫲 🫲🏻 🫲🏼 🫲🏽 🫲🏾 🫲🏿 🫳 🫳🏻 🫳🏼 🫳🏽 🫳🏾 🫳🏿 🫴 🫴🏻 🫴🏼 🫴🏽 🫴🏾 🫴🏿 👌 👌🏻 👌🏼 👌🏽 👌🏾 👌🏿 🤌 🤌🏻 🤌🏼 🤌🏽 🤌🏾 🤌🏿 🤏 🤏🏻 🤏🏼 🤏🏽 🤏🏾 🤏🏿 ✌️ ✌ ✌🏻 ✌🏼 ✌🏽 ✌🏾 ✌🏿 🤞 🤞🏻 🤞🏼 🤞🏽 🤞🏾 🤞🏿 🫰 🫰🏻 🫰🏼 🫰🏽 🫰🏾 🫰🏿 🤟 🤟🏻 🤟🏼 🤟🏽 🤟🏾 🤟🏿 🤘 🤘🏻 🤘🏼 🤘🏽 🤘🏾 🤘🏿 🤙 🤙🏻 🤙🏼 🤙🏽 🤙🏾 🤙🏿 👈 👈🏻 👈🏼 👈🏽 👈🏾 👈🏿 👉 👉🏻 👉🏼 👉🏽 👉🏾 👉🏿 👆 👆🏻 👆🏼 👆🏽 👆🏾 👆🏿 🖕 🖕🏻 🖕🏼 🖕🏽 🖕🏾 🖕🏿 👇 👇🏻 👇🏼 👇🏽 👇🏾 👇🏿 ☝️ ☝ ☝🏻 ☝🏼 ☝🏽 ☝🏾 ☝🏿 🫵 🫵🏻 🫵🏼 🫵🏽 🫵🏾 🫵🏿 👍 👍🏻 👍🏼 👍🏽 👍🏾 👍🏿 👎 👎🏻 👎🏼 👎🏽 👎🏾 👎🏿 ✊ ✊🏻 ✊🏼 ✊🏽 ✊🏾 ✊🏿 👊 👊🏻 👊🏼 👊🏽 👊🏾 👊🏿 🤛 🤛🏻 🤛🏼 🤛🏽 🤛🏾 🤛🏿 🤜 🤜🏻 🤜🏼 🤜🏽 🤜🏾 🤜🏿 👏 👏🏻 👏🏼 👏🏽 👏🏾 👏🏿 🙌 🙌🏻 🙌🏼 🙌🏽 🙌🏾 🙌🏿 🫶 🫶🏻 🫶🏼 🫶🏽 🫶🏾 🫶🏿 👐 👐🏻 👐🏼 👐🏽 👐🏾 👐🏿 🤲 🤲🏻 🤲🏼 🤲🏽 🤲🏾 🤲🏿 🤝 🤝🏻 🤝🏼 🤝🏽 🤝🏾 🤝🏿 🫱🏻‍🫲🏼 🫱🏻‍🫲🏽 🫱🏻‍🫲🏾 🫱🏻‍🫲🏿 🫱🏼‍🫲🏻 🫱🏼‍🫲🏽 🫱🏼‍🫲🏾 🫱🏼‍🫲🏿 🫱🏽‍🫲🏻 🫱🏽‍🫲🏼 🫱🏽‍🫲🏾 🫱🏽‍🫲🏿 🫱🏾‍🫲🏻 🫱🏾‍🫲🏼 🫱🏾‍🫲🏽 🫱🏾‍🫲🏿 🫱🏿‍🫲🏻 🫱🏿‍🫲🏼 🫱🏿‍🫲🏽 🫱🏿‍🫲🏾 🙏 🙏🏻 🙏🏼 🙏🏽 🙏🏾 🙏🏿 ✍️ ✍ ✍🏻 ✍🏼 ✍🏽 ✍🏾 ✍🏿 💅 💅🏻 💅🏼 💅🏽 💅🏾 💅🏿 🤳 🤳🏻 🤳🏼 🤳🏽 🤳🏾 🤳🏿 💪 💪🏻 💪🏼 💪🏽 💪🏾 💪🏿 🦾 🦿 🦵 🦵🏻 🦵🏼 🦵🏽 🦵🏾 🦵🏿 🦶 🦶🏻 🦶🏼 🦶🏽 🦶🏾 🦶🏿 👂 👂🏻 👂🏼 👂🏽 👂🏾 👂🏿 🦻 🦻🏻 🦻🏼 🦻🏽 🦻🏾 🦻🏿 👃 👃🏻 👃🏼 👃🏽 👃🏾 👃🏿 🧠 🫀 🫁 🦷 🦴 👀 👁️ 👁 👅 👄 🫦 👶 👶🏻 👶🏼 👶🏽 👶🏾 👶🏿 🧒 🧒🏻 🧒🏼 🧒🏽 🧒🏾 🧒🏿 👦 👦🏻 👦🏼 👦🏽 👦🏾 👦🏿 👧 👧🏻 👧🏼 👧🏽 👧🏾 👧🏿 🧑 🧑🏻 🧑🏼 🧑🏽 🧑🏾 🧑🏿 👱 👱🏻 👱🏼 👱🏽 👱🏾 👱🏿 👨 👨🏻 👨🏼 👨🏽 👨🏾 👨🏿 🧔 🧔🏻 🧔🏼 🧔🏽 🧔🏾 🧔🏿 🧔‍♂️ 🧔‍♂ 🧔🏻‍♂️ 🧔🏻‍♂ 🧔🏼‍♂️ 🧔🏼‍♂ 🧔🏽‍♂️ 🧔🏽‍♂ 🧔🏾‍♂️ 🧔🏾‍♂ 🧔🏿‍♂️ 🧔🏿‍♂ 🧔‍♀️ 🧔‍♀ 🧔🏻‍♀️ 🧔🏻‍♀ 🧔🏼‍♀️ 🧔🏼‍♀ 🧔🏽‍♀️ 🧔🏽‍♀ 🧔🏾‍♀️ 🧔🏾‍♀ 🧔🏿‍♀️ 🧔🏿‍♀ 👨‍🦰 👨🏻‍🦰 👨🏼‍🦰 👨🏽‍🦰 👨🏾‍🦰 👨🏿‍🦰 👨‍🦱 👨🏻‍🦱 👨🏼‍🦱 👨🏽‍🦱 👨🏾‍🦱 👨🏿‍🦱 👨‍🦳 👨🏻‍🦳 👨🏼‍🦳 👨🏽‍🦳 👨🏾‍🦳 👨🏿‍🦳 👨‍🦲 👨🏻‍🦲 👨🏼‍🦲 👨🏽‍🦲 👨🏾‍🦲 👨🏿‍🦲 👩 👩🏻 👩🏼 👩🏽 👩🏾 👩🏿 👩‍🦰 👩🏻‍🦰 👩🏼‍🦰 👩🏽‍🦰 👩🏾‍🦰 👩🏿‍🦰 🧑‍🦰 🧑🏻‍🦰 🧑🏼‍🦰 🧑🏽‍🦰 🧑🏾‍🦰 🧑🏿‍🦰 👩‍🦱 👩🏻‍🦱 👩🏼‍🦱 👩🏽‍🦱 👩🏾‍🦱 👩🏿‍🦱 🧑‍🦱 🧑🏻‍🦱 🧑🏼‍🦱 🧑🏽‍🦱 🧑🏾‍🦱 🧑🏿‍🦱 👩‍🦳 👩🏻‍🦳 👩🏼‍🦳 👩🏽‍🦳 👩🏾‍🦳 👩🏿‍🦳 🧑‍🦳 🧑🏻‍🦳 🧑🏼‍🦳 🧑🏽‍🦳 🧑🏾‍🦳 🧑🏿‍🦳 👩‍🦲 👩🏻‍🦲 👩🏼‍🦲 👩🏽‍🦲 👩🏾‍🦲 👩🏿‍🦲 🧑‍🦲 🧑🏻‍🦲 🧑🏼‍🦲 🧑🏽‍🦲 🧑🏾‍🦲 🧑🏿‍🦲 👱‍♀️ 👱‍♀ 👱🏻‍♀️ 👱🏻‍♀ 👱🏼‍♀️ 👱🏼‍♀ 👱🏽‍♀️ 👱🏽‍♀ 👱🏾‍♀️ 👱🏾‍♀ 👱🏿‍♀️ 👱🏿‍♀ 👱‍♂️ 👱‍♂ 👱🏻‍♂️ 👱🏻‍♂ 👱🏼‍♂️ 👱🏼‍♂ 👱🏽‍♂️ 👱🏽‍♂ 👱🏾‍♂️ 👱🏾‍♂ 👱🏿‍♂️ 👱🏿‍♂ 🧓 🧓🏻 🧓🏼 🧓🏽 🧓🏾 🧓🏿 👴 👴🏻 👴🏼 👴🏽 👴🏾 👴🏿 👵 👵🏻 👵🏼 👵🏽 👵🏾 👵🏿 🙍 🙍🏻 🙍🏼 🙍🏽 🙍🏾 🙍🏿 🙍‍♂️ 🙍‍♂ 🙍🏻‍♂️ 🙍🏻‍♂ 🙍🏼‍♂️ 🙍🏼‍♂ 🙍🏽‍♂️ 🙍🏽‍♂ 🙍🏾‍♂️ 🙍🏾‍♂ 🙍🏿‍♂️ 🙍🏿‍♂ 🙍‍♀️ 🙍‍♀ 🙍🏻‍♀️ 🙍🏻‍♀ 🙍🏼‍♀️ 🙍🏼‍♀ 🙍🏽‍♀️ 🙍🏽‍♀ 🙍🏾‍♀️ 🙍🏾‍♀ 🙍🏿‍♀️ 🙍🏿‍♀ 🙎 🙎🏻 🙎🏼 🙎🏽 🙎🏾 🙎🏿 🙎‍♂️ 🙎‍♂ 🙎🏻‍♂️ 🙎🏻‍♂ 🙎🏼‍♂️ 🙎🏼‍♂ 🙎🏽‍♂️ 🙎🏽‍♂ 🙎🏾‍♂️ 🙎🏾‍♂ 🙎🏿‍♂️ 🙎🏿‍♂ 🙎‍♀️ 🙎‍♀ 🙎🏻‍♀️ 🙎🏻‍♀ 🙎🏼‍♀️ 🙎🏼‍♀ 🙎🏽‍♀️ 🙎🏽‍♀ 🙎🏾‍♀️ 🙎🏾‍♀ 🙎🏿‍♀️ 🙎🏿‍♀ 🙅 🙅🏻 🙅🏼 🙅🏽 🙅🏾 🙅🏿 🙅‍♂️ 🙅‍♂ 🙅🏻‍♂️ 🙅🏻‍♂ 🙅🏼‍♂️ 🙅🏼‍♂ 🙅🏽‍♂️ 🙅🏽‍♂ 🙅🏾‍♂️ 🙅🏾‍♂ 🙅🏿‍♂️ 🙅🏿‍♂ 🙅‍♀️ 🙅‍♀ 🙅🏻‍♀️ 🙅🏻‍♀ 🙅🏼‍♀️ 🙅🏼‍♀ 🙅🏽‍♀️ 🙅🏽‍♀ 🙅🏾‍♀️ 🙅🏾‍♀ 🙅🏿‍♀️ 🙅🏿‍♀ 🙆 🙆🏻 🙆🏼 🙆🏽 🙆🏾 🙆🏿 🙆‍♂️ 🙆‍♂ 🙆🏻‍♂️ 🙆🏻‍♂ 🙆🏼‍♂️ 🙆🏼‍♂ 🙆🏽‍♂️ 🙆🏽‍♂ 🙆🏾‍♂️ 🙆🏾‍♂ 🙆🏿‍♂️ 🙆🏿‍♂ 🙆‍♀️ 🙆‍♀ 🙆🏻‍♀️ 🙆🏻‍♀ 🙆🏼‍♀️ 🙆🏼‍♀ 🙆🏽‍♀️ 🙆🏽‍♀ 🙆🏾‍♀️ 🙆🏾‍♀ 🙆🏿‍♀️ 🙆🏿‍♀ 💁 💁🏻 💁🏼 💁🏽 💁🏾 💁🏿 💁‍♂️ 💁‍♂ 💁🏻‍♂️ 💁🏻‍♂ 💁🏼‍♂️ 💁🏼‍♂ 💁🏽‍♂️ 💁🏽‍♂ 💁🏾‍♂️ 💁🏾‍♂ 💁🏿‍♂️ 💁🏿‍♂ 💁‍♀️ 💁‍♀ 💁🏻‍♀️ 💁🏻‍♀ 💁🏼‍♀️ 💁🏼‍♀ 💁🏽‍♀️ 💁🏽‍♀ 💁🏾‍♀️ 💁🏾‍♀ 💁🏿‍♀️ 💁🏿‍♀ 🙋 🙋🏻 🙋🏼 🙋🏽 🙋🏾 🙋🏿 🙋‍♂️ 🙋‍♂ 🙋🏻‍♂️ 🙋🏻‍♂ 🙋🏼‍♂️ 🙋🏼‍♂ 🙋🏽‍♂️ 🙋🏽‍♂ 🙋🏾‍♂️ 🙋🏾‍♂ 🙋🏿‍♂️ 🙋🏿‍♂ 🙋‍♀️ 🙋‍♀ 🙋🏻‍♀️ 🙋🏻‍♀ 🙋🏼‍♀️ 🙋🏼‍♀ 🙋🏽‍♀️ 🙋🏽‍♀ 🙋🏾‍♀️ 🙋🏾‍♀ 🙋🏿‍♀️ 🙋🏿‍♀ 🧏 🧏🏻 🧏🏼 🧏🏽 🧏🏾 🧏🏿 🧏‍♂️ 🧏‍♂ 🧏🏻‍♂️ 🧏🏻‍♂ 🧏🏼‍♂️ 🧏🏼‍♂ 🧏🏽‍♂️ 🧏🏽‍♂ 🧏🏾‍♂️ 🧏🏾‍♂ 🧏🏿‍♂️ 🧏🏿‍♂ 🧏‍♀️ 🧏‍♀ 🧏🏻‍♀️ 🧏🏻‍♀ 🧏🏼‍♀️ 🧏🏼‍♀ 🧏🏽‍♀️ 🧏🏽‍♀ 🧏🏾‍♀️ 🧏🏾‍♀ 🧏🏿‍♀️ 🧏🏿‍♀ 🙇 🙇🏻 🙇🏼 🙇🏽 🙇🏾 🙇🏿 🙇‍♂️ 🙇‍♂ 🙇🏻‍♂️ 🙇🏻‍♂ 🙇🏼‍♂️ 🙇🏼‍♂ 🙇🏽‍♂️ 🙇🏽‍♂ 🙇🏾‍♂️ 🙇🏾‍♂ 🙇🏿‍♂️ 🙇🏿‍♂ 🙇‍♀️ 🙇‍♀ 🙇🏻‍♀️ 🙇🏻‍♀ 🙇🏼‍♀️ 🙇🏼‍♀ 🙇🏽‍♀️ 🙇🏽‍♀ 🙇🏾‍♀️ 🙇🏾‍♀ 🙇🏿‍♀️ 🙇🏿‍♀ 🤦 🤦🏻 🤦🏼 🤦🏽 🤦🏾 🤦🏿 🤦‍♂️ 🤦‍♂ 🤦🏻‍♂️ 🤦🏻‍♂ 🤦🏼‍♂️ 🤦🏼‍♂ 🤦🏽‍♂️ 🤦🏽‍♂ 🤦🏾‍♂️ 🤦🏾‍♂ 🤦🏿‍♂️ 🤦🏿‍♂ 🤦‍♀️ 🤦‍♀ 🤦🏻‍♀️ 🤦🏻‍♀ 🤦🏼‍♀️ 🤦🏼‍♀ 🤦🏽‍♀️ 🤦🏽‍♀ 🤦🏾‍♀️ 🤦🏾‍♀ 🤦🏿‍♀️ 🤦🏿‍♀ 🤷 🤷🏻 🤷🏼 🤷🏽 🤷🏾 🤷🏿 🤷‍♂️ 🤷‍♂ 🤷🏻‍♂️ 🤷🏻‍♂ 🤷🏼‍♂️ 🤷🏼‍♂ 🤷🏽‍♂️ 🤷🏽‍♂ 🤷🏾‍♂️ 🤷🏾‍♂ 🤷🏿‍♂️ 🤷🏿‍♂ 🤷‍♀️ 🤷‍♀ 🤷🏻‍♀️ 🤷🏻‍♀ 🤷🏼‍♀️ 🤷🏼‍♀ 🤷🏽‍♀️ 🤷🏽‍♀ 🤷🏾‍♀️ 🤷🏾‍♀ 🤷🏿‍♀️ 🤷🏿‍♀ 🧑‍⚕️ 🧑‍⚕ 🧑🏻‍⚕️ 🧑🏻‍⚕ 🧑🏼‍⚕️ 🧑🏼‍⚕ 🧑🏽‍⚕️ 🧑🏽‍⚕ 🧑🏾‍⚕️ 🧑🏾‍⚕ 🧑🏿‍⚕️ 🧑🏿‍⚕ 👨‍⚕️ 👨‍⚕ 👨🏻‍⚕️ 👨🏻‍⚕ 👨🏼‍⚕️ 👨🏼‍⚕ 👨🏽‍⚕️ 👨🏽‍⚕ 👨🏾‍⚕️ 👨🏾‍⚕ 👨🏿‍⚕️ 👨🏿‍⚕ 👩‍⚕️ 👩‍⚕ 👩🏻‍⚕️ 👩🏻‍⚕ 👩🏼‍⚕️ 👩🏼‍⚕ 👩🏽‍⚕️ 👩🏽‍⚕ 👩🏾‍⚕️ 👩🏾‍⚕ 👩🏿‍⚕️ 👩🏿‍⚕ 🧑‍🎓 🧑🏻‍🎓 🧑🏼‍🎓 🧑🏽‍🎓 🧑🏾‍🎓 🧑🏿‍🎓 👨‍🎓 👨🏻‍🎓 👨🏼‍🎓 👨🏽‍🎓 👨🏾‍🎓 👨🏿‍🎓 👩‍🎓 👩🏻‍🎓 👩🏼‍🎓 👩🏽‍🎓 👩🏾‍🎓 👩🏿‍🎓 🧑‍🏫 🧑🏻‍🏫 🧑🏼‍🏫 🧑🏽‍🏫 🧑🏾‍🏫 🧑🏿‍🏫 👨‍🏫 👨🏻‍🏫 👨🏼‍🏫 👨🏽‍🏫 👨🏾‍🏫 👨🏿‍🏫 👩‍🏫 👩🏻‍🏫 👩🏼‍🏫 👩🏽‍🏫 👩🏾‍🏫 👩🏿‍🏫 🧑‍⚖️ 🧑‍⚖ 🧑🏻‍⚖️ 🧑🏻‍⚖ 🧑🏼‍⚖️ 🧑🏼‍⚖ 🧑🏽‍⚖️ 🧑🏽‍⚖ 🧑🏾‍⚖️ 🧑🏾‍⚖ 🧑🏿‍⚖️ 🧑🏿‍⚖ 👨‍⚖️ 👨‍⚖ 👨🏻‍⚖️ 👨🏻‍⚖ 👨🏼‍⚖️ 👨🏼‍⚖ 👨🏽‍⚖️ 👨🏽‍⚖ 👨🏾‍⚖️ 👨🏾‍⚖ 👨🏿‍⚖️ 👨🏿‍⚖ 👩‍⚖️ 👩‍⚖ 👩🏻‍⚖️ 👩🏻‍⚖ 👩🏼‍⚖️ 👩🏼‍⚖ 👩🏽‍⚖️ 👩🏽‍⚖ 👩🏾‍⚖️ 👩🏾‍⚖ 👩🏿‍⚖️ 👩🏿‍⚖ 🧑‍🌾 🧑🏻‍🌾 🧑🏼‍🌾 🧑🏽‍🌾 🧑🏾‍🌾 🧑🏿‍🌾 👨‍🌾 👨🏻‍🌾 👨🏼‍🌾 👨🏽‍🌾 👨🏾‍🌾 👨🏿‍🌾 👩‍🌾 👩🏻‍🌾 👩🏼‍🌾 👩🏽‍🌾 👩🏾‍🌾 👩🏿‍🌾 🧑‍🍳 🧑🏻‍🍳 🧑🏼‍🍳 🧑🏽‍🍳 🧑🏾‍🍳 🧑🏿‍🍳 👨‍🍳 👨🏻‍🍳 👨🏼‍🍳 👨🏽‍🍳 👨🏾‍🍳 👨🏿‍🍳 👩‍🍳 👩🏻‍🍳 👩🏼‍🍳 👩🏽‍🍳 👩🏾‍🍳 👩🏿‍🍳 🧑‍🔧 🧑🏻‍🔧 🧑🏼‍🔧 🧑🏽‍🔧 🧑🏾‍🔧 🧑🏿‍🔧 👨‍🔧 👨🏻‍🔧 👨🏼‍🔧 👨🏽‍🔧 👨🏾‍🔧 👨🏿‍🔧 👩‍🔧 👩🏻‍🔧 👩🏼‍🔧 👩🏽‍🔧 👩🏾‍🔧 👩🏿‍🔧 🧑‍🏭 🧑🏻‍🏭 🧑🏼‍🏭 🧑🏽‍🏭 🧑🏾‍🏭 🧑🏿‍🏭 👨‍🏭 👨🏻‍🏭 👨🏼‍🏭 👨🏽‍🏭 👨🏾‍🏭 👨🏿‍🏭 👩‍🏭 👩🏻‍🏭 👩🏼‍🏭 👩🏽‍🏭 👩🏾‍🏭 👩🏿‍🏭 🧑‍💼 🧑🏻‍💼 🧑🏼‍💼 🧑🏽‍💼 🧑🏾‍💼 🧑🏿‍💼 👨‍💼 👨🏻‍💼 👨🏼‍💼 👨🏽‍💼 👨🏾‍💼 👨🏿‍💼 👩‍💼 👩🏻‍💼 👩🏼‍💼 👩🏽‍💼 👩🏾‍💼 👩🏿‍💼 🧑‍🔬 🧑🏻‍🔬 🧑🏼‍🔬 🧑🏽‍🔬 🧑🏾‍🔬 🧑🏿‍🔬 👨‍🔬 👨🏻‍🔬 👨🏼‍🔬 👨🏽‍🔬 👨🏾‍🔬 👨🏿‍🔬 👩‍🔬 👩🏻‍🔬 👩🏼‍🔬 👩🏽‍🔬 👩🏾‍🔬 👩🏿‍🔬 🧑‍💻 🧑🏻‍💻 🧑🏼‍💻 🧑🏽‍💻 🧑🏾‍💻 🧑🏿‍💻 👨‍💻 👨🏻‍💻 👨🏼‍💻 👨🏽‍💻 👨🏾‍💻 👨🏿‍💻 👩‍💻 👩🏻‍💻 👩🏼‍💻 👩🏽‍💻 👩🏾‍💻 👩🏿‍💻 🧑‍🎤 🧑🏻‍🎤 🧑🏼‍🎤 🧑🏽‍🎤 🧑🏾‍🎤 🧑🏿‍🎤 👨‍🎤 👨🏻‍🎤 👨🏼‍🎤 👨🏽‍🎤 👨🏾‍🎤 👨🏿‍🎤 👩‍🎤 👩🏻‍🎤 👩🏼‍🎤 👩🏽‍🎤 👩🏾‍🎤 👩🏿‍🎤 🧑‍🎨 🧑🏻‍🎨 🧑🏼‍🎨 🧑🏽‍🎨 🧑🏾‍🎨 🧑🏿‍🎨 👨‍🎨 👨🏻‍🎨 👨🏼‍🎨 👨🏽‍🎨 👨🏾‍🎨 👨🏿‍🎨 👩‍🎨 👩🏻‍🎨 👩🏼‍🎨 👩🏽‍🎨 👩🏾‍🎨 👩🏿‍🎨 🧑‍✈️ 🧑‍✈ 🧑🏻‍✈️ 🧑🏻‍✈ 🧑🏼‍✈️ 🧑🏼‍✈ 🧑🏽‍✈️ 🧑🏽‍✈ 🧑🏾‍✈️ 🧑🏾‍✈ 🧑🏿‍✈️ 🧑🏿‍✈ 👨‍✈️ 👨‍✈ 👨🏻‍✈️ 👨🏻‍✈ 👨🏼‍✈️ 👨🏼‍✈ 👨🏽‍✈️ 👨🏽‍✈ 👨🏾‍✈️ 👨🏾‍✈ 👨🏿‍✈️ 👨🏿‍✈ 👩‍✈️ 👩‍✈ 👩🏻‍✈️ 👩🏻‍✈ 👩🏼‍✈️ 👩🏼‍✈ 👩🏽‍✈️ 👩🏽‍✈ 👩🏾‍✈️ 👩🏾‍✈ 👩🏿‍✈️ 👩🏿‍✈ 🧑‍🚀 🧑🏻‍🚀 🧑🏼‍🚀 🧑🏽‍🚀 🧑🏾‍🚀 🧑🏿‍🚀 👨‍🚀 👨🏻‍🚀 👨🏼‍🚀 👨🏽‍🚀 👨🏾‍🚀 👨🏿‍🚀 👩‍🚀 👩🏻‍🚀 👩🏼‍🚀 👩🏽‍🚀 👩🏾‍🚀 👩🏿‍🚀 🧑‍🚒 🧑🏻‍🚒 🧑🏼‍🚒 🧑🏽‍🚒 🧑🏾‍🚒 🧑🏿‍🚒 👨‍🚒 👨🏻‍🚒 👨🏼‍🚒 👨🏽‍🚒 👨🏾‍🚒 👨🏿‍🚒 👩‍🚒 👩🏻‍🚒 👩🏼‍🚒 👩🏽‍🚒 👩🏾‍🚒 👩🏿‍🚒 👮 👮🏻 👮🏼 👮🏽 👮🏾 👮🏿 👮‍♂️ 👮‍♂ 👮🏻‍♂️ 👮🏻‍♂ 👮🏼‍♂️ 👮🏼‍♂ 👮🏽‍♂️ 👮🏽‍♂ 👮🏾‍♂️ 👮🏾‍♂ 👮🏿‍♂️ 👮🏿‍♂ 👮‍♀️ 👮‍♀ 👮🏻‍♀️ 👮🏻‍♀ 👮🏼‍♀️ 👮🏼‍♀ 👮🏽‍♀️ 👮🏽‍♀ 👮🏾‍♀️ 👮🏾‍♀ 👮🏿‍♀️ 👮🏿‍♀ 🕵️ 🕵 🕵🏻 🕵🏼 🕵🏽 🕵🏾 🕵🏿 🕵️‍♂️ 🕵‍♂️ 🕵️‍♂ 🕵‍♂ 🕵🏻‍♂️ 🕵🏻‍♂ 🕵🏼‍♂️ 🕵🏼‍♂ 🕵🏽‍♂️ 🕵🏽‍♂ 🕵🏾‍♂️ 🕵🏾‍♂ 🕵🏿‍♂️ 🕵🏿‍♂ 🕵️‍♀️ 🕵‍♀️ 🕵️‍♀ 🕵‍♀ 🕵🏻‍♀️ 🕵🏻‍♀ 🕵🏼‍♀️ 🕵🏼‍♀ 🕵🏽‍♀️ 🕵🏽‍♀ 🕵🏾‍♀️ 🕵🏾‍♀ 🕵🏿‍♀️ 🕵🏿‍♀ 💂 💂🏻 💂🏼 💂🏽 💂🏾 💂🏿 💂‍♂️ 💂‍♂ 💂🏻‍♂️ 💂🏻‍♂ 💂🏼‍♂️ 💂🏼‍♂ 💂🏽‍♂️ 💂🏽‍♂ 💂🏾‍♂️ 💂🏾‍♂ 💂🏿‍♂️ 💂🏿‍♂ 💂‍♀️ 💂‍♀ 💂🏻‍♀️ 💂🏻‍♀ 💂🏼‍♀️ 💂🏼‍♀ 💂🏽‍♀️ 💂🏽‍♀ 💂🏾‍♀️ 💂🏾‍♀ 💂🏿‍♀️ 💂🏿‍♀ 🥷 🥷🏻 🥷🏼 🥷🏽 🥷🏾 🥷🏿 👷 👷🏻 👷🏼 👷🏽 👷🏾 👷🏿 👷‍♂️ 👷‍♂ 👷🏻‍♂️ 👷🏻‍♂ 👷🏼‍♂️ 👷🏼‍♂ 👷🏽‍♂️ 👷🏽‍♂ 👷🏾‍♂️ 👷🏾‍♂ 👷🏿‍♂️ 👷🏿‍♂ 👷‍♀️ 👷‍♀ 👷🏻‍♀️ 👷🏻‍♀ 👷🏼‍♀️ 👷🏼‍♀ 👷🏽‍♀️ 👷🏽‍♀ 👷🏾‍♀️ 👷🏾‍♀ 👷🏿‍♀️ 👷🏿‍♀ 🫅 🫅🏻 🫅🏼 🫅🏽 🫅🏾 🫅🏿 🤴 🤴🏻 🤴🏼 🤴🏽 🤴🏾 🤴🏿 👸 👸🏻 👸🏼 👸🏽 👸🏾 👸🏿 👳 👳🏻 👳🏼 👳🏽 👳🏾 👳🏿 👳‍♂️ 👳‍♂ 👳🏻‍♂️ 👳🏻‍♂ 👳🏼‍♂️ 👳🏼‍♂ 👳🏽‍♂️ 👳🏽‍♂ 👳🏾‍♂️ 👳🏾‍♂ 👳🏿‍♂️ 👳🏿‍♂ 👳‍♀️ 👳‍♀ 👳🏻‍♀️ 👳🏻‍♀ 👳🏼‍♀️ 👳🏼‍♀ 👳🏽‍♀️ 👳🏽‍♀ 👳🏾‍♀️ 👳🏾‍♀ 👳🏿‍♀️ 👳🏿‍♀ 👲 👲🏻 👲🏼 👲🏽 👲🏾 👲🏿 🧕 🧕🏻 🧕🏼 🧕🏽 🧕🏾 🧕🏿 🤵 🤵🏻 🤵🏼 🤵🏽 🤵🏾 🤵🏿 🤵‍♂️ 🤵‍♂ 🤵🏻‍♂️ 🤵🏻‍♂ 🤵🏼‍♂️ 🤵🏼‍♂ 🤵🏽‍♂️ 🤵🏽‍♂ 🤵🏾‍♂️ 🤵🏾‍♂ 🤵🏿‍♂️ 🤵🏿‍♂ 🤵‍♀️ 🤵‍♀ 🤵🏻‍♀️ 🤵🏻‍♀ 🤵🏼‍♀️ 🤵🏼‍♀ 🤵🏽‍♀️ 🤵🏽‍♀ 🤵🏾‍♀️ 🤵🏾‍♀ 🤵🏿‍♀️ 🤵🏿‍♀ 👰 👰🏻 👰🏼 👰🏽 👰🏾 👰🏿 👰‍♂️ 👰‍♂ 👰🏻‍♂️ 👰🏻‍♂ 👰🏼‍♂️ 👰🏼‍♂ 👰🏽‍♂️ 👰🏽‍♂ 👰🏾‍♂️ 👰🏾‍♂ 👰🏿‍♂️ 👰🏿‍♂ 👰‍♀️ 👰‍♀ 👰🏻‍♀️ 👰🏻‍♀ 👰🏼‍♀️ 👰🏼‍♀ 👰🏽‍♀️ 👰🏽‍♀ 👰🏾‍♀️ 👰🏾‍♀ 👰🏿‍♀️ 👰🏿‍♀ 🤰 🤰🏻 🤰🏼 🤰🏽 🤰🏾 🤰🏿 🫃 🫃🏻 🫃🏼 🫃🏽 🫃🏾 🫃🏿 🫄 🫄🏻 🫄🏼 🫄🏽 🫄🏾 🫄🏿 🤱 🤱🏻 🤱🏼 🤱🏽 🤱🏾 🤱🏿 👩‍🍼 👩🏻‍🍼 👩🏼‍🍼 👩🏽‍🍼 👩🏾‍🍼 👩🏿‍🍼 👨‍🍼 👨🏻‍🍼 👨🏼‍🍼 👨🏽‍🍼 👨🏾‍🍼 👨🏿‍🍼 🧑‍🍼 🧑🏻‍🍼 🧑🏼‍🍼 🧑🏽‍🍼 🧑🏾‍🍼 🧑🏿‍🍼 👼 👼🏻 👼🏼 👼🏽 👼🏾 👼🏿 🎅 🎅🏻 🎅🏼 🎅🏽 🎅🏾 🎅🏿 🤶 🤶🏻 🤶🏼 🤶🏽 🤶🏾 🤶🏿 🧑‍🎄 🧑🏻‍🎄 🧑🏼‍🎄 🧑🏽‍🎄 🧑🏾‍🎄 🧑🏿‍🎄 🦸 🦸🏻 🦸🏼 🦸🏽 🦸🏾 🦸🏿 🦸‍♂️ 🦸‍♂ 🦸🏻‍♂️ 🦸🏻‍♂ 🦸🏼‍♂️ 🦸🏼‍♂ 🦸🏽‍♂️ 🦸🏽‍♂ 🦸🏾‍♂️ 🦸🏾‍♂ 🦸🏿‍♂️ 🦸🏿‍♂ 🦸‍♀️ 🦸‍♀ 🦸🏻‍♀️ 🦸🏻‍♀ 🦸🏼‍♀️ 🦸🏼‍♀ 🦸🏽‍♀️ 🦸🏽‍♀ 🦸🏾‍♀️ 🦸🏾‍♀ 🦸🏿‍♀️ 🦸🏿‍♀ 🦹 🦹🏻 🦹🏼 🦹🏽 🦹🏾 🦹🏿 🦹‍♂️ 🦹‍♂ 🦹🏻‍♂️ 🦹🏻‍♂ 🦹🏼‍♂️ 🦹🏼‍♂ 🦹🏽‍♂️ 🦹🏽‍♂ 🦹🏾‍♂️ 🦹🏾‍♂ 🦹🏿‍♂️ 🦹🏿‍♂ 🦹‍♀️ 🦹‍♀ 🦹🏻‍♀️ 🦹🏻‍♀ 🦹🏼‍♀️ 🦹🏼‍♀ 🦹🏽‍♀️ 🦹🏽‍♀ 🦹🏾‍♀️ 🦹🏾‍♀ 🦹🏿‍♀️ 🦹🏿‍♀ 🧙 🧙🏻 🧙🏼 🧙🏽 🧙🏾 🧙🏿 🧙‍♂️ 🧙‍♂ 🧙🏻‍♂️ 🧙🏻‍♂ 🧙🏼‍♂️ 🧙🏼‍♂ 🧙🏽‍♂️ 🧙🏽‍♂ 🧙🏾‍♂️ 🧙🏾‍♂ 🧙🏿‍♂️ 🧙🏿‍♂ 🧙‍♀️ 🧙‍♀ 🧙🏻‍♀️ 🧙🏻‍♀ 🧙🏼‍♀️ 🧙🏼‍♀ 🧙🏽‍♀️ 🧙🏽‍♀ 🧙🏾‍♀️ 🧙🏾‍♀ 🧙🏿‍♀️ 🧙🏿‍♀ 🧚 🧚🏻 🧚🏼 🧚🏽 🧚🏾 🧚🏿 🧚‍♂️ 🧚‍♂ 🧚🏻‍♂️ 🧚🏻‍♂ 🧚🏼‍♂️ 🧚🏼‍♂ 🧚🏽‍♂️ 🧚🏽‍♂ 🧚🏾‍♂️ 🧚🏾‍♂ 🧚🏿‍♂️ 🧚🏿‍♂ 🧚‍♀️ 🧚‍♀ 🧚🏻‍♀️ 🧚🏻‍♀ 🧚🏼‍♀️ 🧚🏼‍♀ 🧚🏽‍♀️ 🧚🏽‍♀ 🧚🏾‍♀️ 🧚🏾‍♀ 🧚🏿‍♀️ 🧚🏿‍♀ 🧛 🧛🏻 🧛🏼 🧛🏽 🧛🏾 🧛🏿 🧛‍♂️ 🧛‍♂ 🧛🏻‍♂️ 🧛🏻‍♂ 🧛🏼‍♂️ 🧛🏼‍♂ 🧛🏽‍♂️ 🧛🏽‍♂ 🧛🏾‍♂️ 🧛🏾‍♂ 🧛🏿‍♂️ 🧛🏿‍♂ 🧛‍♀️ 🧛‍♀ 🧛🏻‍♀️ 🧛🏻‍♀ 🧛🏼‍♀️ 🧛🏼‍♀ 🧛🏽‍♀️ 🧛🏽‍♀ 🧛🏾‍♀️ 🧛🏾‍♀ 🧛🏿‍♀️ 🧛🏿‍♀ 🧜 🧜🏻 🧜🏼 🧜🏽 🧜🏾 🧜🏿 🧜‍♂️ 🧜‍♂ 🧜🏻‍♂️ 🧜🏻‍♂ 🧜🏼‍♂️ 🧜🏼‍♂ 🧜🏽‍♂️ 🧜🏽‍♂ 🧜🏾‍♂️ 🧜🏾‍♂ 🧜🏿‍♂️ 🧜🏿‍♂ 🧜‍♀️ 🧜‍♀ 🧜🏻‍♀️ 🧜🏻‍♀ 🧜🏼‍♀️ 🧜🏼‍♀ 🧜🏽‍♀️ 🧜🏽‍♀ 🧜🏾‍♀️ 🧜🏾‍♀ 🧜🏿‍♀️ 🧜🏿‍♀ 🧝 🧝🏻 🧝🏼 🧝🏽 🧝🏾 🧝🏿 🧝‍♂️ 🧝‍♂ 🧝🏻‍♂️ 🧝🏻‍♂ 🧝🏼‍♂️ 🧝🏼‍♂ 🧝🏽‍♂️ 🧝🏽‍♂ 🧝🏾‍♂️ 🧝🏾‍♂ 🧝🏿‍♂️ 🧝🏿‍♂ 🧝‍♀️ 🧝‍♀ 🧝🏻‍♀️ 🧝🏻‍♀ 🧝🏼‍♀️ 🧝🏼‍♀ 🧝🏽‍♀️ 🧝🏽‍♀ 🧝🏾‍♀️ 🧝🏾‍♀ 🧝🏿‍♀️ 🧝🏿‍♀ 🧞 🧞‍♂️ 🧞‍♂ 🧞‍♀️ 🧞‍♀ 🧟 🧟‍♂️ 🧟‍♂ 🧟‍♀️ 🧟‍♀ 🧌 💆 💆🏻 💆🏼 💆🏽 💆🏾 💆🏿 💆‍♂️ 💆‍♂ 💆🏻‍♂️ 💆🏻‍♂ 💆🏼‍♂️ 💆🏼‍♂ 💆🏽‍♂️ 💆🏽‍♂ 💆🏾‍♂️ 💆🏾‍♂ 💆🏿‍♂️ 💆🏿‍♂ 💆‍♀️ 💆‍♀ 💆🏻‍♀️ 💆🏻‍♀ 💆🏼‍♀️ 💆🏼‍♀ 💆🏽‍♀️ 💆🏽‍♀ 💆🏾‍♀️ 💆🏾‍♀ 💆🏿‍♀️ 💆🏿‍♀ 💇 💇🏻 💇🏼 💇🏽 💇🏾 💇🏿 💇‍♂️ 💇‍♂ 💇🏻‍♂️ 💇🏻‍♂ 💇🏼‍♂️ 💇🏼‍♂ 💇🏽‍♂️ 💇🏽‍♂ 💇🏾‍♂️ 💇🏾‍♂ 💇🏿‍♂️ 💇🏿‍♂ 💇‍♀️ 💇‍♀ 💇🏻‍♀️ 💇🏻‍♀ 💇🏼‍♀️ 💇🏼‍♀ 💇🏽‍♀️ 💇🏽‍♀ 💇🏾‍♀️ 💇🏾‍♀ 💇🏿‍♀️ 💇🏿‍♀ 🚶 🚶🏻 🚶🏼 🚶🏽 🚶🏾 🚶🏿 🚶‍♂️ 🚶‍♂ 🚶🏻‍♂️ 🚶🏻‍♂ 🚶🏼‍♂️ 🚶🏼‍♂ 🚶🏽‍♂️ 🚶🏽‍♂ 🚶🏾‍♂️ 🚶🏾‍♂ 🚶🏿‍♂️ 🚶🏿‍♂ 🚶‍♀️ 🚶‍♀ 🚶🏻‍♀️ 🚶🏻‍♀ 🚶🏼‍♀️ 🚶🏼‍♀ 🚶🏽‍♀️ 🚶🏽‍♀ 🚶🏾‍♀️ 🚶🏾‍♀ 🚶🏿‍♀️ 🚶🏿‍♀ 🧍 🧍🏻 🧍🏼 🧍🏽 🧍🏾 🧍🏿 🧍‍♂️ 🧍‍♂ 🧍🏻‍♂️ 🧍🏻‍♂ 🧍🏼‍♂️ 🧍🏼‍♂ 🧍🏽‍♂️ 🧍🏽‍♂ 🧍🏾‍♂️ 🧍🏾‍♂ 🧍🏿‍♂️ 🧍🏿‍♂ 🧍‍♀️ 🧍‍♀ 🧍🏻‍♀️ 🧍🏻‍♀ 🧍🏼‍♀️ 🧍🏼‍♀ 🧍🏽‍♀️ 🧍🏽‍♀ 🧍🏾‍♀️ 🧍🏾‍♀ 🧍🏿‍♀️ 🧍🏿‍♀ 🧎 🧎🏻 🧎🏼 🧎🏽 🧎🏾 🧎🏿 🧎‍♂️ 🧎‍♂ 🧎🏻‍♂️ 🧎🏻‍♂ 🧎🏼‍♂️ 🧎🏼‍♂ 🧎🏽‍♂️ 🧎🏽‍♂ 🧎🏾‍♂️ 🧎🏾‍♂ 🧎🏿‍♂️ 🧎🏿‍♂ 🧎‍♀️ 🧎‍♀ 🧎🏻‍♀️ 🧎🏻‍♀ 🧎🏼‍♀️ 🧎🏼‍♀ 🧎🏽‍♀️ 🧎🏽‍♀ 🧎🏾‍♀️ 🧎🏾‍♀ 🧎🏿‍♀️ 🧎🏿‍♀ 🧑‍🦯 🧑🏻‍🦯 🧑🏼‍🦯 🧑🏽‍🦯 🧑🏾‍🦯 🧑🏿‍🦯 👨‍🦯 👨🏻‍🦯 👨🏼‍🦯 👨🏽‍🦯 👨🏾‍🦯 👨🏿‍🦯 👩‍🦯 👩🏻‍🦯 👩🏼‍🦯 👩🏽‍🦯 👩🏾‍🦯 👩🏿‍🦯 🧑‍🦼 🧑🏻‍🦼 🧑🏼‍🦼 🧑🏽‍🦼 🧑🏾‍🦼 🧑🏿‍🦼 👨‍🦼 👨🏻‍🦼 👨🏼‍🦼 👨🏽‍🦼 👨🏾‍🦼 👨🏿‍🦼 👩‍🦼 👩🏻‍🦼 👩🏼‍🦼 👩🏽‍🦼 👩🏾‍🦼 👩🏿‍🦼 🧑‍🦽 🧑🏻‍🦽 🧑🏼‍🦽 🧑🏽‍🦽 🧑🏾‍🦽 🧑🏿‍🦽 👨‍🦽 👨🏻‍🦽 👨🏼‍🦽 👨🏽‍🦽 👨🏾‍🦽 👨🏿‍🦽 👩‍🦽 👩🏻‍🦽 👩🏼‍🦽 👩🏽‍🦽 👩🏾‍🦽 👩🏿‍🦽 🏃 🏃🏻 🏃🏼 🏃🏽 🏃🏾 🏃🏿 🏃‍♂️ 🏃‍♂ 🏃🏻‍♂️ 🏃🏻‍♂ 🏃🏼‍♂️ 🏃🏼‍♂ 🏃🏽‍♂️ 🏃🏽‍♂ 🏃🏾‍♂️ 🏃🏾‍♂ 🏃🏿‍♂️ 🏃🏿‍♂ 🏃‍♀️ 🏃‍♀ 🏃🏻‍♀️ 🏃🏻‍♀ 🏃🏼‍♀️ 🏃🏼‍♀ 🏃🏽‍♀️ 🏃🏽‍♀ 🏃🏾‍♀️ 🏃🏾‍♀ 🏃🏿‍♀️ 🏃🏿‍♀ 💃 💃🏻 💃🏼 💃🏽 💃🏾 💃🏿 🕺 🕺🏻 🕺🏼 🕺🏽 🕺🏾 🕺🏿 🕴️ 🕴 🕴🏻 🕴🏼 🕴🏽 🕴🏾 🕴🏿 👯 👯‍♂️ 👯‍♂ 👯‍♀️ 👯‍♀ 🧖 🧖🏻 🧖🏼 🧖🏽 🧖🏾 🧖🏿 🧖‍♂️ 🧖‍♂ 🧖🏻‍♂️ 🧖🏻‍♂ 🧖🏼‍♂️ 🧖🏼‍♂ 🧖🏽‍♂️ 🧖🏽‍♂ 🧖🏾‍♂️ 🧖🏾‍♂ 🧖🏿‍♂️ 🧖🏿‍♂ 🧖‍♀️ 🧖‍♀ 🧖🏻‍♀️ 🧖🏻‍♀ 🧖🏼‍♀️ 🧖🏼‍♀ 🧖🏽‍♀️ 🧖🏽‍♀ 🧖🏾‍♀️ 🧖🏾‍♀ 🧖🏿‍♀️ 🧖🏿‍♀ 🧗 🧗🏻 🧗🏼 🧗🏽 🧗🏾 🧗🏿 🧗‍♂️ 🧗‍♂ 🧗🏻‍♂️ 🧗🏻‍♂ 🧗🏼‍♂️ 🧗🏼‍♂ 🧗🏽‍♂️ 🧗🏽‍♂ 🧗🏾‍♂️ 🧗🏾‍♂ 🧗🏿‍♂️ 🧗🏿‍♂ 🧗‍♀️ 🧗‍♀ 🧗🏻‍♀️ 🧗🏻‍♀ 🧗🏼‍♀️ 🧗🏼‍♀ 🧗🏽‍♀️ 🧗🏽‍♀ 🧗🏾‍♀️ 🧗🏾‍♀ 🧗🏿‍♀️ 🧗🏿‍♀ 🤺 🏇 🏇🏻 🏇🏼 🏇🏽 🏇🏾 🏇🏿 ⛷️ ⛷ 🏂 🏂🏻 🏂🏼 🏂🏽 🏂🏾 🏂🏿 🏌️ 🏌 🏌🏻 🏌🏼 🏌🏽 🏌🏾 🏌🏿 🏌️‍♂️ 🏌‍♂️ 🏌️‍♂ 🏌‍♂ 🏌🏻‍♂️ 🏌🏻‍♂ 🏌🏼‍♂️ 🏌🏼‍♂ 🏌🏽‍♂️ 🏌🏽‍♂ 🏌🏾‍♂️ 🏌🏾‍♂ 🏌🏿‍♂️ 🏌🏿‍♂ 🏌️‍♀️ 🏌‍♀️ 🏌️‍♀ 🏌‍♀ 🏌🏻‍♀️ 🏌🏻‍♀ 🏌🏼‍♀️ 🏌🏼‍♀ 🏌🏽‍♀️ 🏌🏽‍♀ 🏌🏾‍♀️ 🏌🏾‍♀ 🏌🏿‍♀️ 🏌🏿‍♀ 🏄 🏄🏻 🏄🏼 🏄🏽 🏄🏾 🏄🏿 🏄‍♂️ 🏄‍♂ 🏄🏻‍♂️ 🏄🏻‍♂ 🏄🏼‍♂️ 🏄🏼‍♂ 🏄🏽‍♂️ 🏄🏽‍♂ 🏄🏾‍♂️ 🏄🏾‍♂ 🏄🏿‍♂️ 🏄🏿‍♂ 🏄‍♀️ 🏄‍♀ 🏄🏻‍♀️ 🏄🏻‍♀ 🏄🏼‍♀️ 🏄🏼‍♀ 🏄🏽‍♀️ 🏄🏽‍♀ 🏄🏾‍♀️ 🏄🏾‍♀ 🏄🏿‍♀️ 🏄🏿‍♀ 🚣 🚣🏻 🚣🏼 🚣🏽 🚣🏾 🚣🏿 🚣‍♂️ 🚣‍♂ 🚣🏻‍♂️ 🚣🏻‍♂ 🚣🏼‍♂️ 🚣🏼‍♂ 🚣🏽‍♂️ 🚣🏽‍♂ 🚣🏾‍♂️ 🚣🏾‍♂ 🚣🏿‍♂️ 🚣🏿‍♂ 🚣‍♀️ 🚣‍♀ 🚣🏻‍♀️ 🚣🏻‍♀ 🚣🏼‍♀️ 🚣🏼‍♀ 🚣🏽‍♀️ 🚣🏽‍♀ 🚣🏾‍♀️ 🚣🏾‍♀ 🚣🏿‍♀️ 🚣🏿‍♀ 🏊 🏊🏻 🏊🏼 🏊🏽 🏊🏾 🏊🏿 🏊‍♂️ 🏊‍♂ 🏊🏻‍♂️ 🏊🏻‍♂ 🏊🏼‍♂️ 🏊🏼‍♂ 🏊🏽‍♂️ 🏊🏽‍♂ 🏊🏾‍♂️ 🏊🏾‍♂ 🏊🏿‍♂️ 🏊🏿‍♂ 🏊‍♀️ 🏊‍♀ 🏊🏻‍♀️ 🏊🏻‍♀ 🏊🏼‍♀️ 🏊🏼‍♀ 🏊🏽‍♀️ 🏊🏽‍♀ 🏊🏾‍♀️ 🏊🏾‍♀ 🏊🏿‍♀️ 🏊🏿‍♀ ⛹️ ⛹ ⛹🏻 ⛹🏼 ⛹🏽 ⛹🏾 ⛹🏿 ⛹️‍♂️ ⛹‍♂️ ⛹️‍♂ ⛹‍♂ ⛹🏻‍♂️ ⛹🏻‍♂ ⛹🏼‍♂️ ⛹🏼‍♂ ⛹🏽‍♂️ ⛹🏽‍♂ ⛹🏾‍♂️ ⛹🏾‍♂ ⛹🏿‍♂️ ⛹🏿‍♂ ⛹️‍♀️ ⛹‍♀️ ⛹️‍♀ ⛹‍♀ ⛹🏻‍♀️ ⛹🏻‍♀ ⛹🏼‍♀️ ⛹🏼‍♀ ⛹🏽‍♀️ ⛹🏽‍♀ ⛹🏾‍♀️ ⛹🏾‍♀ ⛹🏿‍♀️ ⛹🏿‍♀ 🏋️ 🏋 🏋🏻 🏋🏼 🏋🏽 🏋🏾 🏋🏿 🏋️‍♂️ 🏋‍♂️ 🏋️‍♂ 🏋‍♂ 🏋🏻‍♂️ 🏋🏻‍♂ 🏋🏼‍♂️ 🏋🏼‍♂ 🏋🏽‍♂️ 🏋🏽‍♂ 🏋🏾‍♂️ 🏋🏾‍♂ 🏋🏿‍♂️ 🏋🏿‍♂ 🏋️‍♀️ 🏋‍♀️ 🏋️‍♀ 🏋‍♀ 🏋🏻‍♀️ 🏋🏻‍♀ 🏋🏼‍♀️ 🏋🏼‍♀ 🏋🏽‍♀️ 🏋🏽‍♀ 🏋🏾‍♀️ 🏋🏾‍♀ 🏋🏿‍♀️ 🏋🏿‍♀ 🚴 🚴🏻 🚴🏼 🚴🏽 🚴🏾 🚴🏿 🚴‍♂️ 🚴‍♂ 🚴🏻‍♂️ 🚴🏻‍♂ 🚴🏼‍♂️ 🚴🏼‍♂ 🚴🏽‍♂️ 🚴🏽‍♂ 🚴🏾‍♂️ 🚴🏾‍♂ 🚴🏿‍♂️ 🚴🏿‍♂ 🚴‍♀️ 🚴‍♀ 🚴🏻‍♀️ 🚴🏻‍♀ 🚴🏼‍♀️ 🚴🏼‍♀ 🚴🏽‍♀️ 🚴🏽‍♀ 🚴🏾‍♀️ 🚴🏾‍♀ 🚴🏿‍♀️ 🚴🏿‍♀ 🚵 🚵🏻 🚵🏼 🚵🏽 🚵🏾 🚵🏿 🚵‍♂️ 🚵‍♂ 🚵🏻‍♂️ 🚵🏻‍♂ 🚵🏼‍♂️ 🚵🏼‍♂ 🚵🏽‍♂️ 🚵🏽‍♂ 🚵🏾‍♂️ 🚵🏾‍♂ 🚵🏿‍♂️ 🚵🏿‍♂ 🚵‍♀️ 🚵‍♀ 🚵🏻‍♀️ 🚵🏻‍♀ 🚵🏼‍♀️ 🚵🏼‍♀ 🚵🏽‍♀️ 🚵🏽‍♀ 🚵🏾‍♀️ 🚵🏾‍♀ 🚵🏿‍♀️ 🚵🏿‍♀ 🤸 🤸🏻 🤸🏼 🤸🏽 🤸🏾 🤸🏿 🤸‍♂️ 🤸‍♂ 🤸🏻‍♂️ 🤸🏻‍♂ 🤸🏼‍♂️ 🤸🏼‍♂ 🤸🏽‍♂️ 🤸🏽‍♂ 🤸🏾‍♂️ 🤸🏾‍♂ 🤸🏿‍♂️ 🤸🏿‍♂ 🤸‍♀️ 🤸‍♀ 🤸🏻‍♀️ 🤸🏻‍♀ 🤸🏼‍♀️ 🤸🏼‍♀ 🤸🏽‍♀️ 🤸🏽‍♀ 🤸🏾‍♀️ 🤸🏾‍♀ 🤸🏿‍♀️ 🤸🏿‍♀ 🤼 🤼‍♂️ 🤼‍♂ 🤼‍♀️ 🤼‍♀ 🤽 🤽🏻 🤽🏼 🤽🏽 🤽🏾 🤽🏿 🤽‍♂️ 🤽‍♂ 🤽🏻‍♂️ 🤽🏻‍♂ 🤽🏼‍♂️ 🤽🏼‍♂ 🤽🏽‍♂️ 🤽🏽‍♂ 🤽🏾‍♂️ 🤽🏾‍♂ 🤽🏿‍♂️ 🤽🏿‍♂ 🤽‍♀️ 🤽‍♀ 🤽🏻‍♀️ 🤽🏻‍♀ 🤽🏼‍♀️ 🤽🏼‍♀ 🤽🏽‍♀️ 🤽🏽‍♀ 🤽🏾‍♀️ 🤽🏾‍♀ 🤽🏿‍♀️ 🤽🏿‍♀ 🤾 🤾🏻 🤾🏼 🤾🏽 🤾🏾 🤾🏿 🤾‍♂️ 🤾‍♂ 🤾🏻‍♂️ 🤾🏻‍♂ 🤾🏼‍♂️ 🤾🏼‍♂ 🤾🏽‍♂️ 🤾🏽‍♂ 🤾🏾‍♂️ 🤾🏾‍♂ 🤾🏿‍♂️ 🤾🏿‍♂ 🤾‍♀️ 🤾‍♀ 🤾🏻‍♀️ 🤾🏻‍♀ 🤾🏼‍♀️ 🤾🏼‍♀ 🤾🏽‍♀️ 🤾🏽‍♀ 🤾🏾‍♀️ 🤾🏾‍♀ 🤾🏿‍♀️ 🤾🏿‍♀ 🤹 🤹🏻 🤹🏼 🤹🏽 🤹🏾 🤹🏿 🤹‍♂️ 🤹‍♂ 🤹🏻‍♂️ 🤹🏻‍♂ 🤹🏼‍♂️ 🤹🏼‍♂ 🤹🏽‍♂️ 🤹🏽‍♂ 🤹🏾‍♂️ 🤹🏾‍♂ 🤹🏿‍♂️ 🤹🏿‍♂ 🤹‍♀️ 🤹‍♀ 🤹🏻‍♀️ 🤹🏻‍♀ 🤹🏼‍♀️ 🤹🏼‍♀ 🤹🏽‍♀️ 🤹🏽‍♀ 🤹🏾‍♀️ 🤹🏾‍♀ 🤹🏿‍♀️ 🤹🏿‍♀ 🧘 🧘🏻 🧘🏼 🧘🏽 🧘🏾 🧘🏿 🧘‍♂️ 🧘‍♂ 🧘🏻‍♂️ 🧘🏻‍♂ 🧘🏼‍♂️ 🧘🏼‍♂ 🧘🏽‍♂️ 🧘🏽‍♂ 🧘🏾‍♂️ 🧘🏾‍♂ 🧘🏿‍♂️ 🧘🏿‍♂ 🧘‍♀️ 🧘‍♀ 🧘🏻‍♀️ 🧘🏻‍♀ 🧘🏼‍♀️ 🧘🏼‍♀ 🧘🏽‍♀️ 🧘🏽‍♀ 🧘🏾‍♀️ 🧘🏾‍♀ 🧘🏿‍♀️ 🧘🏿‍♀ 🛀 🛀🏻 🛀🏼 🛀🏽 🛀🏾 🛀🏿 🛌 🛌🏻 🛌🏼 🛌🏽 🛌🏾 🛌🏿 🧑‍🤝‍🧑 🧑🏻‍🤝‍🧑🏻 🧑🏻‍🤝‍🧑🏼 🧑🏻‍🤝‍🧑🏽 🧑🏻‍🤝‍🧑🏾 🧑🏻‍🤝‍🧑🏿 🧑🏼‍🤝‍🧑🏻 🧑🏼‍🤝‍🧑🏼 🧑🏼‍🤝‍🧑🏽 🧑🏼‍🤝‍🧑🏾 🧑🏼‍🤝‍🧑🏿 🧑🏽‍🤝‍🧑🏻 🧑🏽‍🤝‍🧑🏼 🧑🏽‍🤝‍🧑🏽 🧑🏽‍🤝‍🧑🏾 🧑🏽‍🤝‍🧑🏿 🧑🏾‍🤝‍🧑🏻 🧑🏾‍🤝‍🧑🏼 🧑🏾‍🤝‍🧑🏽 🧑🏾‍🤝‍🧑🏾 🧑🏾‍🤝‍🧑🏿 🧑🏿‍🤝‍🧑🏻 🧑🏿‍🤝‍🧑🏼 🧑🏿‍🤝‍🧑🏽 🧑🏿‍🤝‍🧑🏾 🧑🏿‍🤝‍🧑🏿 👭 👭🏻 👩🏻‍🤝‍👩🏼 👩🏻‍🤝‍👩🏽 👩🏻‍🤝‍👩🏾 👩🏻‍🤝‍👩🏿 👩🏼‍🤝‍👩🏻 👭🏼 👩🏼‍🤝‍👩🏽 👩🏼‍🤝‍👩🏾 👩🏼‍🤝‍👩🏿 👩🏽‍🤝‍👩🏻 👩🏽‍🤝‍👩🏼 👭🏽 👩🏽‍🤝‍👩🏾 👩🏽‍🤝‍👩🏿 👩🏾‍🤝‍👩🏻 👩🏾‍🤝‍👩🏼 👩🏾‍🤝‍👩🏽 👭🏾 👩🏾‍🤝‍👩🏿 👩🏿‍🤝‍👩🏻 👩🏿‍🤝‍👩🏼 👩🏿‍🤝‍👩🏽 👩🏿‍🤝‍👩🏾 👭🏿 👫 👫🏻 👩🏻‍🤝‍👨🏼 👩🏻‍🤝‍👨🏽 👩🏻‍🤝‍👨🏾 👩🏻‍🤝‍👨🏿 👩🏼‍🤝‍👨🏻 👫🏼 👩🏼‍🤝‍👨🏽 👩🏼‍🤝‍👨🏾 👩🏼‍🤝‍👨🏿 👩🏽‍🤝‍👨🏻 👩🏽‍🤝‍👨🏼 👫🏽 👩🏽‍🤝‍👨🏾 👩🏽‍🤝‍👨🏿 👩🏾‍🤝‍👨🏻 👩🏾‍🤝‍👨🏼 👩🏾‍🤝‍👨🏽 👫🏾 👩🏾‍🤝‍👨🏿 👩🏿‍🤝‍👨🏻 👩🏿‍🤝‍👨🏼 👩🏿‍🤝‍👨🏽 👩🏿‍🤝‍👨🏾 👫🏿 👬 👬🏻 👨🏻‍🤝‍👨🏼 👨🏻‍🤝‍👨🏽 👨🏻‍🤝‍👨🏾 👨🏻‍🤝‍👨🏿 👨🏼‍🤝‍👨🏻 👬🏼 👨🏼‍🤝‍👨🏽 👨🏼‍🤝‍👨🏾 👨🏼‍🤝‍👨🏿 👨🏽‍🤝‍👨🏻 👨🏽‍🤝‍👨🏼 👬🏽 👨🏽‍🤝‍👨🏾 👨🏽‍🤝‍👨🏿 👨🏾‍🤝‍👨🏻 👨🏾‍🤝‍👨🏼 👨🏾‍🤝‍👨🏽 👬🏾 👨🏾‍🤝‍👨🏿 👨🏿‍🤝‍👨🏻 👨🏿‍🤝‍👨🏼 👨🏿‍🤝‍👨🏽 👨🏿‍🤝‍👨🏾 👬🏿 💏 💏🏻 💏🏼 💏🏽 💏🏾 💏🏿 🧑🏻‍❤️‍💋‍🧑🏼 🧑🏻‍❤‍💋‍🧑🏼 🧑🏻‍❤️‍💋‍🧑🏽 🧑🏻‍❤‍💋‍🧑🏽 🧑🏻‍❤️‍💋‍🧑🏾 🧑🏻‍❤‍💋‍🧑🏾 🧑🏻‍❤️‍💋‍🧑🏿 🧑🏻‍❤‍💋‍🧑🏿 🧑🏼‍❤️‍💋‍🧑🏻 🧑🏼‍❤‍💋‍🧑🏻 🧑🏼‍❤️‍💋‍🧑🏽 🧑🏼‍❤‍💋‍🧑🏽 🧑🏼‍❤️‍💋‍🧑🏾 🧑🏼‍❤‍💋‍🧑🏾 🧑🏼‍❤️‍💋‍🧑🏿 🧑🏼‍❤‍💋‍🧑🏿 🧑🏽‍❤️‍💋‍🧑🏻 🧑🏽‍❤‍💋‍🧑🏻 🧑🏽‍❤️‍💋‍🧑🏼 🧑🏽‍❤‍💋‍🧑🏼 🧑🏽‍❤️‍💋‍🧑🏾 🧑🏽‍❤‍💋‍🧑🏾 🧑🏽‍❤️‍💋‍🧑🏿 🧑🏽‍❤‍💋‍🧑🏿 🧑🏾‍❤️‍💋‍🧑🏻 🧑🏾‍❤‍💋‍🧑🏻 🧑🏾‍❤️‍💋‍🧑🏼 🧑🏾‍❤‍💋‍🧑🏼 🧑🏾‍❤️‍💋‍🧑🏽 🧑🏾‍❤‍💋‍🧑🏽 🧑🏾‍❤️‍💋‍🧑🏿 🧑🏾‍❤‍💋‍🧑🏿 🧑🏿‍❤️‍💋‍🧑🏻 🧑🏿‍❤‍💋‍🧑🏻 🧑🏿‍❤️‍💋‍🧑🏼 🧑🏿‍❤‍💋‍🧑🏼 🧑🏿‍❤️‍💋‍🧑🏽 🧑🏿‍❤‍💋‍🧑🏽 🧑🏿‍❤️‍💋‍🧑🏾 🧑🏿‍❤‍💋‍🧑🏾 👩‍❤️‍💋‍👨 👩‍❤‍💋‍👨 👩🏻‍❤️‍💋‍👨🏻 👩🏻‍❤‍💋‍👨🏻 👩🏻‍❤️‍💋‍👨🏼 👩🏻‍❤‍💋‍👨🏼 👩🏻‍❤️‍💋‍👨🏽 👩🏻‍❤‍💋‍👨🏽 👩🏻‍❤️‍💋‍👨🏾 👩🏻‍❤‍💋‍👨🏾 👩🏻‍❤️‍💋‍👨🏿 👩🏻‍❤‍💋‍👨🏿 👩🏼‍❤️‍💋‍👨🏻 👩🏼‍❤‍💋‍👨🏻 👩🏼‍❤️‍💋‍👨🏼 👩🏼‍❤‍💋‍👨🏼 👩🏼‍❤️‍💋‍👨🏽 👩🏼‍❤‍💋‍👨🏽 👩🏼‍❤️‍💋‍👨🏾 👩🏼‍❤‍💋‍👨🏾 👩🏼‍❤️‍💋‍👨🏿 👩🏼‍❤‍💋‍👨🏿 👩🏽‍❤️‍💋‍👨🏻 👩🏽‍❤‍💋‍👨🏻 👩🏽‍❤️‍💋‍👨🏼 👩🏽‍❤‍💋‍👨🏼 👩🏽‍❤️‍💋‍👨🏽 👩🏽‍❤‍💋‍👨🏽 👩🏽‍❤️‍💋‍👨🏾 👩🏽‍❤‍💋‍👨🏾 👩🏽‍❤️‍💋‍👨🏿 👩🏽‍❤‍💋‍👨🏿 👩🏾‍❤️‍💋‍👨🏻 👩🏾‍❤‍💋‍👨🏻 👩🏾‍❤️‍💋‍👨🏼 👩🏾‍❤‍💋‍👨🏼 👩🏾‍❤️‍💋‍👨🏽 👩🏾‍❤‍💋‍👨🏽 👩🏾‍❤️‍💋‍👨🏾 👩🏾‍❤‍💋‍👨🏾 👩🏾‍❤️‍💋‍👨🏿 👩🏾‍❤‍💋‍👨🏿 👩🏿‍❤️‍💋‍👨🏻 👩🏿‍❤‍💋‍👨🏻 👩🏿‍❤️‍💋‍👨🏼 👩🏿‍❤‍💋‍👨🏼 👩🏿‍❤️‍💋‍👨🏽 👩🏿‍❤‍💋‍👨🏽 👩🏿‍❤️‍💋‍👨🏾 👩🏿‍❤‍💋‍👨🏾 👩🏿‍❤️‍💋‍👨🏿 👩🏿‍❤‍💋‍👨🏿 👨‍❤️‍💋‍👨 👨‍❤‍💋‍👨 👨🏻‍❤️‍💋‍👨🏻 👨🏻‍❤‍💋‍👨🏻 👨🏻‍❤️‍💋‍👨🏼 👨🏻‍❤‍💋‍👨🏼 👨🏻‍❤️‍💋‍👨🏽 👨🏻‍❤‍💋‍👨🏽 👨🏻‍❤️‍💋‍👨🏾 👨🏻‍❤‍💋‍👨🏾 👨🏻‍❤️‍💋‍👨🏿 👨🏻‍❤‍💋‍👨🏿 👨🏼‍❤️‍💋‍👨🏻 👨🏼‍❤‍💋‍👨🏻 👨🏼‍❤️‍💋‍👨🏼 👨🏼‍❤‍💋‍👨🏼 👨🏼‍❤️‍💋‍👨🏽 👨🏼‍❤‍💋‍👨🏽 👨🏼‍❤️‍💋‍👨🏾 👨🏼‍❤‍💋‍👨🏾 👨🏼‍❤️‍💋‍👨🏿 👨🏼‍❤‍💋‍👨🏿 👨🏽‍❤️‍💋‍👨🏻 👨🏽‍❤‍💋‍👨🏻 👨🏽‍❤️‍💋‍👨🏼 👨🏽‍❤‍💋‍👨🏼 👨🏽‍❤️‍💋‍👨🏽 👨🏽‍❤‍💋‍👨🏽 👨🏽‍❤️‍💋‍👨🏾 👨🏽‍❤‍💋‍👨🏾 👨🏽‍❤️‍💋‍👨🏿 👨🏽‍❤‍💋‍👨🏿 👨🏾‍❤️‍💋‍👨🏻 👨🏾‍❤‍💋‍👨🏻 👨🏾‍❤️‍💋‍👨🏼 👨🏾‍❤‍💋‍👨🏼 👨🏾‍❤️‍💋‍👨🏽 👨🏾‍❤‍💋‍👨🏽 👨🏾‍❤️‍💋‍👨🏾 👨🏾‍❤‍💋‍👨🏾 👨🏾‍❤️‍💋‍👨🏿 👨🏾‍❤‍💋‍👨🏿 👨🏿‍❤️‍💋‍👨🏻 👨🏿‍❤‍💋‍👨🏻 👨🏿‍❤️‍💋‍👨🏼 👨🏿‍❤‍💋‍👨🏼 👨🏿‍❤️‍💋‍👨🏽 👨🏿‍❤‍💋‍👨🏽 👨🏿‍❤️‍💋‍👨🏾 👨🏿‍❤‍💋‍👨🏾 👨🏿‍❤️‍💋‍👨🏿 👨🏿‍❤‍💋‍👨🏿 👩‍❤️‍💋‍👩 👩‍❤‍💋‍👩 👩🏻‍❤️‍💋‍👩🏻 👩🏻‍❤‍💋‍👩🏻 👩🏻‍❤️‍💋‍👩🏼 👩🏻‍❤‍💋‍👩🏼 👩🏻‍❤️‍💋‍👩🏽 👩🏻‍❤‍💋‍👩🏽 👩🏻‍❤️‍💋‍👩🏾 👩🏻‍❤‍💋‍👩🏾 👩🏻‍❤️‍💋‍👩🏿 👩🏻‍❤‍💋‍👩🏿 👩🏼‍❤️‍💋‍👩🏻 👩🏼‍❤‍💋‍👩🏻 👩🏼‍❤️‍💋‍👩🏼 👩🏼‍❤‍💋‍👩🏼 👩🏼‍❤️‍💋‍👩🏽 👩🏼‍❤‍💋‍👩🏽 👩🏼‍❤️‍💋‍👩🏾 👩🏼‍❤‍💋‍👩🏾 👩🏼‍❤️‍💋‍👩🏿 👩🏼‍❤‍💋‍👩🏿 👩🏽‍❤️‍💋‍👩🏻 👩🏽‍❤‍💋‍👩🏻 👩🏽‍❤️‍💋‍👩🏼 👩🏽‍❤‍💋‍👩🏼 👩🏽‍❤️‍💋‍👩🏽 👩🏽‍❤‍💋‍👩🏽 👩🏽‍❤️‍💋‍👩🏾 👩🏽‍❤‍💋‍👩🏾 👩🏽‍❤️‍💋‍👩🏿 👩🏽‍❤‍💋‍👩🏿 👩🏾‍❤️‍💋‍👩🏻 👩🏾‍❤‍💋‍👩🏻 👩🏾‍❤️‍💋‍👩🏼 👩🏾‍❤‍💋‍👩🏼 👩🏾‍❤️‍💋‍👩🏽 👩🏾‍❤‍💋‍👩🏽 👩🏾‍❤️‍💋‍👩🏾 👩🏾‍❤‍💋‍👩🏾 👩🏾‍❤️‍💋‍👩🏿 👩🏾‍❤‍💋‍👩🏿 👩🏿‍❤️‍💋‍👩🏻 👩🏿‍❤‍💋‍👩🏻 👩🏿‍❤️‍💋‍👩🏼 👩🏿‍❤‍💋‍👩🏼 👩🏿‍❤️‍💋‍👩🏽 👩🏿‍❤‍💋‍👩🏽 👩🏿‍❤️‍💋‍👩🏾 👩🏿‍❤‍💋‍👩🏾 👩🏿‍❤️‍💋‍👩🏿 👩🏿‍❤‍💋‍👩🏿 💑 💑🏻 💑🏼 💑🏽 💑🏾 💑🏿 🧑🏻‍❤️‍🧑🏼 🧑🏻‍❤‍🧑🏼 🧑🏻‍❤️‍🧑🏽 🧑🏻‍❤‍🧑🏽 🧑🏻‍❤️‍🧑🏾 🧑🏻‍❤‍🧑🏾 🧑🏻‍❤️‍🧑🏿 🧑🏻‍❤‍🧑🏿 🧑🏼‍❤️‍🧑🏻 🧑🏼‍❤‍🧑🏻 🧑🏼‍❤️‍🧑🏽 🧑🏼‍❤‍🧑🏽 🧑🏼‍❤️‍🧑🏾 🧑🏼‍❤‍🧑🏾 🧑🏼‍❤️‍🧑🏿 🧑🏼‍❤‍🧑🏿 🧑🏽‍❤️‍🧑🏻 🧑🏽‍❤‍🧑🏻 🧑🏽‍❤️‍🧑🏼 🧑🏽‍❤‍🧑🏼 🧑🏽‍❤️‍🧑🏾 🧑🏽‍❤‍🧑🏾 🧑🏽‍❤️‍🧑🏿 🧑🏽‍❤‍🧑🏿 🧑🏾‍❤️‍🧑🏻 🧑🏾‍❤‍🧑🏻 🧑🏾‍❤️‍🧑🏼 🧑🏾‍❤‍🧑🏼 🧑🏾‍❤️‍🧑🏽 🧑🏾‍❤‍🧑🏽 🧑🏾‍❤️‍🧑🏿 🧑🏾‍❤‍🧑🏿 🧑🏿‍❤️‍🧑🏻 🧑🏿‍❤‍🧑🏻 🧑🏿‍❤️‍🧑🏼 🧑🏿‍❤‍🧑🏼 🧑🏿‍❤️‍🧑🏽 🧑🏿‍❤‍🧑🏽 🧑🏿‍❤️‍🧑🏾 🧑🏿‍❤‍🧑🏾 👩‍❤️‍👨 👩‍❤‍👨 👩🏻‍❤️‍👨🏻 👩🏻‍❤‍👨🏻 👩🏻‍❤️‍👨🏼 👩🏻‍❤‍👨🏼 👩🏻‍❤️‍👨🏽 👩🏻‍❤‍👨🏽 👩🏻‍❤️‍👨🏾 👩🏻‍❤‍👨🏾 👩🏻‍❤️‍👨🏿 👩🏻‍❤‍👨🏿 👩🏼‍❤️‍👨🏻 👩🏼‍❤‍👨🏻 👩🏼‍❤️‍👨🏼 👩🏼‍❤‍👨🏼 👩🏼‍❤️‍👨🏽 👩🏼‍❤‍👨🏽 👩🏼‍❤️‍👨🏾 👩🏼‍❤‍👨🏾 👩🏼‍❤️‍👨🏿 👩🏼‍❤‍👨🏿 👩🏽‍❤️‍👨🏻 👩🏽‍❤‍👨🏻 👩🏽‍❤️‍👨🏼 👩🏽‍❤‍👨🏼 👩🏽‍❤️‍👨🏽 👩🏽‍❤‍👨🏽 👩🏽‍❤️‍👨🏾 👩🏽‍❤‍👨🏾 👩🏽‍❤️‍👨🏿 👩🏽‍❤‍👨🏿 👩🏾‍❤️‍👨🏻 👩🏾‍❤‍👨🏻 👩🏾‍❤️‍👨🏼 👩🏾‍❤‍👨🏼 👩🏾‍❤️‍👨🏽 👩🏾‍❤‍👨🏽 👩🏾‍❤️‍👨🏾 👩🏾‍❤‍👨🏾 👩🏾‍❤️‍👨🏿 👩🏾‍❤‍👨🏿 👩🏿‍❤️‍👨🏻 👩🏿‍❤‍👨🏻 👩🏿‍❤️‍👨🏼 👩🏿‍❤‍👨🏼 👩🏿‍❤️‍👨🏽 👩🏿‍❤‍👨🏽 👩🏿‍❤️‍👨🏾 👩🏿‍❤‍👨🏾 👩🏿‍❤️‍👨🏿 👩🏿‍❤‍👨🏿 👨‍❤️‍👨 👨‍❤‍👨 👨🏻‍❤️‍👨🏻 👨🏻‍❤‍👨🏻 👨🏻‍❤️‍👨🏼 👨🏻‍❤‍👨🏼 👨🏻‍❤️‍👨🏽 👨🏻‍❤‍👨🏽 👨🏻‍❤️‍👨🏾 👨🏻‍❤‍👨🏾 👨🏻‍❤️‍👨🏿 👨🏻‍❤‍👨🏿 👨🏼‍❤️‍👨🏻 👨🏼‍❤‍👨🏻 👨🏼‍❤️‍👨🏼 👨🏼‍❤‍👨🏼 👨🏼‍❤️‍👨🏽 👨🏼‍❤‍👨🏽 👨🏼‍❤️‍👨🏾 👨🏼‍❤‍👨🏾 👨🏼‍❤️‍👨🏿 👨🏼‍❤‍👨🏿 👨🏽‍❤️‍👨🏻 👨🏽‍❤‍👨🏻 👨🏽‍❤️‍👨🏼 👨🏽‍❤‍👨🏼 👨🏽‍❤️‍👨🏽 👨🏽‍❤‍👨🏽 👨🏽‍❤️‍👨🏾 👨🏽‍❤‍👨🏾 👨🏽‍❤️‍👨🏿 👨🏽‍❤‍👨🏿 👨🏾‍❤️‍👨🏻 👨🏾‍❤‍👨🏻 👨🏾‍❤️‍👨🏼 👨🏾‍❤‍👨🏼 👨🏾‍❤️‍👨🏽 👨🏾‍❤‍👨🏽 👨🏾‍❤️‍👨🏾 👨🏾‍❤‍👨🏾 👨🏾‍❤️‍👨🏿 👨🏾‍❤‍👨🏿 👨🏿‍❤️‍👨🏻 👨🏿‍❤‍👨🏻 👨🏿‍❤️‍👨🏼 👨🏿‍❤‍👨🏼 👨🏿‍❤️‍👨🏽 👨🏿‍❤‍👨🏽 👨🏿‍❤️‍👨🏾 👨🏿‍❤‍👨🏾 👨🏿‍❤️‍👨🏿 👨🏿‍❤‍👨🏿 👩‍❤️‍👩 👩‍❤‍👩 👩🏻‍❤️‍👩🏻 👩🏻‍❤‍👩🏻 👩🏻‍❤️‍👩🏼 👩🏻‍❤‍👩🏼 👩🏻‍❤️‍👩🏽 👩🏻‍❤‍👩🏽 👩🏻‍❤️‍👩🏾 👩🏻‍❤‍👩🏾 👩🏻‍❤️‍👩🏿 👩🏻‍❤‍👩🏿 👩🏼‍❤️‍👩🏻 👩🏼‍❤‍👩🏻 👩🏼‍❤️‍👩🏼 👩🏼‍❤‍👩🏼 👩🏼‍❤️‍👩🏽 👩🏼‍❤‍👩🏽 👩🏼‍❤️‍👩🏾 👩🏼‍❤‍👩🏾 👩🏼‍❤️‍👩🏿 👩🏼‍❤‍👩🏿 👩🏽‍❤️‍👩🏻 👩🏽‍❤‍👩🏻 👩🏽‍❤️‍👩🏼 👩🏽‍❤‍👩🏼 👩🏽‍❤️‍👩🏽 👩🏽‍❤‍👩🏽 👩🏽‍❤️‍👩🏾 👩🏽‍❤‍👩🏾 👩🏽‍❤️‍👩🏿 👩🏽‍❤‍👩🏿 👩🏾‍❤️‍👩🏻 👩🏾‍❤‍👩🏻 👩🏾‍❤️‍👩🏼 👩🏾‍❤‍👩🏼 👩🏾‍❤️‍👩🏽 👩🏾‍❤‍👩🏽 👩🏾‍❤️‍👩🏾 👩🏾‍❤‍👩🏾 👩🏾‍❤️‍👩🏿 👩🏾‍❤‍👩🏿 👩🏿‍❤️‍👩🏻 👩🏿‍❤‍👩🏻 👩🏿‍❤️‍👩🏼 👩🏿‍❤‍👩🏼 👩🏿‍❤️‍👩🏽 👩🏿‍❤‍👩🏽 👩🏿‍❤️‍👩🏾 👩🏿‍❤‍👩🏾 👩🏿‍❤️‍👩🏿 👩🏿‍❤‍👩🏿 👪 👨‍👩‍👦 👨‍👩‍👧 👨‍👩‍👧‍👦 👨‍👩‍👦‍👦 👨‍👩‍👧‍👧 👨‍👨‍👦 👨‍👨‍👧 👨‍👨‍👧‍👦 👨‍👨‍👦‍👦 👨‍👨‍👧‍👧 👩‍👩‍👦 👩‍👩‍👧 👩‍👩‍👧‍👦 👩‍👩‍👦‍👦 👩‍👩‍👧‍👧 👨‍👦 👨‍👦‍👦 👨‍👧 👨‍👧‍👦 👨‍👧‍👧 👩‍👦 👩‍👦‍👦 👩‍👧 👩‍👧‍👦 👩‍👧‍👧 🗣️ 🗣 👤 👥 🫂 👣\n- Component\n  🏻 🏼 🏽 🏾 🏿 🦰 🦱 🦳 🦲\n- Animals & Nature\n  🐵 🐒 🦍 🦧 🐶 🐕 🦮 🐕‍🦺 🐩 🐺 🦊 🦝 🐱 🐈 🐈‍⬛ 🦁 🐯 🐅 🐆 🐴 🐎 🦄 🦓 🦌 🦬 🐮 🐂 🐃 🐄 🐷 🐖 🐗 🐽 🐏 🐑 🐐 🐪 🐫 🦙 🦒 🐘 🦣 🦏 🦛 🐭 🐁 🐀 🐹 🐰 🐇 🐿️ 🐿 🦫 🦔 🦇 🐻 🐻‍❄️ 🐻‍❄ 🐨 🐼 🦥 🦦 🦨 🦘 🦡 🐾 🦃 🐔 🐓 🐣 🐤 🐥 🐦 🐧 🕊️ 🕊 🦅 🦆 🦢 🦉 🦤 🪶 🦩 🦚 🦜 🐸 🐊 🐢 🦎 🐍 🐲 🐉 🦕 🦖 🐳 🐋 🐬 🦭 🐟 🐠 🐡 🦈 🐙 🐚 🪸 🐌 🦋 🐛 🐜 🐝 🪲 🐞 🦗 🪳 🕷️ 🕷 🕸️ 🕸 🦂 🦟 🪰 🪱 🦠 💐 🌸 💮 🪷 🏵️ 🏵 🌹 🥀 🌺 🌻 🌼 🌷 🌱 🪴 🌲 🌳 🌴 🌵 🌾 🌿 ☘️ ☘ 🍀 🍁 🍂 🍃 🪹 🪺\n- Food & Drink\n  🍇 🍈 🍉 🍊 🍋 🍌 🍍 🥭 🍎 🍏 🍐 🍑 🍒 🍓 🫐 🥝 🍅 🫒 🥥 🥑 🍆 🥔 🥕 🌽 🌶️ 🌶 🫑 🥒 🥬 🥦 🧄 🧅 🍄 🥜 🫘 🌰 🍞 🥐 🥖 🫓 🥨 🥯 🥞 🧇 🧀 🍖 🍗 🥩 🥓 🍔 🍟 🍕 🌭 🥪 🌮 🌯 🫔 🥙 🧆 🥚 🍳 🥘 🍲 🫕 🥣 🥗 🍿 🧈 🧂 🥫 🍱 🍘 🍙 🍚 🍛 🍜 🍝 🍠 🍢 🍣 🍤 🍥 🥮 🍡 🥟 🥠 🥡 🦀 🦞 🦐 🦑 🦪 🍦 🍧 🍨 🍩 🍪 🎂 🍰 🧁 🥧 🍫 🍬 🍭 🍮 🍯 🍼 🥛 ☕ 🫖 🍵 🍶 🍾 🍷 🍸 🍹 🍺 🍻 🥂 🥃 🫗 🥤 🧋 🧃 🧉 🧊 🥢 🍽️ 🍽 🍴 🥄 🔪 🫙 🏺\n- Travel & Places\n  🌍 🌎 🌏 🌐 🗺️ 🗺 🗾 🧭 🏔️ 🏔 ⛰️ ⛰ 🌋 🗻 🏕️ 🏕 🏖️ 🏖 🏜️ 🏜 🏝️ 🏝 🏞️ 🏞 🏟️ 🏟 🏛️ 🏛 🏗️ 🏗 🧱 🪨 🪵 🛖 🏘️ 🏘 🏚️ 🏚 🏠 🏡 🏢 🏣 🏤 🏥 🏦 🏨 🏩 🏪 🏫 🏬 🏭 🏯 🏰 💒 🗼 🗽 ⛪ 🕌 🛕 🕍 ⛩️ ⛩ 🕋 ⛲ ⛺ 🌁 🌃 🏙️ 🏙 🌄 🌅 🌆 🌇 🌉 ♨️ ♨ 🎠 🛝 🎡 🎢 💈 🎪 🚂 🚃 🚄 🚅 🚆 🚇 🚈 🚉 🚊 🚝 🚞 🚋 🚌 🚍 🚎 🚐 🚑 🚒 🚓 🚔 🚕 🚖 🚗 🚘 🚙 🛻 🚚 🚛 🚜 🏎️ 🏎 🏍️ 🏍 🛵 🦽 🦼 🛺 🚲 🛴 🛹 🛼 🚏 🛣️ 🛣 🛤️ 🛤 🛢️ 🛢 ⛽ 🛞 🚨 🚥 🚦 🛑 🚧 ⚓ 🛟 ⛵ 🛶 🚤 🛳️ 🛳 ⛴️ ⛴ 🛥️ 🛥 🚢 ✈️ ✈ 🛩️ 🛩 🛫 🛬 🪂 💺 🚁 🚟 🚠 🚡 🛰️ 🛰 🚀 🛸 🛎️ 🛎 🧳 ⌛ ⏳ ⌚ ⏰ ⏱️ ⏱ ⏲️ ⏲ 🕰️ 🕰 🕛 🕧 🕐 🕜 🕑 🕝 🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 🕙 🕥 🕚 🕦 🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘 🌙 🌚 🌛 🌜 🌡️ 🌡 ☀️ ☀ 🌝 🌞 🪐 ⭐ 🌟 🌠 🌌 ☁️ ☁ ⛅ ⛈️ ⛈ 🌤️ 🌤 🌥️ 🌥 🌦️ 🌦 🌧️ 🌧 🌨️ 🌨 🌩️ 🌩 🌪️ 🌪 🌫️ 🌫 🌬️ 🌬 🌀 🌈 🌂 ☂️ ☂ ☔ ⛱️ ⛱ ⚡ ❄️ ❄ ☃️ ☃ ⛄ ☄️ ☄ 🔥 💧 🌊\n- Activities\n  🎃 🎄 🎆 🎇 🧨 ✨ 🎈 🎉 🎊 🎋 🎍 🎎 🎏 🎐 🎑 🧧 🎀 🎁 🎗️ 🎗 🎟️ 🎟 🎫 🎖️ 🎖 🏆 🏅 🥇 🥈 🥉 ⚽ ⚾ 🥎 🏀 🏐 🏈 🏉 🎾 🥏 🎳 🏏 🏑 🏒 🥍 🏓 🏸 🥊 🥋 🥅 ⛳ ⛸️ ⛸ 🎣 🤿 🎽 🎿 🛷 🥌 🎯 🪀 🪁 🎱 🔮 🪄 🧿 🪬 🎮 🕹️ 🕹 🎰 🎲 🧩 🧸 🪅 🪩 🪆 ♠️ ♠ ♥️ ♥ ♦️ ♦ ♣️ ♣ ♟️ ♟ 🃏 🀄 🎴 🎭 🖼️ 🖼 🎨 🧵 🪡 🧶 🪢\n- Objects\n  👓 🕶️ 🕶 🥽 🥼 🦺 👔 👕 👖 🧣 🧤 🧥 🧦 👗 👘 🥻 🩱 🩲 🩳 👙 👚 👛 👜 👝 🛍️ 🛍 🎒 🩴 👞 👟 🥾 🥿 👠 👡 🩰 👢 👑 👒 🎩 🎓 🧢 🪖 ⛑️ ⛑ 📿 💄 💍 💎 🔇 🔈 🔉 🔊 📢 📣 📯 🔔 🔕 🎼 🎵 🎶 🎙️ 🎙 🎚️ 🎚 🎛️ 🎛 🎤 🎧 📻 🎷 🪗 🎸 🎹 🎺 🎻 🪕 🥁 🪘 📱 📲 ☎️ ☎ 📞 📟 📠 🔋 🪫 🔌 💻 🖥️ 🖥 🖨️ 🖨 ⌨️ ⌨ 🖱️ 🖱 🖲️ 🖲 💽 💾 💿 📀 🧮 🎥 🎞️ 🎞 📽️ 📽 🎬 📺 📷 📸 📹 📼 🔍 🔎 🕯️ 🕯 💡 🔦 🏮 🪔 📔 📕 📖 📗 📘 📙 📚 📓 📒 📃 📜 📄 📰 🗞️ 🗞 📑 🔖 🏷️ 🏷 💰 🪙 💴 💵 💶 💷 💸 💳 🧾 💹 ✉️ ✉ 📧 📨 📩 📤 📥 📦 📫 📪 📬 📭 📮 🗳️ 🗳 ✏️ ✏ ✒️ ✒ 🖋️ 🖋 🖊️ 🖊 🖌️ 🖌 🖍️ 🖍 📝 💼 📁 📂 🗂️ 🗂 📅 📆 🗒️ 🗒 🗓️ 🗓 📇 📈 📉 📊 📋 📌 📍 📎 🖇️ 🖇 📏 📐 ✂️ ✂ 🗃️ 🗃 🗄️ 🗄 🗑️ 🗑 🔒 🔓 🔏 🔐 🔑 🗝️ 🗝 🔨 🪓 ⛏️ ⛏ ⚒️ ⚒ 🛠️ 🛠 🗡️ 🗡 ⚔️ ⚔ 🔫 🪃 🏹 🛡️ 🛡 🪚 🔧 🪛 🔩 ⚙️ ⚙ 🗜️ 🗜 ⚖️ ⚖ 🦯 🔗 ⛓️ ⛓ 🪝 🧰 🧲 🪜 ⚗️ ⚗ 🧪 🧫 🧬 🔬 🔭 📡 💉 🩸 💊 🩹 🩼 🩺 🩻 🚪 🛗 🪞 🪟 🛏️ 🛏 🛋️ 🛋 🪑 🚽 🪠 🚿 🛁 🪤 🪒 🧴 🧷 🧹 🧺 🧻 🪣 🧼 🫧 🪥 🧽 🧯 🛒 🚬 ⚰️ ⚰ 🪦 ⚱️ ⚱ 🗿 🪧 🪪\n- Symbols\n  🏧 🚮 🚰 ♿ 🚹 🚺 🚻 🚼 🚾 🛂 🛃 🛄 🛅 ⚠️ ⚠ 🚸 ⛔ 🚫 🚳 🚭 🚯 🚱 🚷 📵 🔞 ☢️ ☢ ☣️ ☣ ⬆️ ⬆ ↗️ ↗ ➡️ ➡ ↘️ ↘ ⬇️ ⬇ ↙️ ↙ ⬅️ ⬅ ↖️ ↖ ↕️ ↕ ↔️ ↔ ↩️ ↩ ↪️ ↪ ⤴️ ⤴ ⤵️ ⤵ 🔃 🔄 🔙 🔚 🔛 🔜 🔝 🛐 ⚛️ ⚛ 🕉️ 🕉 ✡️ ✡ ☸️ ☸ ☯️ ☯ ✝️ ✝ ☦️ ☦ ☪️ ☪ ☮️ ☮ 🕎 🔯 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔀 🔁 🔂 ▶️ ▶ ⏩ ⏭️ ⏭ ⏯️ ⏯ ◀️ ◀ ⏪ ⏮️ ⏮ 🔼 ⏫ 🔽 ⏬ ⏸️ ⏸ ⏹️ ⏹ ⏺️ ⏺ ⏏️ ⏏ 🎦 🔅 🔆 📶 📳 📴 ♀️ ♀ ♂️ ♂ ⚧️ ⚧ ✖️ ✖ ➕ ➖ ➗ 🟰 ♾️ ♾ ‼️ ‼ ⁉️ ⁉ ❓ ❔ ❕ ❗ 〰️ 〰 💱 💲 ⚕️ ⚕ ♻️ ♻ ⚜️ ⚜ 🔱 📛 🔰 ⭕ ✅ ☑️ ☑ ✔️ ✔ ❌ ❎ ➰ ➿ 〽️ 〽 ✳️ ✳ ✴️ ✴ ❇️ ❇ ©️ © ®️ ® ™️ ™ #️⃣ #⃣ *️⃣ *⃣ 0️⃣ 0⃣ 1️⃣ 1⃣ 2️⃣ 2⃣ 3️⃣ 3⃣ 4️⃣ 4⃣ 5️⃣ 5⃣ 6️⃣ 6⃣ 7️⃣ 7⃣ 8️⃣ 8⃣ 9️⃣ 9⃣ 🔟 🔠 🔡 🔢 🔣 🔤 🅰️ 🅰 🆎 🅱️ 🅱 🆑 🆒 🆓 ℹ️ ℹ 🆔 Ⓜ️ Ⓜ 🆕 🆖 🅾️ 🅾 🆗 🅿️ 🅿 🆘 🆙 🆚 🈁 🈂️ 🈂 🈷️ 🈷 🈶 🈯 🉐 🈹 🈚 🈲 🉑 🈸 🈴 🈳 ㊗️ ㊗ ㊙️ ㊙ 🈺 🈵 🔴 🟠 🟡 🟢 🔵 🟣 🟤 ⚫ ⚪ 🟥 🟧 🟨 🟩 🟦 🟪 🟫 ⬛ ⬜ ◼️ ◼ ◻️ ◻ ◾ ◽ ▪️ ▪ ▫️ ▫ 🔶 🔷 🔸 🔹 🔺 🔻 💠 🔘 🔳 🔲\n- Flags\n  🏁 🚩 🎌 🏴 🏳️ 🏳 🏳️‍🌈 🏳‍🌈 🏳️‍⚧️ 🏳‍⚧️ 🏳️‍⚧ 🏳‍⚧ 🏴‍☠️ 🏴‍☠ 🇦🇨 🇦🇩 🇦🇪 🇦🇫 🇦🇬 🇦🇮 🇦🇱 🇦🇲 🇦🇴 🇦🇶 🇦🇷 🇦🇸 🇦🇹 🇦🇺 🇦🇼 🇦🇽 🇦🇿 🇧🇦 🇧🇧 🇧🇩 🇧🇪 🇧🇫 🇧🇬 🇧🇭 🇧🇮 🇧🇯 🇧🇱 🇧🇲 🇧🇳 🇧🇴 🇧🇶 🇧🇷 🇧🇸 🇧🇹 🇧🇻 🇧🇼 🇧🇾 🇧🇿 🇨🇦 🇨🇨 🇨🇩 🇨🇫 🇨🇬 🇨🇭 🇨🇮 🇨🇰 🇨🇱 🇨🇲 🇨🇳 🇨🇴 🇨🇵 🇨🇷 🇨🇺 🇨🇻 🇨🇼 🇨🇽 🇨🇾 🇨🇿 🇩🇪 🇩🇬 🇩🇯 🇩🇰 🇩🇲 🇩🇴 🇩🇿 🇪🇦 🇪🇨 🇪🇪 🇪🇬 🇪🇭 🇪🇷 🇪🇸 🇪🇹 🇪🇺 🇫🇮 🇫🇯 🇫🇰 🇫🇲 🇫🇴 🇫🇷 🇬🇦 🇬🇧 🇬🇩 🇬🇪 🇬🇫 🇬🇬 🇬🇭 🇬🇮 🇬🇱 🇬🇲 🇬🇳 🇬🇵 🇬🇶 🇬🇷 🇬🇸 🇬🇹 🇬🇺 🇬🇼 🇬🇾 🇭🇰 🇭🇲 🇭🇳 🇭🇷 🇭🇹 🇭🇺 🇮🇨 🇮🇩 🇮🇪 🇮🇱 🇮🇲 🇮🇳 🇮🇴 🇮🇶 🇮🇷 🇮🇸 🇮🇹 🇯🇪 🇯🇲 🇯🇴 🇯🇵 🇰🇪 🇰🇬 🇰🇭 🇰🇮 🇰🇲 🇰🇳 🇰🇵 🇰🇷 🇰🇼 🇰🇾 🇰🇿 🇱🇦 🇱🇧 🇱🇨 🇱🇮 🇱🇰 🇱🇷 🇱🇸 🇱🇹 🇱🇺 🇱🇻 🇱🇾 🇲🇦 🇲🇨 🇲🇩 🇲🇪 🇲🇫 🇲🇬 🇲🇭 🇲🇰 🇲🇱 🇲🇲 🇲🇳 🇲🇴 🇲🇵 🇲🇶 🇲🇷 🇲🇸 🇲🇹 🇲🇺 🇲🇻 🇲🇼 🇲🇽 🇲🇾 🇲🇿 🇳🇦 🇳🇨 🇳🇪 🇳🇫 🇳🇬 🇳🇮 🇳🇱 🇳🇴 🇳🇵 🇳🇷 🇳🇺 🇳🇿 🇴🇲 🇵🇦 🇵🇪 🇵🇫 🇵🇬 🇵🇭 🇵🇰 🇵🇱 🇵🇲 🇵🇳 🇵🇷 🇵🇸 🇵🇹 🇵🇼 🇵🇾 🇶🇦 🇷🇪 🇷🇴 🇷🇸 🇷🇺 🇷🇼 🇸🇦 🇸🇧 🇸🇨 🇸🇩 🇸🇪 🇸🇬 🇸🇭 🇸🇮 🇸🇯 🇸🇰 🇸🇱 🇸🇲 🇸🇳 🇸🇴 🇸🇷 🇸🇸 🇸🇹 🇸🇻 🇸🇽 🇸🇾 🇸🇿 🇹🇦 🇹🇨 🇹🇩 🇹🇫 🇹🇬 🇹🇭 🇹🇯 🇹🇰 🇹🇱 🇹🇲 🇹🇳 🇹🇴 🇹🇷 🇹🇹 🇹🇻 🇹🇼 🇹🇿 🇺🇦 🇺🇬 🇺🇲 🇺🇳 🇺🇸 🇺🇾 🇺🇿 🇻🇦 🇻🇨 🇻🇪 🇻🇬 🇻🇮 🇻🇳 🇻🇺 🇼🇫 🇼🇸 🇽🇰 🇾🇪 🇾🇹 🇿🇦 🇿🇲 🇿🇼 🏴󠁧󠁢󠁥󠁮󠁧󠁿 🏴󠁧󠁢󠁳󠁣󠁴󠁿 🏴󠁧󠁢󠁷󠁬󠁳󠁿\n\n### 参考链接\n\n- [Full Emoji List, v14.0](https://unicode.org/emoji/charts/full-emoji-list.html)\n- [Unicode Emoji data files](https://unicode.org/Public/emoji/14.0/emoji-test.txt)\n- [😃 Every Emoji by Codepoint](https://emojipedia.org/emoji/)\n- [Emoji ZWJ Sequences: Three Letters, Many Possibilities](https://blog.emojipedia.org/emoji-zwj-sequences-three-letters-many-possibilities/)\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> 特殊Emoji编码的介绍](https://mp.weixin.qq.com/s/yMxUjIsfdQsP6XGj6SNr2w)\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> 没有版权的Emoji表情，居然能被这网站拿来卖钱？](https://mp.weixin.qq.com/s/LHVIyN-_B33rK4e_OTeTlw)\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> 每个 JavaScript 开发者都应该了解的 Unicode](https://mp.weixin.qq.com/s/YIJzT7ymxbxNxXYsV8zpVg)\n- [<i class=\"fa fa-weixin\" aria-hidden=\"true\"></i> 展开操作符：一家人就这么被拆散了](https://mp.weixin.qq.com/s/zI32qR7aZPVHsMH5LX9Vcg)\n","tags":["unicode","emoji"]},{"title":"SQL Server 复制","url":"/2021/09/27/SQL-Server-Replication/","content":"\n前段时间，使用 `SSIS` (`SQL Server Integration Services`，SQL Server 数据集成服务)将数据从 A 同步到 B，基本满足需求。但是有些情况下，比如数据量特别大的时候，就该轮到 `SQL Server Replication` (SQL Server 复制) 出场了。\n\n但是，在开启 `SQL Server Replication` 之前，相应的数据库和表必须满足若干条件。比如：\n\n1. 源数据库和目标数据库能够连通（这是句废话）；\n2. 源表和目标表结构一致；\n3. 源表和目标表必须有主键；\n4. 源数据库和目标数据库支持并 [已启用](https://docs.microsoft.com/en-us/sql/relational-databases/replication/enable-a-remote-publisher-at-a-distributor-sql-server-management-studio?view=sql-server-ver15) `SQL Server Replication`；\n5. 拥有可访问数据库的账户，同时该账户可访问用于保存快照文件的目录（有权限），并可访问源数据库及目标数据库的复制发布者、分发者、订阅者；\n6. 足够的带宽和存储空间。\n\n满足这些条件之后，就可以按照 [官方教程](https://docs.microsoft.com/en-us/sql/relational-databases/replication/configure-publishing-and-distribution?view=sql-server-ver15) 或者 [这篇博客](https://www.sqlshack.com/sql-replication-basic-setup-and-configuration/) 一步一步设置即可。\n\n目前，`SQL Server` 支持 [四种复制模式](https://docs.microsoft.com/en-us/sql/relational-databases/replication/types-of-replication?view=sql-server-ver15)：\n\n1. `Transaction Replication` (事务复制)。一般需要近实时或者较快同步频率时采用；\n2. `Merge Replication` (合并复制)。一般变更在源和目标数据库都会发生时采用这种模式；\n3. `Snapshot Replication` (快照复制)。一般不需要实时同步，只需要目标数据库重现源数据库在某个时间点的情况即可；\n4. `Peer-to-peer Replication` (点对点复制)。基于事务复制，但是支持多个源数据库和多个目标数据库。\n\n好像更新版本的 `SQL Server` 支持额外两种模式：\n\n5. `Bidirectional Replication` (双向复制)。基于事务复制，一般用于源数据库和目标数据库都可以推送/结束数据；\n6. `Updateable Replication` (可更新订阅复制)。基于事务复制，一般用于将一个变更推送到其他发布者然后再次分发。\n\n具体步骤这里就不赘述了，仅记录一下我遇到的问题：\n\n- **硬盘空间不足**。因为每次复制都需要创建快照，所以可能会遇到“`There is not enough space on the disk`”错误。简单，记得定期清理一下快照文件夹下的文件。\n\n- **发布者需要重新初始化**。因为某些未知错误，需要定期重新初始化 `SQL Server Replication` 发布者。\n\n### 参考链接\n\n- [<i class=\"fa fa-microsoft\" aria-hidden=\"true\"></i>SQL Server Replication](https://docs.microsoft.com/en-us/sql/relational-databases/replication/sql-server-replication?view=sql-server-ver15)\n- [SQL Replication: Basic setup and configuration](https://www.sqlshack.com/sql-replication-basic-setup-and-configuration/)\n","tags":["sql server","replication"]},{"title":"海贼王恶魔果实（翻译）","url":"/2021/08/26/one-piece-devil-fruit-translation/","content":"\n忽然想起，很久以前（大概 2016 年 9 月吧），我翻译过 [Fandom](https://onepiece.fandom.com) 网站（以前的网址是 https://onepiece.wikia.com ）上一篇关于海贼王恶魔果实的文章，放在 [Github](https://github.com/ZXS66/articles/blob/master/20160906_Devil%20Fruit.md) 上面吃灰了。不如搬来 [码云](https://gitee.com)，以后查看的时候还更方便。\n\n_20220723更新：重新迁移回 <i class=\"fa fa-github\" aria-hidden=\"true\"></i>_\n\n**声明：本文是翻译，不是原创。如果你发现有任何不对，请以 [原文](https://onepiece.fandom.com/wiki/Devil_Fruit) 为准。**\n\n正篇开始！*（原文部分内容已过期，此翻译已更新至 2021 年 8 月）*\n\n-----\n\n# 恶魔果实\n\n这是第 196 篇精选文章。\n\n“恶魔果实”已被精选，意味着它被选为感兴趣文章。\n\n关于“恶魔果实”歌曲，请查看 [恶魔果实(歌曲)](https://onepiece.fandom.com/wiki/Akuma_no_Mi_(song))。\n\n![恶魔果实](https://static.wikia.nocookie.net/onepiece/images/9/92/Devil_Fruit_Infobox.png)\n\n| | |\n|-----|------|\n| 日文名 | 悪魔の実 |\n| 罗马名 | Akuma no Mi |\n| 正式英文名 | Devil Fruit; Curséd Fruit (4Kids); Devil's Fruit (Odex) |\n| 首次出现 | [第一章](https://onepiece.fandom.com/wiki/Chapter_1); [第一集](https://onepiece.fandom.com/wiki/Episode_1) |\n| 使用者 | 各种各样的人、动物以及物体 |\n\n**恶魔果实** 是散落于 [这个世界](https://onepiece.fandom.com/wiki/World) 上的一些神秘又有特点的水果，可以给予其食用者永久的超能力，相应地，他们也将永远丧失游泳的能力。\n\n总的来说，恶魔果实包着含数百种，从普通（看起来）到本身就具有大规模破坏力，不同的力量。它们大致可以分为三类：[超人系](https://onepiece.fandom.com/wiki/Paramecia)，[自然系](https://onepiece.fandom.com/wiki/Logia)，[动物系](https://onepiece.fandom.com/wiki/Zoan)。\n\n恶魔果实赋予了世界上众多重要人物力量，特别是 [三大战力](https://onepiece.fandom.com/wiki/Three_Great_Powers)。基于此，再加上它们一般都很稀有，使得它们备受追捧。单颗果实就可能价值几亿 [贝利](https://onepiece.fandom.com/wiki/Belly)。经过广泛的努力，现在可以大规模生产用于战争的 [人造恶魔果实](https://onepiece.fandom.com/wiki/Artificial_Devil_Fruit)。除 [此](https://onepiece.fandom.com/wiki/Marshall_D._Teach) 之外，一个人只能得到一颗恶魔果实的能力并存活下来。\n\n据尾田所说，在将来的某个时候，\"某专家\" 将会解释所有恶魔果实背后复杂的机制。<sup id=\"cite-1\">[[1]](#footnote-1)</sup>\n\n## 目录\n\n- [恶魔果实](#恶魔果实)\n  - [目录](#目录)\n  - [概述](#概述)\n    - [成长](#成长)\n      - [自然恶魔果实](#自然恶魔果实)\n      - [人造恶魔果实](#人造恶魔果实)\n      - [图库](#图库)\n      - [恶魔果实轮回](#恶魔果实轮回)\n    - [识别](#识别)\n      - [恶魔果实种类](#恶魔果实种类)\n        - [官方的](#官方的)\n        - [非官方的](#非官方的)\n      - [恶魔果实数量](#恶魔果实数量)\n    - [熟练程度](#熟练程度)\n    - [觉醒](#觉醒)\n      - [动物系](#动物系)\n      - [超人系](#超人系)\n  - [力量和弱点](#力量和弱点)\n    - [食用收益](#食用收益)\n    - [食用顺序](#食用顺序)\n      - [水的克制](#水的克制)\n    - [高阶和不可预测性](#高阶和不可预测性)\n      - [已确认的高阶恶魔果实](#已确认的高阶恶魔果实)\n      - [已展示的不可预测性](#已展示的不可预测性)\n  - [神话及误解](#神话及误解)\n  - [研究](#研究)\n    - [非生命体恶魔果实能力者](#非生命体恶魔果实能力者)\n    - [人造恶魔果实](#人造恶魔果实-1)\n    - [蓝波球](#蓝波球)\n  - [早期海贼王](#早期海贼王)\n  - [漫画和动画的影响](#漫画和动画的影响)\n  - [翻译和配音问题](#翻译和配音问题)\n  - [杂项](#杂项)\n    - [基于 SBS 的杂项](#基于-sbs-的杂项)\n  - [参考链接](#参考链接)\n  - [站点导航](#站点导航)\n    - [恶魔果实](#恶魔果实-1)\n    - [恶魔果实能力者](#恶魔果实能力者)\n    - [科学家](#科学家)\n \n## 概述\n\n> 我听说恶魔果实是海之恶魔的化身。如果你吃了它，你将得到恶魔的能力，但你将被大海厌恶，你将不能游泳。\n> <cite>[香克斯](https://onepiece.fandom.com/wiki/Shanks) <sup id=\"cite-2\">[[2]](#footnote-2)</sup></cite>\n\n![恶魔果实力量产生的巨浪](https://static.wikia.nocookie.net/onepiece/images/6/6c/Whitebeard%27s_Tsunamis_at_Marineford.png)\n\n一颗恶魔果实，在被食用之后，他们很快就会意识到，它会赋予食用者一种超能力或者特殊属性。吃过恶魔果实获得力量的人称为恶魔果实能力者（能力者 Nōryoku-sha，直译“超级使用者”或“超能力者”）。<sup id=\"cite-3\">[[3]](#footnote-3)</sup>世界上有超过 100 颗不同的恶魔果实，但 *（译者：同一时间）* 仅存在一颗恶魔果实<sup id=\"cite-4\">[[4]](#footnote-4)</sup><sup id=\"cite-1\">[[1]](#footnote-1)</sup>。此外，众所周知，所有的恶魔果实味道非常糟糕，会导致食用者永久失去游泳的能力。<sup id=\"cite-5\">[[5]](#footnote-5)</sup>\n\n目前尚不清楚恶魔果实究竟是什么，他们从哪里来，他们到底如何工作。我们知道的是，它们的内在力量会影响食用者的 [血统因子](https://onepiece.fandom.com/wiki/Lineage_Factor)。<sup id=\"cite-6\">[[6]](#footnote-6)</sup>果实有不同的形状和颜色，尽管迄今为止看到的所有的恶魔果实都具有漩涡痕迹或图案。<sup id=\"cite-7\">[[7]](#footnote-7)</sup>唯一已知的例外是 [人造恶魔果实](https://onepiece.fandom.com/wiki/Artificial_Devil_Fruit)，其拥有有环形图案<sup id=\"cite-8\">[[8]](#footnote-8)</sup>。已知的最古老的恶魔果实能力者是 [光月时](https://onepiece.fandom.com/wiki/Kozuki_Toki)，出生于 800 年前，意味着恶魔果实存在于这个世界至少八个世纪。<sup id=\"cite-9\">[[9]](#footnote-9)</sup>\n\n![仅需一口，即可成为恶魔果实能力者](https://static.wikia.nocookie.net/onepiece/images/3/31/Sabo_Eating_the_Mera_Mera_no_Mi.png)\n\n仅需一口，食用者即可获得恶魔果实的能力，这之后恶魔果实成为一个简单的、无用的、难吃的水果。虽说如此，大部分的恶魔果实能力者吃完了整个水果，因为他们显然不知道这个真相。<sup id=\"cite-10\">[[10]](#footnote-10)</sup>此外，食用者在吞下恶魔果实之后立即获得恶魔果实的能力和缺点，无需等待恶魔果实被消化。<sup id=\"cite-11\">[[11]](#footnote-11)</sup><sup id=\"cite-12\">[[12]](#footnote-12)</sup>\n\n一个人在他的整个生命当中只能吃掉一颗恶魔果实；任何企图获得第二个恶魔果实能力的人将会导致食用者的身体被撕裂几乎不留痕迹的程度，最终导致他们的死亡。原因目前为止未知；有传言说每颗恶魔果实里面住着一个真正的恶魔，在被食用后转移到恶魔果实能力者体内，如果在同一个身体内遇到另一个恶魔果实里的恶魔，它们就会打架。但这个谣言已被科学家揭穿。<sup id=\"cite-13\">[[13]](#footnote-13)</sup>\n\n值得注意的是，有一种方法可以从已故恶魔果实能力者的尸体中窃取恶魔果实的力量。这个方法具体细节目前未知。唯一知道这个方法的是 [马歇尔·D·蒂奇](https://onepiece.fandom.com/wiki/Marshall_D._Teach) 和 [其一伙](https://onepiece.fandom.com/wiki/Marshall_D._Teach)。\n\n![恶魔果实第一次被摩根描述时的样子](https://static.wikia.nocookie.net/onepiece/images/1/10/The_Devil_Fruits_as_described_by_Morgan.png)\n\n恶魔果实据说是海之恶魔的果实，其能力的秘密被隐藏在 [伟大航路](https://onepiece.fandom.com/wiki/Grand_Line)。因为遇到它们非常罕见（特别是在伟大航路之外），有一些谣言流传开来，让一些事情更加难以区分到底是真是假。有些人甚至认为它们只是神话，直到真正看到它们。\n\n普通人对他们是什么或者它们能干什么完全不知道或者只知道一点点；那些生活在与世隔离的国家中的人们也是如此更是如此，即便在伟大航路上。比如 [和之国](https://onepiece.fandom.com/wiki/Wano_Country)，包括 [鱼人岛](https://onepiece.fandom.com/wiki/Fish-Man_Island) 的 [人鱼公主](https://onepiece.fandom.com/wiki/Shirahoshi)，他们都不知道恶魔果实，反而相信这些力量是诅咒<sup id=\"cite-14\">[[14]](#footnote-14)</sup>或巫术。<sup id=\"cite-15\">[[15]](#footnote-15)</sup>相应地，恶魔果实可能会让能力者被当作“怪胎”并被抛弃。因为某些能力被认为太过奇怪或者吓人，正常无法接受。<sup id=\"cite-16\">[[16]](#footnote-16)</sup>在许多情况下，恶魔果实能力者被认为是完全不同的种族，并且有充分的理由。\n\n很多恶魔果实能力者有他们自己的名称，比如橡胶人(ゴム人間 Gomu Ningen<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>)、岩浆人 (マグマ人間 Maguma Ningen<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>)或者驯鹿人 (人間トナカイ Ningen Tonakai<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>)。和这些例子一样，果实名称通常是其能力的类型（动物系恶魔果实，则是最原始的动物）。唯一例外是 [影影果实](https://onepiece.fandom.com/wiki/Kage_Kage_no_Mi) 能力者，其被称为影之支配者 (影の支配者 Kage no Shihaisha<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>)。\n\n![恶魔果实能力可以延伸到能力者衣服](https://static.wikia.nocookie.net/onepiece/images/e/e1/Caribou_Smothers_Drip.png)\n\n值得注意的是，恶魔果实能力一般可以延伸到能力者所穿的衣服。超人系果实能力者能够自动随着身体一起改变他们穿的衣服（比如，当路飞在三档的时候，他的胸围急剧膨胀，而路飞的衣服从未撕裂。Mr. 1 的裤子和他的衣服一起变成刀片，等等），动物系果实能力者的衣服会在其变身后变成相同的比例（乔巴的帽子在其怪物强化模式下会变大，加布拉德的鞋子在人兽混合模式下被拉长），而自然系果实能力者随着他们自身而变换他们的衣服（及附属物）成他们自身的元素。[尾田](https://onepiece.fandom.com/wiki/Eiichiro_Oda) 曾在 [SBS](https://onepiece.fandom.com/wiki/SBS) 中解释，如果他把这些设计成现实中的样子，漫画中将会出现太多不必要的的裸体。<sup id=\"cite-17\">[[17]](#footnote-17)</sup>这条规则也适用于假肢。一个例子是奎因的人造手臂，当他变成腕龙形态时可以变换腕龙的腿。<sup id=\"cite-18\">[[18]](#footnote-18)</sup>\n然而，有一些能力者好像并未遵循此规则，比如 [波妮](https://onepiece.fandom.com/wiki/Jewelry_Bonney)，她的衣服并没有根据其能力等比例变。<sup id=\"cite-19\">[[19]](#footnote-19)</sup>\n\n有意思的是，虽然食用恶魔果实会影响食用者的基因图谱，但它不会导致能力者的孩子异常。一个例子是夏洛特家族；夏洛特玲玲作为族长，拥有恶魔果实能力，但她的子女们却没有一个是天生拥有其能力。此外，虽然父母不能食用第二颗恶魔果实，但是如果机会出现，恶魔果实能力者的孩子（尚未拥有恶魔果实能力）可以获得恶魔果实能力而不死亡。\n\n恶魔果实是当今世界上一些最强英雄的力量来源，包括 [超新星](https://onepiece.fandom.com/wiki/Worst_Generation)，[海军](https://onepiece.fandom.com/wiki/Marines)[大将](https://onepiece.fandom.com/wiki/Admiral)，[七武海](https://onepiece.fandom.com/wiki/Seven_Warlords_of_the_Sea)，以及至少三个 [四皇](https://onepiece.fandom.com/wiki/Four_Emperors)，[黑胡子](https://onepiece.fandom.com/wiki/Marshall_D._Teach)、[大妈](https://onepiece.fandom.com/wiki/Charlotte_Linlin) 和 [凯多](https://onepiece.fandom.com/wiki/Kaidou)。\n\n由于其强大的力量，恶魔果实受到了 [世界政府](https://onepiece.fandom.com/wiki/World_Government) 和 [地下世界](https://onepiece.fandom.com/wiki/Underworld) 以及其他各方的高度追捧。如果将之售卖，他们可以得到超过 100,000,000<img src=\"/images/one-piece/Beli.png\" alt=\"贝利\" class=\"inline\"/>，<sup id=\"cite-2\">[[2]](#footnote-2)</sup>而且恶魔果实能力者自身也可以以市场价被当作 [奴隶](https://onepiece.fandom.com/wiki/Slavery) 出售。<sup id=\"cite-20\">[[20]](#footnote-20)</sup>当然，不同果实有不同的价格，取决于其赋予的能力。比如 [手术果实](https://onepiece.fandom.com/wiki/Ope_Ope_no_Mi) 在 [黑市](https://onepiece.fandom.com/wiki/Underworld) 上被卖到 5,000,000,000<img src=\"/images/one-piece/Beli.png\" alt=\"贝利\" class=\"inline\"/>。<sup id=\"cite-21\">[[21]](#footnote-21)</sup>\n\n![世界最强组织之一，拥有多名恶魔果实能力者](https://static.wikia.nocookie.net/onepiece/images/2/25/Big_Mom_Pirates_Arrive_at_Wano.png)\n\n相比于 [四大海域](https://onepiece.fandom.com/wiki/Blue_Sea)，恶魔果实在伟大航路相对更加常见。<sup id=\"cite-22\">[[22]](#footnote-22)</sup>一个典型的伟大航路海贼团通常是以恶魔果实能力者的 [船长](https://onepiece.fandom.com/wiki/Pirate_Captain) 作为核心（比如 [贝拉米海贼团](https://onepiece.fandom.com/wiki/Bellamy_Pirates)、[瓦波尔海贼团](https://onepiece.fandom.com/wiki/Wapol_Pirates) 或者 [福克西海贼团](https://onepiece.fandom.com/wiki/Foxy_Pirates)），而更强一点的海贼团和组织通常拥有多名恶魔果实能力者（比如 [白胡子海贼团](https://onepiece.fandom.com/wiki/Whitebeard_Pirates)、[大妈海贼团](https://onepiece.fandom.com/wiki/Big_Mom_Pirates)、[百兽海贼团](https://onepiece.fandom.com/wiki/Beasts_Pirates)、[堂吉柯德海贼团](https://onepiece.fandom.com/wiki/Donquixote_Pirates)、[巴洛克工作室](https://onepiece.fandom.com/wiki/Baroque_Works) 或者 [海军](https://onepiece.fandom.com/wiki/Marines)）。两个四皇（[黑胡子](https://onepiece.fandom.com/wiki/Blackbeard) 和 [凯多](https://onepiece.fandom.com/wiki/Kaido)）甚至走得更远，用他们独有的方法收集尽可能多的恶魔果实。事实上，自进入伟大航路起，基本上路飞碰见的每个主要的对手都有恶魔果实能力，然而在 [东海](https://onepiece.fandom.com/wiki/East_Blue) 仅碰见了两个（不包括在相遇之后食用恶魔果实的 [艾薇达](https://onepiece.fandom.com/wiki/Alvida)）。<sup id=\"cite-23\">[[23]](#footnote-23)</sup><sup id=\"cite-24\">[[24]](#footnote-24)</sup>\n\n### 成长\n\n#### 自然恶魔果实\n\n恶魔果实存在一个轮回；当恶魔果实能力者死亡时，他们的能力会在这个世界上某个随机的位置重生为一颗新的果实。这种能力不是从植物中长出来，而是简单地在另一个类似的水果中重生，然后变成有问题的恶魔果实，正如 [Smiley](https://onepiece.fandom.com/wiki/Smiley) “死亡”时，其 [蝾螈果实·美西螈形态](https://onepiece.fandom.com/wiki/Sara_Sara_no_Mi,_Model:_Axolotl) 能力又在附近的苹果中重生。\n\n当这种情况发生时，被强化的果实会改变外观，果实的一些特点会变成恶魔果实，茎会变得比没有赋予能力之前的果实更卷曲。它还会改变颜色并呈现出恶魔果实已知的特有的螺旋图案。<sup id=\"cite-25\">[[25]](#footnote-25)</sup>\n\n#### 人造恶魔果实\n\n[SMILE](https://onepiece.fandom.com/wiki/SMILE) 恶魔果实已被证实可以在树上生长，在 [唐吉可德海贼团](https://onepiece.fandom.com/wiki/Donquixote_Pirates) 的胁迫下，由 [咚塔塔王国](https://onepiece.fandom.com/wiki/Tontatta_Kingdom) 的 [小人族](https://onepiece.fandom.com/wiki/Dwarves) 培育。不同于正常的恶魔果实，SMILE 是由正常的水果转换而成。<sup id=\"cite-26\">[[26]](#footnote-26)</sup>\n\n#### 图库\n\n| | | |\n|--------|---------|------|\n| ![恶魔果实轮回圈](https://static.wikia.nocookie.net/onepiece/images/f/f3/Devil_Fruit_Reincarnation.png) | ![蝾螈果实·美西螈形态重生](https://static.wikia.nocookie.net/onepiece/images/b/b5/A_Devil_Fruit_is_Created.gif) | ![成长中的 SMILE 果实](https://static.wikia.nocookie.net/onepiece/images/d/d7/Incomplete_SMILE_Fruits.png) |\n\n#### 恶魔果实轮回\n\n| 恶魔果实 | 上一任能力者 | 介绍 | 状态 |\n|-------|---------|-----|--------|\n| [魂魂果实](https://onepiece.fandom.com/wiki/Soru_Soru_no_Mi) | [加尔默罗修女](https://onepiece.fandom.com/wiki/Carmel) | 神秘消失，已确认死亡 | [夏洛特·玲玲](https://onepiece.fandom.com/wiki/Charlotte_Linlin)通过未知手段获得能力 |\n| [模仿果实](https://onepiece.fandom.com/wiki/Mane_Mane_no_Mi) | [黑炭·暮蝉](https://onepiece.fandom.com/wiki/Kurozumi_Higurashi) | 被 [凯多](https://onepiece.fandom.com/wiki/Kaidou) 杀害 | 果实最终被 [本萨姆](https://onepiece.fandom.com/wiki/Bentham) 获得并吃下 |\n| [屏障果实](https://onepiece.fandom.com/wiki/Bari_Bari_no_Mi) | [黑炭·蝉丸](https://onepiece.fandom.com/wiki/Kurozumi_Semimaru) | 死因未知 | 果实最终被 [巴托洛米奥](https://onepiece.fandom.com/wiki/Bartolomeo) 获得并吃下 |\n| [手术果实](https://onepiece.fandom.com/wiki/Ope_Ope_no_Mi) | 无名 [医生](https://onepiece.fandom.com/wiki/Doctor) | 死因未知 | 果实最终被 [巴雷鲁斯](https://onepiece.fandom.com/wiki/Diez_Barrels) 获得，被 [唐吉可德·罗西南迪](https://onepiece.fandom.com/wiki/Donquixote_Rosinante) 窃取并强喂给 [托拉法尔加·罗](https://onepiece.fandom.com/wiki/Trafalgar_D._Water_Law) |\n| [时时果实](https://onepiece.fandom.com/wiki/Toki_Toki_no_Mi) | [光月时](https://onepiece.fandom.com/wiki/Kozuki_Toki) | 被 [百兽海贼团](https://onepiece.fandom.com/wiki/Beasts_Pirates) 射杀 | 未知状态 |\n| [静静果实](https://onepiece.fandom.com/wiki/Nagi_Nagi_no_Mi) | [唐吉可德·罗西南迪](https://onepiece.fandom.com/wiki/Donquixote_Rosinante) | 被 [唐吉可德·多弗朗明哥](https://onepiece.fandom.com/wiki/Donquixote_Doflamingo) 杀害 | 未知状态 |\n| [烧烧果实](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi) | [波特卡斯·D·艾斯](https://onepiece.fandom.com/wiki/Portgas_D._Ace) | 被 [萨卡斯基](https://onepiece.fandom.com/wiki/Sakazuki) 所杀 | 果实被 [唐吉可德·多弗朗明哥](https://onepiece.fandom.com/wiki/Donquixote_Doflamingo) 获得，作为 [斗牛竞技场](https://onepiece.fandom.com/wiki/Corrida_Colosseum) 的奖品，并最终被 [萨博](https://onepiece.fandom.com/wiki/Sabo) 赢取并吃下 |\n| [震震果实](https://onepiece.fandom.com/wiki/Gura_Gura_no_Mi) | [爱德华·纽盖特](https://onepiece.fandom.com/wiki/Edward_Newgate) | 被 [黑胡子海贼团](https://onepiece.fandom.com/wiki/Blackbeard_Pirates) 杀害 | [马歇尔·D·蒂奇](https://onepiece.fandom.com/wiki/Marshall_D._Teach)通过未知手段获得能力 |\n| [蝾螈果实·美西螈形态](https://onepiece.fandom.com/wiki/Sara_Sara_no_Mi,_Model:_Axolotl) | [Smiley](https://onepiece.fandom.com/wiki/Smiley) | 吞下糖果后变成 [死亡国度](https://onepiece.fandom.com/wiki/Shinokuni) | 最后出现于 [庞克 哈萨德](https://onepiece.fandom.com/wiki/Punk_Hazard) |\n| [雪雪果实](https://onepiece.fandom.com/wiki/Yuki_Yuki_no_Mi) | [莫奈](https://onepiece.fandom.com/wiki/Monet) | 被 [凯撒·库朗](https://onepiece.fandom.com/wiki/Caesar_Clown) 错害 | 未知状态 |\n| [熔融果实](https://onepiece.fandom.com/wiki/Gutsu_Gutsu_no_Mi) | [比尔](https://onepiece.fandom.com/wiki/Bill)<sup title=\"非官方\">≠</sup> | 死于 [银矿岛](https://onepiece.fandom.com/wiki/Silver_Mine) 被毁时 | 未知状态 |\n| [透明果实](https://onepiece.fandom.com/wiki/Suke_Suke_no_Mi) | [阿布萨罗姆](https://onepiece.fandom.com/wiki/Absalom) | 被 [黑胡子海贼团](https://onepiece.fandom.com/wiki/Blackbeard_Pirates) 杀害 | 果实被 [希留](https://onepiece.fandom.com/wiki/Shiryu) 获得并吃下 |\n\n*＊备注：虽然 [迷你果实](https://onepiece.fandom.com/wiki/Mini_Mini_no_Mi) 和 [熔融果实](https://onepiece.fandom.com/wiki/Gutsu_Gutsu_no_Mi) 被两个不同能力者使用（ [布鲁厄](https://onepiece.fandom.com/wiki/Blyue) 和 [莉莉·恩斯特马克](https://onepiece.fandom.com/wiki/Lily_Enstomach) 吃下迷你果实，[兰博·布基尼](https://onepiece.fandom.com/wiki/Lambor_Bukini) 和 [比尔](https://onepiece.fandom.com/wiki/Bill) 吃下熔融果实），但这并不代表着他们中谁死亡了然后果实重生了，因为这些能力者和果实都是非官方的*\n\n### 识别\n\n> 通过果实赋予的能力，我们可以知道它的名字，但是我们获得何种能力则完全看运气。\n> <cite>卡库评论他和卡莉法的未知恶魔果实 <sup id=\"cite-27\">[[27]](#footnote-27)</sup></cite>\n\n![恶魔果实图鉴](https://static.wikia.nocookie.net/onepiece/images/1/16/Devil_Fruit_Encyclopedia.png)\n\n有一本 **恶魔果实图鉴**（悪魔の実図鑑 *Akuma no Mi Zukan* [?](https://en.wikipedia.org/wiki/Help:Japanese)） 列举了所有恶魔果实的名字和能力。然而，它们当中只有少部分有插图，意味着大部分恶魔果实不能通过外观识别。比如，[橡胶果实](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi) 和 [暗暗果实](https://onepiece.fandom.com/wiki/Yami_Yami_no_Mi) 就有图片，在食用之前就可以辨别出来，<sup id=\"cite-28\">[[28]](#footnote-28)</sup><sup id=\"cite-29\">[[29]](#footnote-29)</sup>而 [泡泡果实 卡莉法](https://onepiece.fandom.com/wiki/Ushi_Ushi_no_Mi,_Model:_Giraffe) 和 [牛牛果实·长颈鹿形态](https://onepiece.fandom.com/wiki/Awa_Awa_no_Mi) 则没有，只能通过被赋予的能力识别。<sup id=\"cite-27\">[[27]](#footnote-27)</sup>这只是意味着图鉴中的信息是不完整的，并且还有果实的属性并未记载。\n\n有一个人知道如何使用这本图鉴，他就是 [黑胡子](https://onepiece.fandom.com/wiki/Marshall_D._Teach)，根据他的研究和图鉴提供的插图，他记下了暗暗果实的形状。<sup id=\"cite-29\">[[29]](#footnote-29)</sup>[文斯莫克家族](https://onepiece.fandom.com/wiki/Vinsmoke_Family) 也有一份图鉴副本，<sup id=\"cite-30\">[[30]](#footnote-30)</sup>[山治](https://onepiece.fandom.com/wiki/Sanji) 就是通过它对 [透明果实](https://onepiece.fandom.com/wiki/Suke_Suke_no_Mi) 非常感兴趣。<sup id=\"cite-31\">[[31]](#footnote-31)</sup>\n\n#### 恶魔果实种类\n\n所有恶魔果实分为三类。当前所有已命名的果实中，仅有 [蛋蛋男爵](https://onepiece.fandom.com/wiki/Tamago) 的 [蛋蛋果实](https://onepiece.fandom.com/wiki/Tama_Tama_no_Mi) 让他从蛋中重生为鸡，以及另两个非官方恶魔果实不清楚其分类。\n\n- [超人系](https://onepiece.fandom.com/wiki/Paramecia) - 三种类型中最常见的一种，超人系恶魔果实赋予能力者超人的能力（不同于兽型或者元素化），比如 [产生冲击波](https://onepiece.fandom.com/wiki/Gura_Gura_no_Mi)，[锁定目标](https://onepiece.fandom.com/wiki/Mato_Mato_no_Mi)。超人系恶魔果实可以改变能力者的身体机能，比如 [橡胶](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi) 或者 [刀刃](https://onepiece.fandom.com/wiki/Supa_Supa_no_Mi)。有些超人系恶魔果实能力者可以影响人、物体、以及周围环境，比如 [使物体漂浮](https://onepiece.fandom.com/wiki/Fuwa_Fuwa_no_Mi) 或者 [把人变成玩具](https://onepiece.fandom.com/wiki/Hobi_Hobi_no_Mi)。最后，有一些能力者可以操纵和制造某种物质，比如 [蜡](https://onepiece.fandom.com/wiki/Doru_Doru_no_Mi) 和 [毒](https://onepiece.fandom.com/wiki/Doku_Doku_no_Mi)。\n\n| | | | |\n|-------|---------|-----|-----|\n| ![](https://static.wikia.nocookie.net/onepiece/images/1/12/Gomu_Gomu_no_Mi_Infobox.png) [橡胶果实](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/9/9c/Bara_Bara_no_Mi_Infobox.png) [四分五裂果实](https://onepiece.fandom.com/wiki/Bara_Bara_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/e/e9/Sube_Sube_no_Mi_Infobox.png) [滑滑果实](https://onepiece.fandom.com/wiki/Sube_Sube_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/1/1a/Bomu_Bomu_no_Mi_Infobox.png) [爆炸果实](https://onepiece.fandom.com/wiki/Bomu_Bomu_no_Mi) |\n| ![](https://static.wikia.nocookie.net/onepiece/images/8/89/Kiro_Kiro_no_Mi_Infobox.png) [轻飘飘果实](https://onepiece.fandom.com/wiki/Kiro_Kiro_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/2/21/Hana_Hana_no_Mi_Infobox.png) [花花果实](https://onepiece.fandom.com/wiki/Hana_Hana_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/5/5f/Doru_Doru_no_Mi_Infobox.png) [蜡烛果实](https://onepiece.fandom.com/wiki/Doru_Doru_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/c/c6/Baku_Baku_no_Mi_Infobox.png) [吞吞果实](https://onepiece.fandom.com/wiki/Baku_Baku_no_Mi) |\n| ![](https://static.wikia.nocookie.net/onepiece/images/a/ae/Ito_Ito_no_Mi_Infobox.png) [线线果实](https://onepiece.fandom.com/wiki/Ito_Ito_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/5/51/Awa_Awa_no_Mi_Infobox.png) [泡泡果实](https://onepiece.fandom.com/wiki/Awa_Awa_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/3/3b/Yomi_Yomi_no_Mi_Infobox.png) [黄泉果实](https://onepiece.fandom.com/wiki/Yomi_Yomi_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/7/7b/Kage_Kage_no_Mi_Infobox.png) [影影果实](https://onepiece.fandom.com/wiki/Kage_Kage_no_Mi) |\n| ![](https://static.wikia.nocookie.net/onepiece/images/0/0e/Ope_Ope_no_Mi_Infobox.png) [手术果实](https://static.wikia.nocookie.net/onepiece/images/0/0e/Ope_Ope_no_Mi_Infobox.png) | ![](https://static.wikia.nocookie.net/onepiece/images/b/b4/Fude_Fude_no_Mi_Infobox.png) [笔笔果实](https://onepiece.fandom.com/wiki/Fude_Fude_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/d/da/Goru_Goru_no_Mi_Infobox.png) [黄金果实](https://onepiece.fandom.com/wiki/Goru_Goru_no_Mi)<sup title=\"非官方\">≠</sup> | ![](https://static.wikia.nocookie.net/onepiece/images/d/dc/Bijo_Bijo_no_Mi_Infobox.png) [幻影果实](https://onepiece.fandom.com/wiki/Bijo_Bijo_no_Mi)<sup title=\"非官方\">≠</sup> |\n| ![](https://static.wikia.nocookie.net/onepiece/images/a/a6/Gasha_Gasha_no_Mi_Infobox.png) [合体果实](https://onepiece.fandom.com/wiki/Gasha_Gasha_no_Mi)<sup title=\"非官方\">≠</sup> |\n\n- [自然系](https://onepiece.fandom.com/wiki/Logia) - 三种恶魔果实中最罕见且最强大的一种，自然系恶魔果实可以让能力者创造、控制和转换成他们的身体成自然元素，比如 [🧊冰](https://onepiece.fandom.com/wiki/Hie_Hie_no_Mi)、[沼泽](https://onepiece.fandom.com/wiki/Numa_Numa_no_Mi)、[烟](https://onepiece.fandom.com/wiki/Moku_Moku_no_Mi)、[🔥火](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi) 或者 [黑暗](https://onepiece.fandom.com/wiki/Yami_Yami_no_Mi)。这种元素转换能够有效的让能力者无形化，即使被破坏成多块，依然允许能力者维持控制他们自己的身体。同时他们也获得了和元素相关的所有能力，比如 [沙子](https://onepiece.fandom.com/wiki/Suna_Suna_no_Mi) 可以吸水，[⚡闪电](https://onepiece.fandom.com/wiki/Goro_Goro_no_Mi) 可以穿过导电物体。\n\n| | | | |\n|-------|---------|-----|-----|\n| ![](https://static.wikia.nocookie.net/onepiece/images/8/8d/Moku_Moku_no_Mi_Infobox.png) [烟烟果实](https://onepiece.fandom.com/wiki/Moku_Moku_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/7/7d/Suna_Suna_no_Mi_Infobox.png) [沙沙果实](https://onepiece.fandom.com/wiki/Suna_Suna_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/8/8c/Mera_Mera_no_Mi_Infobox.png) [烧烧果实](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/f/f5/Yami_Yami_no_Mi_Infobox.png) [暗暗果实](https://onepiece.fandom.com/wiki/Yami_Yami_no_Mi) |\n\n- [动物系](https://onepiece.fandom.com/wiki/Zoan) - 动物系恶魔果实能力者拥有变身成动物的能力，也可以变身成人兽型态（他们本来的物种以及果实允许他们变身的物种）。一项近期的科学技术允许动物系恶魔果实和物体结合，让物体拥有生命和一般的动物系变身能力。肉食性动物系能力者更适合战斗。动物系果实有许多子分类，包括：\n  - [古代种动物系](https://onepiece.fandom.com/wiki/Zoan#Ancient_Zoan) - 动物系果实可以让能力者变身成一种已灭绝物种，比如恐龙。古代种动物系很稀有，看起来比一般的动物系要强大\n  - [幻兽种动物系](https://onepiece.fandom.com/wiki/Zoan#Mythical_Zoan) - 动物系果实可以让能力者变身成神秘生物，比如龙或凤凰。幻兽种动物往往具有特殊力量，就像凤凰可以产生具有治愈能力的火焰。幻兽种动物系是最罕见的恶魔果实种类，甚至比自然系还稀有。\n  - [人造动物系](https://onepiece.fandom.com/wiki/SMILE) 人造动物系果实，使得能力者永久具有动物特性；尽管在极少数的情况下，能力者可以随意变身。人造动物系果实有 10% 的成功率，而另外的 90%，不仅仅不能获得动物特征以及失去游泳的能力，同时也被剥夺了表达负面情绪的能力，只能微笑，不管他们真实感受是什么。人造恶魔果实由 [贝加庞克](https://onepiece.fandom.com/wiki/Vegapunk) 和 [唐吉可德·多弗朗明哥](https://onepiece.fandom.com/wiki/Donquixote_Doflamingo) 开发。<sup id=\"cite-32\">[[32]](#footnote-32)</sup></cite><sup id=\"cite-33\">[[33]](#footnote-33)</sup></cite>\n\n| | | | |\n|-------|---------|-----|-----|\n| ![](https://static.wikia.nocookie.net/onepiece/images/b/bf/Ushi_Ushi_no_Mi%2C_Model_Bison_Infobox.png) [牛牛果实·野牛形态](https://onepiece.fandom.com/wiki/Ushi_Ushi_no_Mi,_Model_Bison) | ![](https://static.wikia.nocookie.net/onepiece/images/3/38/Hito_Hito_no_Mi_Infobox.png) [人人果实](https://onepiece.fandom.com/wiki/Hito_Hito_no_Mi) | ![](https://static.wikia.nocookie.net/onepiece/images/8/8c/Ushi_Ushi_no_Mi%2C_Model_Giraffe_Infobox.png) [牛牛果实·长颈鹿形态](https://onepiece.fandom.com/wiki/Ushi_Ushi_no_Mi,_Model:_Giraffe) | ![](https://static.wikia.nocookie.net/onepiece/images/d/db/Sara_Sara_no_Mi%2C_Model_Axolotl_Infobox.png) [蝾螈果实·美西螈形态](https://onepiece.fandom.com/wiki/Sara_Sara_no_Mi,_Model:_Axolotl) |\n| ![](https://static.wikia.nocookie.net/onepiece/images/6/64/Artificial_Devil_Fruit_Infobox.png) [贝加庞克](https://onepiece.fandom.com/wiki/Vegapunk) 的 [人造恶魔果实](https://onepiece.fandom.com/wiki/Artificial_Devil_Fruit) | ![](https://static.wikia.nocookie.net/onepiece/images/e/e5/SMILE_Infobox.png) [凯撒](https://onepiece.fandom.com/wiki/Caesar_Clown) 的 [SMILE](https://onepiece.fandom.com/wiki/SMILE) | ![](https://static.wikia.nocookie.net/onepiece/images/3/3e/Hebi_Hebi_no_Mi%2C_Model_Yamata_no_Orochi_Infobox.png) [蛇蛇果实·八岐大蛇形态](https://onepiece.fandom.com/wiki/Hebi_Hebi_no_Mi,_Model:_Yamata_no_Orochi) | ![](https://static.wikia.nocookie.net/onepiece/images/5/57/Batto_Batto_no_Mi%2C_Model_Vampire_Infobox.png) [蝙蝠果实·吸血鬼形态](https://onepiece.fandom.com/wiki/Batto_Batto_no_Mi,_Model:_Vampire) <sup title=\"非官方\">≠</sup> |\n| ![](https://static.wikia.nocookie.net/onepiece/images/f/f9/Tori_Tori_no_Mi%2C_Model_Nue_Infobox.png) [鸟鸟果实·鵺形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Nue) <sup title=\"非官方\">≠</sup> |\n\n以下恶魔果实的种类暂时未知：\n\n##### 官方的\n\n- [蛋蛋果实](https://onepiece.fandom.com/wiki/Tama_Tama_no_Mi)（英文名：Egg-Egg Fruit）：能力者身体由蛋壳构造，如果被打破，能力者可以从蛋黄中以更强壮的形态重生。这个能力使得能力者每次重生越来越像鸡。该果实由 [塔马哥](https://onepiece.fandom.com/wiki/Tamago) 所食用。\n- [拉斐特](https://onepiece.fandom.com/wiki/Laffitte) 的未命名果实，让他长出天使的翅膀并利用它们飞翔。\n- [乌鸦](https://onepiece.fandom.com/wiki/Karasu) 的未命名果实，可以让能力者的身体和衣服变成乌鸦。\n\n##### 非官方的\n\n- [金属果实](https://onepiece.fandom.com/wiki/Meta_Meta_no_Mi)：允许能力者控制液态金属，变成 **液态金属人**。由 [格雷德尔](https://onepiece.fandom.com/wiki/Graydle) 所食用。\n- [祖玛果实](https://onepiece.fandom.com/wiki/Zuma_Zuma_no_Mi)：允许能力者控制等离子体，变成 **等离子人**。由 [斯马修](https://onepiece.fandom.com/wiki/Smash) 所食用。\n\n#### 恶魔果实数量\n\n| | 官方的 | 非官方的 | SBS | 总计 |\n|------|------|------|------|------|\n| 超人系 | 82＊ | 37 | 3 | 122 |\n| 自然系 | 11 | 3 | 0 | 14 |\n| 动物系 | 44＊＊ | 7 | 0 | 51 |\n| 未知 | 3 | 2 | 0 | 5 |\n| 总计 | 140 | 49 | 3 | 192 |\n\n  *＊备注：这个数字包含在漫画中并未命名或者给出详细细节的 [飘飘果实](https://onepiece.fandom.com/wiki/Fuwa_Fuwa_no_Mi)。 它被认为是官方的果实是因为在漫画中提到过史基使用能力从海底监狱逃脱。<sup id=\"cite-34\">[[34]](#footnote-34)</sup><sup id=\"cite-35\">[[35]](#footnote-35)</sup><sup id=\"cite-36\">[[36]](#footnote-36)</sup>*\n\n  *＊＊备注：这个数字不包含人造恶魔果实*\n\n### 熟练程度\n\n![路飞花费很长一段时间才能熟练掌握他的橡胶攻击](https://static.wikia.nocookie.net/onepiece/images/6/64/Inexperienced_Gomu_Gomu_no_Mi_User.png)\n\n能力者食用果实之后，并不能自动掌握他们的能力，必须训练他们自己才能恰当的使用他们的新能力。能力者理解他们自己能力越多，他们能使用的技术种类就越多，最终可导致觉醒。那些不能很好地利用恶魔果实力量的人将无法充分发挥他们的能力。\n\n不同的人花费不同的事件来掌握他们的能力。比如，路飞花费数年事件学习如何使用橡胶果实，而卡莉法和卡库在食用他们的恶魔果实之后仅花费数小时来适应他们的新能力。萨博在多弗朗明哥倒台之后，在巴尔迪哥花费数天时间来训练他的烧烧果实，表明萨博还在掌握它的能力中。布鲁克花费 50 年时间最终明白了他的黄泉果实所有的潜力，为他赢得“灵魂之王”的称号。\n\n熟练度还与能力者的耐力相关。当精疲力尽的时候，一个人不能很好地使用他们的能力，必须休息才能重新获得力量。在使用了怪物强化模式之后，乔巴必须休息至少三个小时才能让蓝波球的效果消散。\n\n### 觉醒\n\n![四个狱卒兽都是觉醒的动物系](https://static.wikia.nocookie.net/onepiece/images/a/a5/Jailer_Beasts_Attack_Prisoners.png)\n\n恶魔果实能力，在很小的概率下，可以“觉醒”（覚醒 kakusei），极大增强能力者的能力。恶魔果实如何觉醒的细节目前尚不可知，但是目前看到的是，它能够显著提高能力，更精细的控制，以及正常情况下无法实现的能力。觉醒效果取决于恶魔果实的种类。\n\n#### 动物系\n\n对于 [动物系](https://onepiece.fandom.com/wiki/Zoan) 的能力，觉醒可以让能力者相比于未觉醒的动物系能力而言更强的体力、速度和耐力。这也包括更快的恢复时间，即使能力者已失去知觉，它依然起作用。\n\n五个 [狱卒兽](https://onepiece.fandom.com/wiki/Jailer_Beasts) 中的四个都是觉醒的动物系能力者，第五个是否觉醒暂时未知。<sup id=\"cite-37\">[[37]](#footnote-37)</sup>\n\n#### 超人系\n\n> 听着，菜鸟，恶魔果实能力还有更高一层的境界，名为“觉醒”。非常罕见，但是一旦“觉醒”，它将不仅仅影响自己的身体，也开始影响周围的事物！\n> <cite>[堂吉柯德·多弗朗明哥](https://onepiece.fandom.com/wiki/Donquixote_Doflamingo) 向 [蒙奇·D·路飞](https://onepiece.fandom.com/wiki/Monkey_D._Luffy) 解释他正在展现的能力。 <sup id=\"cite-38\">[[38]](#footnote-38)</sup></cite>\n\n对于超人系的能力，觉醒可以让能力者拥有一种全新的力量和不同于以往的使用方式。路飞说这样的能力让它看起来不像是普通的超人系。<sup id=\"cite-38\">[[38]](#footnote-38)</sup>\n\n![多弗朗明哥使用线线果实把周围环境变成线](https://static.wikia.nocookie.net/onepiece/images/5/54/Paramecia_Awakening.gif)\n\n觉醒的超人系能力者可以将能力延伸自身身体之外，把周围的无机物转换成他们恶魔果实能力的本质，并以他们想要的任何方式操纵转换后的物体。这种转换可以延伸至非常大的区域。\n\n觉醒和未觉醒但可以转换和操纵周围环境的恶魔果实（比如 [旗帜果实](https://onepiece.fandom.com/wiki/Hira_Hira_no_Mi)）之间最大区别是，觉醒可以让能力者从很远的地方随意转换环境并操纵它。未觉醒的环境操纵恶魔果实需要能力者接触他们想要转换的物体，有时候还需要跟着移动。\n\n[多弗朗明哥](https://onepiece.fandom.com/wiki/Donquixote_Doflamingo) 觉醒 [线线果实](https://onepiece.fandom.com/wiki/Ito_Ito_no_Mi) 之后，可以延伸他的制造线线的能力，甚至可以不接触大地和建筑就可以将他们转换成大量的线线并操纵它们。[卡塔库栗](https://onepiece.fandom.com/wiki/Mochi_Mochi_no_Mi) 在他和路飞的战斗中使用 [糯糯果实](https://onepiece.fandom.com/wiki/Mochi_Mochi_no_Mi) 以同样的方式影响周围环境。<sup id=\"cite-39\">[[39]](#footnote-39)</sup>\n\n-----\n\n**以下的内容是 [非官方的](https://onepiece.fandom.com/wiki/Canon#Non-Canon)，因此不被认为是 [官方](https://onepiece.fandom.com/wiki/Canon) 故事的一部分。**\n\n-----\n\n非官方超人系恶魔果实觉醒有另一个版本。这个版本的超人系觉醒可以让能力者极大延伸果实的能力、范围和超级微调的能力。\n\n[吉尔德·特索罗] 已觉醒 [黄金果实](https://onepiece.fandom.com/wiki/Goru_Goru_no_Mi)，他能够在他触摸的黄金中创造一个复杂的感官网络，进而感知与他的黄金连接的一切动作。<sup id=\"cite-40\">[[40]](#footnote-40)</sup> [道格拉斯·巴雷特](https://onepiece.fandom.com/wiki/Douglas_Bullet) 已觉醒他的 [合体果实](https://onepiece.fandom.com/wiki/Gasha_Gasha_no_Mi)，能够延伸他的物体物体重组能力，将整个地形拆分再重组成他认为合适的模样。<sup id=\"cite-41\">[[41]](#footnote-41)</sup>\n\n这些剧场版，至少非官方版，和超人系果实觉醒不一样，取决于果实的本质。\n\n-----\n\n**非官方章节结束**\n\n-----\n\n## 力量和弱点\n\n### 食用收益\n\n> 不管什么类型的果实，看你怎么使用它。因此（食用恶魔果实）变弱的可能性很小，除了会变成一个旱鸭子，确实不太方便。\n> <cite>[罗布·路奇](https://onepiece.fandom.com/wiki/Rob_Lucci) 对恶魔果实能力的看法。 <sup id=\"cite-5\">[[5]](#footnote-5)</sup></cite>\n\n![恶魔果实能力永久的改变了岛的气候](https://static.wikia.nocookie.net/onepiece/images/3/3a/Punk_Hazard_Infobox.png)\n\n食用恶魔果实的主要动力是其赋予能力者的能力。通常，能力者获得能力的好处远远超过其因此不能游泳。许多能力在战斗中是非常大的优势；比如增强身体机能，一些特有的攻击，甚至是控制大自然的力量。也有一些擅长辅助的能力，比如治疗他人，增强感官，无中生有制造食物。\n\n恶魔果实是如此的多样且神秘，食用一颗所获得的能力可能会超越正常限制。一个很好的例子是，有这样一颗恶魔果实，可以治愈正常情况下无法治愈的疾病。<sup id=\"cite-42\">[[42]](#footnote-42)</sup>\n\n不管（能力者）获得的能力是什么，甚至可能会被当作“怪胎”或者“废物”，都可以被很好的使用并最终成为非常有价值的财富，不管是在战斗中还是战斗之外。不管能力者的力量、技巧和创造力是怎样的。如果不出意外，食用恶魔果实并不会是的能力者变得更弱。\n\n此外，由于每个恶魔果实能力者都拥有其特有的能力，他们每个人都需要不同的策略来应对，除了通用的恶魔果实能力者的弱点：[海楼石](https://onepiece.fandom.com/wiki/Seastone) 和不会游泳。因此，拥有奇怪的或者不熟悉能力的恶魔果实能力者在战斗中非常难对付。但是，如果一个人拥有强大的霸气，他们对恶魔果实的抵抗力会更强。常规做法是，退后一步，对恶魔果实能力者尝试不同的攻击手段。<sup id=\"cite-43\">[[43]](#footnote-43)</sup>\n\n另一个恶魔果实能力的优势是，许多地方和人缺乏相应的信息，导致他们相信这些能力是某种魔法或者诅咒。能力者可以很好地利用人们对这种能力如何获得的误解，操纵他人以达到自己的目的。<sup id=\"cite-44\">[[44]](#footnote-44)</sup><sup id=\"cite-45\">[[45]](#footnote-45)</sup>\n\n恶魔果实能力非常令人垂涎，许多人穷极一生只为寻找某一特定的恶魔果实，而更多的搜寻者通常会以失望或死亡结局。\n\n有关哪种恶魔果实是最强的话题仍有待讨论。许多恶魔果实具有明显的优点；比如 [岩浆](https://onepiece.fandom.com/wiki/Magu_Magu_no_Mi)，拥有所有恶魔果实中最强大的攻击力；或者 [震震果实](https://onepiece.fandom.com/wiki/Gura_Gura_no_Mi)，据说可以毁灭整个世界。然而，如上所述，恶魔果实的力量最终取决于能力者。\n\n### 食用顺序\n\n> 你们可以拿它卖几亿贝利，但是只要咬上一口，它将会给你的一生带来很多问题，你们知道吗！？\n> <cite>[加布拉](https://onepiece.fandom.com/wiki/Jabra) 警告 [卡莉法](https://onepiece.fandom.com/wiki/Kalifa) 和 [卡库](https://onepiece.fandom.com/wiki/Kaku)</cite>\n\n![在不认识恶魔果实的国家中，其能力被当做是忍术](https://static.wikia.nocookie.net/onepiece/images/9/9c/Fuku_Fuku_no_Mi_Infobox.png)\n\n恶魔果实，除了这些加强属性，也会有一些缺点。一个缺点就是很少人真正知道它们。在某些情况下，一整个社会都不知道恶魔果实的存在。限于这些信息的缺失，有一些恶魔果实到现在为止仍未是未知，一般的食用者是用一颗恶魔果实就等同于赌博，不知道这颗恶魔果实将赋予的能力，可能是一种对于特定人来说非常难以驾驭的能力。\n\n即使恶魔果实给予能力者的能力是非常有用的，恶魔果实能力者也不能自动控制他们的能力。所有的恶魔果实能力者必须训练学习如何激活、控制和使用他们的能力。这个过程可能会让恶魔果实能力者处于一个痛苦且/或耻辱的未知。\n\n另一个缺点是，有很多平民会对这些能力好奇，<sup id=\"cite-46\">[[46]](#footnote-46)</sup>然而剩下的人会把恶魔果实能力者当成 “怪胎”、“怪物”甚至是“恶魔”。没有办法移除能力，恶魔果实能力者终将过上遭周围人歧视的悲惨生活。<sup id=\"cite-16\">[[16]](#footnote-16)</sup>。\n\n#### 水的克制\n\n![路飞和布鲁克泡在水里，失去了力气](https://static.wikia.nocookie.net/onepiece/images/b/b3/Devil_Fruit_Effects.png)\n\n食用恶魔果实最显著的结果是对海水的畏惧：大海讨厌并拒绝恶魔果实能力者，他们泡在海里就会变得虚弱且无助，“变成一个旱鸭子”（カナヅチ kanazuchi <sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>）。<sup id=\"cite-2\">[[2]](#footnote-2)</sup>尽管这个弱点通常指的是无法游泳，但是更加准确的定义是海水本身才是弱点。在大海里无法移动他们的身体只是这个弱点的副产品。\n\n在一个大部分都是海洋的 [世界](https://onepiece.fandom.com/wiki/World) 里，对大海的弱点对大多数恶魔果实能力者来说是致命的，比如 [海贼](https://onepiece.fandom.com/wiki/Pirate) 和 [海军](https://onepiece.fandom.com/wiki/Marines) 在 [伟大航路](https://onepiece.fandom.com/wiki/Grand_Line) 中航行。\n\n尾田曾在 [SBS](https://onepiece.fandom.com/wiki/SBS) 说，恶魔果实能力者受所有类型水的影响， 而不仅仅是海水。<sup id=\"cite-47\">[[47]](#footnote-47)</sup>这包括空岛的 [白海](https://onepiece.fandom.com/wiki/Cloud#Sea_Clouds)。他详细阐述了这一点，说“流动的”税，比如雨水或波浪并不会削弱恶魔果实能力者，而静止的水，比如湖泊或者河流会。这一点第一次体现在蒙奇·D·路飞在 [跳舞粉](https://onepiece.fandom.com/wiki/Dance_Powder) 诱发的雨水中并没有丧失能力，第二次在佐乌，当 [象主](https://onepiece.fandom.com/wiki/Zunesha) 使用海水洗澡并没有影响到他，因为海水是“流动的”水。<sup id=\"cite-48\">[[48]](#footnote-48)</sup>\n\n![恶魔果实能力者站在水中没有力气，但仍能移动，因为没有被足够湮没](https://static.wikia.nocookie.net/onepiece/images/2/20/Luffy_Interrupts_Hancock%27s_Bath.png) \n\n水对恶魔果实能力者克制的最大危险之一是溺水，对手可以利用这个优势来杀死甚至是最强大的恶魔果实能力者。然而，值得注意的是溺水的风险仅适用于不能在水下呼吸的恶魔果实能力者，因为鱼人和人鱼恶魔果实能力者可以在水下呼吸，他们不受这个风险的影响。然而即使恶魔果实能力者在水底下不会溺水可以存活，他们仍无法移动。不能移动导致这些能力者容易受到水下危险的影响，比如海洋捕食者，因为他们无法保护自己。尾田曾在 SBS 中说恶魔果实能力者至少需要一半的身体在水里才会不能移动。这点在戈耳工姐妹和路飞在波雅·汉库克的澡池中仍可以移动可以看到。布鲁克在 [龙宫](https://onepiece.fandom.com/wiki/Ryugu_Palace) 的洪水中随着水位上升逐渐丧失力量，证明与大海接触并不会立即夺取他们的力量，除非它达到一定程度。<sup id=\"cite-49\">[[49]](#footnote-49)</sup>\n\n另一个风险是，即使能力者的部分身体湮没在水里，他们无法使用他们的恶魔果实能力，不管湮没了多少。然而，如果能力者的身体被果实永久性的改造了，能力者的能力可以被外部资源操纵，比如：当路飞被撞击并沉到 [阿龙公园](https://onepiece.fandom.com/wiki/Arlong_Park) 水池的底部，[健助](https://onepiece.fandom.com/wiki/Genzo) 和 [诺琪高](https://onepiece.fandom.com/wiki/Nojiko) 潜入水下把他的脖子拉上来这样他的头可以在水平面上面，让他呼吸。然而，值得注意的是，变得湿漉并不能足以虚弱或者无效化能力者的能力，同样的道理，水在恶魔果实能力者的身体内（也不会虚弱或无效化）。比如能力者喝下的水，就像路飞使用 [水路飞](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi/Techniques#Mizu_Luffy)，他和他的能力并未受到他体内的水和他的拳头上的水的任何影响。<sup id=\"cite-50\">[[50]](#footnote-50)</sup><sup id=\"cite-51\">[[51]](#footnote-51)</sup>\n\n另外值得注意的是，尽管恶魔果实能力者面对水会虚弱，在水下仍可能使用能力（比如，[加尔·帝诺(Mr.3)](https://onepiece.fandom.com/wiki/Galdino) 可以在水下制造一个包围自己的 [蜡](https://onepiece.fandom.com/wiki/Doru_Doru_no_Mi) 球来自救，他制造的钥匙可以用来打开海楼石手铐）。路飞在两年时间跨越之后可以在水下使用三档但其攻击的力量大大减小了。\n\n![恶魔果实能力可在水下使用，因为能力者并未真正接触水](https://static.wikia.nocookie.net/onepiece/images/c/c9/Gear_Third_Activation_Post_Timeskip.gif)\n\n除了水的克制，恶魔果实能力者仅会被他或她身体接触到的水所影响。不接触水本身，能力者不会受影响，即使湮没了也没事。恶魔三人组曾使用潜水装备到 [圣·布里斯](https://onepiece.fandom.com/wiki/St._Briss) 坠落的坑中，<sup id=\"cite-52\">[[52]](#footnote-52)</sup>，同样的，三人组还穿上亚尔基曼红树林所制造的泡泡与库拉肯战斗。\n\n除了这些共通的克制（所有恶魔果实能力者在静止的水中会变得瘫痪），有些能力者也会被水克制的更多，让他们的能力受挫<sup id=\"cite-53\">[[53]](#footnote-53)</sup><sup id=\"cite-54\">[[54]](#footnote-54)</sup><sup id=\"cite-55\">[[55]](#footnote-55)</sup>或者接触时直接被冲走。<sup id=\"cite-56\">[[56]](#footnote-56)</sup><sup id=\"cite-57\">[[57]](#footnote-57)</sup><sup id=\"cite-58\">[[58]](#footnote-58)</sup>\n\n除了被真正的水所克制之外，还有一个叫 [海楼石](https://onepiece.fandom.com/wiki/Seastone)的东西，一个特别的、近乎坚不可摧的物质，和大海发出同样能量，被认为是固态的大海。和海楼石接触，与恶魔果实能力者掉进水里拥有一样的效果，无效化恶魔果实能力，虚弱恶魔果实能力者，让他们无法移动。海军利用这点使用海楼石将海贼关押在 [海底监狱](https://onepiece.fandom.com/wiki/Impel_Down)。\n\n### 高阶和不可预测性\n\n> 看你是如何使用和训练恶魔果实的能力，它可以变成一个强大的战斗武器。\n> \n> <cite>[克洛克达尔](https://onepiece.fandom.com/wiki/Crocodile) 对他能力的评价 <sup id=\"cite-59\">[[59]](#footnote-59)</sup></cite>\n\n![火与冰相互抵消](https://static.wikia.nocookie.net/onepiece/images/2/2b/Ace_vs._Kuzan.png)\n\n恶魔果实的力量和能力最终由能力者的力量和技巧所决定。然而一些恶魔果实能力会以某种方式相互对抗，不管能力者自身的能力如何。在某些情况下，一颗恶魔果实（高阶）会比另一个更具天然优势，导致在战斗中具有显著的优势。除了高阶这一条规则外，其他恶魔果实能力可以以各种不可预测的方式相互反应。\n\n#### 已确认的高阶恶魔果实\n\n一些相似的恶魔果实能力已确认存在高阶和低阶。一场战斗中，高阶能力者基本上确定能赢低阶能力者。尽管这并不意味着高阶的能力者比低阶能力者要厉害。<sup id=\"cite-60\">[[60]](#footnote-60)</sup>\n\n| 高阶恶魔果实 | 低阶恶魔果实 | 能力 | 区别 |\n|-----|-----|-------|-----|\n| [岩浆果实](https://onepiece.fandom.com/wiki/Magu_Magu_no_Mi) | [烧烧果实](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi) | 热的形式 | 岩浆比火更高 |\n| [吨吨果实](https://onepiece.fandom.com/wiki/Ton_Ton_no_Mi) | [千克果实](https://onepiece.fandom.com/wiki/Kilo_Kilo_no_Mi) | 控制身体重量 | 重量增长是以吨计算的，一吨等于 1000 千克 |\n| [冰冻果实](https://onepiece.fandom.com/wiki/Hie_Hie_no_Mi) | [雪雪果实](https://onepiece.fandom.com/wiki/Yuki_Yuki_no_Mi) | 水的冻结状态 | 冰比雪更快地冻结 |\n| [武器果实](https://onepiece.fandom.com/wiki/Buki_Buki_no_Mi) | [斩斩果实](https://onepiece.fandom.com/wiki/Supa_Supa_no_Mi) | 刀 | 刀刀果实仅限于将人的身体变成刀刃，而武器果实可以变成刀刃武器，也可以变成很多其他类型的武器 |\n\n#### 已展示的不可预测性\n\n在很多情况下，除了上述的高阶规则外，无法判断恶魔果实能力是如何对抗其他的恶魔果实能力。<sup id=\"cite-61\">[[61]](#footnote-61)</sup>一个恶魔果实能力在大多数情况下能完胜其他能力，在某些情况下却被通常被认为“弱”的能力所击倒。\n\n| 恶魔果实（克制） | 恶魔果实（被克制） | 影响 |\n|-----|-----|-----|\n| [烧烧果实](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi) | [烟烟果实](https://onepiece.fandom.com/wiki/Moku_Moku_no_Mi)/[冰冻果实](https://onepiece.fandom.com/wiki/Hie_Hie_no_Mi) | 相互抵消。<sup id=\"cite-62\">[[62]](#footnote-62)</sup><sup id=\"cite-63\">[[63]](#footnote-63)</sup> |\n| [麦芽糖果实](https://onepiece.fandom.com/wiki/Ame_Ame_no_Mi)/[糯糯果实](https://onepiece.fandom.com/wiki/Mochi_Mochi_no_Mi) | [橡胶果实](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi) | 橡胶果实的技巧被针对、模仿和压制。<sup id=\"cite-64\">[[64]](#footnote-64)</sup><sup id=\"cite-65\">[[65]](#footnote-65)</sup><sup id=\"cite-66\">[[66]](#footnote-66)</sup> |\n| [橡胶果实](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi) | [响雷果实](https://onepiece.fandom.com/wiki/Goro_Goro_no_Mi) | 橡胶果实能力者的橡胶身体对电有抵抗力。<sup id=\"cite-67\">[[67]](#footnote-67)</sup> |\n| [蜡蜡果实](https://onepiece.fandom.com/wiki/Doru_Doru_no_Mi) | [毒毒果实](https://onepiece.fandom.com/wiki/Doku_Doku_no_Mi) | 蜡蜡果实的蜡可以阻止毒毒果实的基础毒，虽然不能阻止最强大的毒。<sup id=\"cite-68\">[[68]](#footnote-68)</sup>|\n| [花花果实](https://onepiece.fandom.com/wiki/Hana_Hana_no_Mi) | [脱落果实](https://onepiece.fandom.com/wiki/Nuke_Nuke_no_Mi) | 花花果实能力者的附属物可以抓取并约束脱落果实能力者<sup id=\"cite-69\">[[69]](#footnote-69)</sup> |\n| [黄泉果实](https://onepiece.fandom.com/wiki/Yomi_Yomi_no_Mi) | [魂魂果实](https://onepiece.fandom.com/wiki/Soru_Soru_no_Mi) | 黄泉果实能力者的灵魂能量可以从普通 [霍米兹](https://onepiece.fandom.com/wiki/Homies) 中强制释放灵魂，虽然无法从特殊霍米兹中强制释放。<sup id=\"cite-70\">[[70]](#footnote-70)</sup> |\n| [记忆果实](https://onepiece.fandom.com/wiki/Memo_Memo_no_Mi) | [魂魂果实](https://onepiece.fandom.com/wiki/Soru_Soru_no_Mi) | 受记忆果实影响，灵魂原来主人的回忆回到霍米兹 <sup id=\"cite-71\">[[71]](#footnote-71)</sup>|\n| [团子果实](https://onepiece.fandom.com/wiki/Kibi_Kibi_no_Mi) | [SMILE](https://onepiece.fandom.com/wiki/SMILE) | 小玉可以驯服 10% 的，拥有动物力量的 SMILE 能力者 <sup id=\"cite-72\">[[72]](#footnote-72)</sup>|\n\n## 神话及误解\n\n因恶魔果实的稀有性和神秘性，关于它们的存在有很多谣言。特别是四大 [海域](https://onepiece.fandom.com/wiki/Blue_Sea) 中的偏远地区或者像 [和之国](https://onepiece.fandom.com/wiki/Wano_Country) 这样的与世隔绝的国家，往往缺乏对过时的了解，认为它们是神话或者讲他们的力量归于纯粹的魔法。以下是世界上关于恶魔果实的各种神话和误解。\n\n- 如 [香克斯](https://onepiece.fandom.com/wiki/Shanks) 所述，恶魔果实被一些人认为是**海之恶魔**（海の悪魔 Umi no Akuma<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>）的 “化身” (keshin<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>)。<sup id=\"cite-2\">[[2]](#footnote-2)</sup>\n- [加布拉](https://onepiece.fandom.com/wiki/Jabra) 相信谣言，恶魔果实能力者体内有一个真正的恶魔。根据谣言，如果恶魔果实能力者靠近未食用的恶魔果实，果实中的恶魔就会出来并将能力者撕裂。这个谣言已被研究揭穿。<sup id=\"cite-5\">[[5]](#footnote-5)</sup>\n\n- 在 [亚马逊·莉莉](https://onepiece.fandom.com/wiki/Amazon_Lily)，百姓不知道恶魔果实的存在。她们相信戈尔贡姐妹是被一种“戈尔贡”的生物所诅咒，从而获得了 [甜甜果实](https://onepiece.fandom.com/wiki/Mero_Mero_no_Mi) 和 [蛇蛇果实](https://onepiece.fandom.com/wiki/Hebi_Hebi_no_Mi_(Disambiguation))。<sup id=\"cite-73\">[[73]](#footnote-73)</sup>\n\n- [范德·邓肯四世](https://onepiece.fandom.com/wiki/Vander_Decken_IX) 认为他的 [靶靶果实](https://onepiece.fandom.com/wiki/Mato_Mato_no_Mi) 能力是“粑粑的诅咒”。<sup id=\"cite-74\">[[74]](#footnote-74)</sup> [砂糖](https://onepiece.fandom.com/wiki/Sugar) 的 [童趣果实](https://onepiece.fandom.com/wiki/Hobi_Hobi_no_Mi) 也被她的受害者叫做“童趣诅咒”。<sup id=\"cite-75\">[[75]](#footnote-75)</sup>\n\n- [格林比特](https://onepiece.fandom.com/wiki/Green_Bit) 的 [冬塔塔三人组](https://onepiece.fandom.com/wiki/Tontatta_Tribe) 认为恶魔果实能力是 **魔法** (奇術 Kijutsu<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>)。<sup id=\"cite-76\">[[76]](#footnote-76)</sup>\n\n- 在 [和之国](https://onepiece.fandom.com/wiki/Wano_Country)，恶魔果实能力被认为是 **妖术**(妖術 Yōjutsu<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>)或者 [忍术](https://onepiece.fandom.com/wiki/Ninjutsu)。恶魔果实能力者被认为是 **妖怪**（妖術使い Yōjutsu Tsukai）。<sup id=\"cite-15\">[[15]](#footnote-15)</sup>\n\n## 研究\n\n[贝加庞克](https://onepiece.fandom.com/wiki/Vegapunk) 博士，一名海军 [科学家](https://onepiece.fandom.com/wiki/Scientist) ，也是这个世界上最著名的恶魔果实的研究者，主要负责研究恶魔果实和 [海楼石](https://onepiece.fandom.com/wiki/Seastone) 的影响。当初是由贝加庞克发现恶魔果实是通过 [血统因子](https://onepiece.fandom.com/wiki/Lineage_Factor) 起作用。\n\n贝加庞克甚至可以在 [一定程度上](https://onepiece.fandom.com/wiki/Pacifista) 复制一颗 [果实](https://onepiece.fandom.com/wiki/Pika_Pika_no_Mi) 的能力。\n\n[凯撒·库朗](https://onepiece.fandom.com/wiki/Caesar_Clown) 说他已经做完很多针对他自己 [恶魔果实](https://onepiece.fandom.com/wiki/Gasu_Gasu_no_Mi) 的试验。暗示他在食用之后设法增强了它的能力。虽然他还没有解释他的研究到底是什么，也没有说他是如何做的。\n\n### 非生命体恶魔果实能力者\n\n在当前时间线之前的几年， [贝加庞克博士](https://onepiece.fandom.com/wiki/Vegapunk) 发明一种技术，可以让一个非生命体（比如一把枪或者一把剑）“吃下”一颗恶魔果实并且获得其能力。其中细节尚未公布。截至目前，动物系是唯一一种可以被非生命体吸收的恶魔果实类型。非生命体的恶魔果实看起来对拥有它的人非常忠诚。\n\n“摄取”了动物系果实的物体，获得了它们变成的动物的机动性、能力和智力。这可能是个缺点，因为这个物体也获得了作为一个生命感知痛苦和恐惧的能力，并且容易感染疾病。<sup id=\"cite-77\">[[77]](#footnote-77)</sup>\n\n这项让物体吃下动物系果实的技术并不局限于固体材料，[气体粘液](https://onepiece.fandom.com/wiki/Smiley) 也可以作为介质。\n\n### 人造恶魔果实\n\n*更多信息：[人造恶魔果实](https://onepiece.fandom.com/wiki/Artificial_Devil_Fruit)、[SMILE](https://onepiece.fandom.com/wiki/SMILE)*\n\n随着科学家越来越多地了解恶魔果实如何工作的，创造人造恶魔果实变得越来越可能了。和真实的恶魔果实一样，它们给予食用者能力的同时让他们丧失游泳的能力。贝加庞克博士制造了一颗合成恶魔果实，虽然不知道因为什么原因据说它存在缺陷。<sup id=\"cite-8\">[[8]](#footnote-8)</sup>\n\n![人造恶魔果实在德雷斯罗萨被大量生产](https://vignette4.wikia.nocookie.net/onepiece/images/d/d7/Incomplete_SMILE_Fruits.png)\n\n[凯撒·库朗](https://onepiece.fandom.com/wiki/Caesar_Clown) 设法制造了他自己的，贝加庞克却没有制造出来的人造恶魔果实；它们叫做 [SMILE](https://onepiece.fandom.com/wiki/SMILE)。<sup id=\"cite-32\">[[32]](#footnote-32)</sup>它们让食用者获得类动物系的动物属性。然而他们有一个严重缺陷：吃了它们的人当中仅有 10% 可以实现动物转化，剩下的 90%，不仅不能获得任何能力，也失去了游泳的能力和表达除了愉悦之外的任何情绪的能力，迫使他们不断地大笑，尽管这个和他们的真实感受背道而驰。<sup id=\"cite-78\">[[78]](#footnote-78)</sup>\n\n制造 SMILE 果实的过程包括为种植果实提供光照的 [发光向日葵](https://onepiece.fandom.com/wiki/Plant_and_Fungi_Species#Elegant_Sunflower)，以及被倒入一条通往灌溉渠的河流中然后将河流引到树下以为它们提供化学元素的 [SAD](https://onepiece.fandom.com/wiki/SAD)。<sup id=\"cite-79\">[[79]](#footnote-79)</sup>\n\n与真实的恶魔果实相比，许多人造恶魔果实似乎都大大逊色。\n\n### 蓝波球\n\n*更多信息：[蓝波球](https://onepiece.fandom.com/wiki/Rumble_Ball)*\n\n![蓝波球](https://static.wikia.nocookie.net/onepiece/images/5/59/Rumble_Ball_Infobox.png)\n\n[托尼托尼 乔巴](https://onepiece.fandom.com/wiki/Tony_Tony_Chopper)，在他给 [库蕾哈](https://onepiece.fandom.com/wiki/Kureha) 医生当学徒的六年里，创造了一种叫做 “[蓝波球](https://onepiece.fandom.com/wiki/Rumble_Ball)”的特殊药物。它可以短时间增强恶魔果实效果，赋予他们额外的能力。蓝波球通过“干扰恶魔果实的波长”来实现的。<sup id=\"cite-80\">[[80]](#footnote-80)</sup>\n\n被 [动物系](https://onepiece.fandom.com/wiki/Zoan) 能力者使用后，蓝波球会能力者进行额外的变换，这些他们平时都不可能达到的。目前不知道蓝波球被自然系或者超人系能力者食用之后会有什么效果。\n\n一名恶魔果实能力者每六小时不得使用超过一颗蓝波球。如果使用了第二颗恶魔果实，他们将获得额外的能力，但同时将无法控制自己。第三颗蓝波球将会导致恶魔果实力量完全失控，这对于朋友、敌人和能力者本身来说都可能是致命的。\n\n恶魔果实能力者也可以在不真正使用药物的情况下，达到蓝波球赋予的额外能力。乔巴经过两年的训练和研究已实现了这些。不仅于此，一旦熟练掌握，一名恶魔果实能力者可以仅使用一颗获得以前三颗蓝波球的力量，并且在短时间内可以控制这股强大的力量。\n\n## 早期海贼王\n\n在 [尾田荣一郎](https://onepiece.fandom.com/wiki/Eiichiro_Oda) 的 [第一版](https://onepiece.fandom.com/wiki/Romance_Dawn,_Version_1) 和 [第二版](https://onepiece.fandom.com/wiki/Romance_Dawn,_Version_2) 《冒险的黎明》原型中，[橡胶果实](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi) 与《海贼王》中的对应物基本相同。然而，两个原型都给出了它的起源，即每五十年出现一次的“传奇树”（幻の木 Maboroshi no ki<sup>[?](http://en.wikipedia.org/wiki/Help:Japanese)</sup>），没有类似或相关果实的暗示。\n\n## 漫画和动画的影响\n\n[加布拉](https://onepiece.fandom.com/wiki/Jabra) 所说的谣言，关于恶魔果实内存在真正的恶魔，与印度教关于 [榄仁树](https://en.wikipedia.org/wiki/Terminalia_bellirica) 的信仰类似；正因如此，印度北部的印度教徒会避开树木，不会坐在树荫下。然而，榄仁树的果实也以其药用特性而闻名，被印度音声用于治疗各种疾病。\n\n加布拉关于果实中的恶魔会从内部撕裂并杀死食用者的谣言，与印度教另一个传说类似，特别是 [维利瓦卡姆版本](http://en.wikipedia.org/wiki/Villivakkam#History)，关于两个罗刹兄弟：[伐陀毗](http://en.wikipedia.org/wiki/Badami#Etymology) 会变成水果或者肉的形状，[伊鲁罗](http://en.wikipedia.org/wiki/Ilvala) 则把它当作“食物”送给路过的无辜乞丐。伐陀毗会撕开受害者的身体出来。然而，这个与 [阿加斯提亚](http://en.wikipedia.org/wiki/Agastya#Vathapi_legend) （译者注：又名投山仙人）的传说相矛盾。\n\n## 翻译和配音问题\n\n许多果实是用日语专有的概念和 [拟声词](http://en.wikipedia.org/wiki/onomatopoeia) （或者是其中的缩写）命名的，导致很难翻译，直接翻译就会很尴尬。比如 [烧烧果实](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi) 是以火的“噼啪”声命名的；所有被认可的英文翻译都是以火本身或者同义词命名的。\n\n[柯特](https://onepiece.fandom.com/wiki/Corto) 称它们为暗黑破坏神的果实。<sup id=\"cite-81\">[[81]](#footnote-81)</sup>\n\n[4Kids](https://onepiece.fandom.com/wiki/4Kids_Entertainment) 配音的动画中，将所有的果实重命名为“诅咒水果”（发音为两个不同的音节），以避免提及恶魔，这另某些宗教观众反感。\n\n## 杂项\n\n- 根据 [卡库](https://onepiece.fandom.com/wiki/Kaku) 和 [卡莉法](https://onepiece.fandom.com/wiki/Kalifa) 所述，对于遇到恶魔果实的人来说，你能感受到一股神奇的力量从它们身上传来，空气中弥漫着沉重的气息，仿佛来自异世界。\n\n- 根据 [贝尔](https://onepiece.fandom.com/wiki/Pell) 所述，总共有五种已知的能力可以让能力者飞行。<sup id=\"cite-82\">[[82]](#footnote-82)</sup>目前已经看到了十一种官方的、非人造果实已经，可以让能力者完全独立地飞行：一个超人系（[转转果实](https://onepiece.fandom.com/wiki/Guru_Guru_no_Mi)）、六个动物系（[鸟鸟果实·隼形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Falcon)、[鸟鸟果实·凤凰形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Phoenix)、[虫虫果实·独角仙形态](https://onepiece.fandom.com/wiki/Mushi_Mushi_no_Mi,_Model:_Kabutomushi)、[虫虫果实·大黄蜂形态](https://onepiece.fandom.com/wiki/Mushi_Mushi_no_Mi,_Model:_Suzumebachi)、[龙龙果实·无齿翼龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Pteranodon) 和 [龙龙果实·三角龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Triceratops)）和两个自然系（[烟烟果实](https://onepiece.fandom.com/wiki/Moku_Moku_no_Mi) 和 [瓦斯果实](https://onepiece.fandom.com/wiki/Gasu_Gasu_no_Mi)），还有 [拉斐特](https://onepiece.fandom.com/wiki/Laffitte) 和 [乌鸦](https://onepiece.fandom.com/wiki/Karasu) 的未分类果实。另外，还有三颗非官方果实也有这个能力，它们都是动物系：[鸟鸟果实·鹰形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Eagle)、[蝙蝠果实·吸血鬼形态](https://onepiece.fandom.com/wiki/Batto_Batto_no_Mi,_Model:_Vampire) 和 [鸟鸟果实·鵺形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Nue)。\n\n- [马歇尔·D·蒂奇](https://onepiece.fandom.com/wiki/Marshall_D._Teach) 是唯一同时拥有两颗恶魔果实的人。\n  - 夏洛特·布蕾可以使用另一种恶魔果实能力来复制另一个恶魔果实能力者。她展示过模仿橡胶果实和瓦斯果实能力。\n\n- 某些恶魔果实会被标记成唯一的、特殊的、甚至是它们特有的符号。包括：\n\n  - [响雷果实](https://onepiece.fandom.com/wiki/Goro_Goro_no_Mi)，被视为“不可战胜”的恶魔果实之一，尽管路飞可以利用他的橡胶物理性质来反抗他<sup id=\"cite-83\">[[83]](#footnote-83)</sup>\n\n  - [暗暗果实](https://onepiece.fandom.com/wiki/Yami_Yami_no_Mi)，被视为“唯一的”，即便对于自然系来说也是。蒂奇甚至说它才是“恶魔真正的力量”，是所有恶魔果实中最邪恶的存在。<sup id=\"cite-84\">[[84]](#footnote-84)</sup>\n\n  - [震震果实](https://onepiece.fandom.com/wiki/Gura_Gura_no_Mi)，被视为最强超人系，等同于自然系。战国曾说它拥有足够毁灭世界的力量。<sup id=\"cite-85\">[[85]](#footnote-85)</sup>\n\n  - [岩浆果实](https://onepiece.fandom.com/wiki/Magu_Magu_no_Mi)，据说是所有恶魔果实当中拥有最高攻击力的（果实）之一。<sup id=\"cite-86\">[[86]](#footnote-86)</sup>\n\n  - [手术果实](https://onepiece.fandom.com/wiki/Ope_Ope_no_Mi)，被视为“终极恶魔果实”，因为它能够让人永生。<sup id=\"cite-87\">[[87]](#footnote-87)</sup>。\n\n  - [糯糯果实](https://onepiece.fandom.com/wiki/Mochi_Mochi_no_Mi)，首先在 [周刊少年](https://onepiece.fandom.com/wiki/Shonen_Jump) 中被当作自然系介绍，之后在 [第 86 卷]() 中被 [甚平](https://onepiece.fandom.com/wiki/Jinbe) 重新定义为“特殊的”超人系。\n\n- 除了湮没在水中会变得虚弱这一个点，某些果实能力会被任何形态的液体所虚弱：\n  - 它可以阻止 [沙沙果实](https://onepiece.fandom.com/wiki/Suna_Suna_no_Mi) 能力者变成沙子。\n  - 它可以冲散 [泡泡果实](https://onepiece.fandom.com/wiki/Awa_Awa_no_Mi) 的影响。\n\n- [玛斯库德·丢斯](https://onepiece.fandom.com/wiki/Masked_Deuce) 是唯一已知的吃了一颗“无用的”自然恶魔果实（[烧烧果实](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi)，因为 [波特卡斯 D 艾斯](https://onepiece.fandom.com/wiki/Portgas_D._Ace) 已经咬过了第一口）的人。\n\n- 和恶魔果实味道很糟糕一样，某些恶魔果实也会让食物变得很难吃，比如 [笔笔果实](https://onepiece.fandom.com/wiki/Fude_Fude_no_Mi) 和 [吃吃果实](https://onepiece.fandom.com/wiki/Kuku_Kuku_no_Mi)。\n\n- 恶魔果实从 [消失的一百年] 就已经存在，从 [光月时](https://onepiece.fandom.com/wiki/Kozuki_Toki) 出生的年代起，用 [时时果实](https://onepiece.fandom.com/wiki/Toki_Toki_no_Mi) 穿越到未来。<sup id=\"cite-9\">[[9]](#footnote-9)</sup>\n\n- 有趣的是，不能游泳在现实生活的水手中很常见，包括海盗，在近代，一些航海迷信并不鼓励学习这项技能。现代权威将此归因于这些水手大多具有内陆背景，以及宿命论认为落水的人不应该被获救（因此游泳只会延长他们的痛苦）。<sup id=\"cite-88\">[[88]](#footnote-88)</sup><sup id=\"cite-89\">[[89]](#footnote-89)</sup>\n\n### 基于 SBS 的杂项\n\n- 在一个 SBS 问题中，一名读者问如果他吃下路飞那他可不可以得到路飞的橡胶果实能力。尾田说不可以，他只会食物中毒。<sup id=\"cite-90\">[[90]](#footnote-90)</sup>。\n\n- 当一个未知的恶魔果实将要在下一个篇章中出现，作者需要征得原作者 [尾田荣一郎](https://onepiece.fandom.com/wiki/Eiichiro_Oda) 的同意。在一章 SBS 中尾田是这样描述到这个流程：“通常，动画编剧遇到他们想要在故事里用到的能力时，我会说‘可以啊，听起来不错’，或者说‘对不起，不行，我在未来篇章中用到这个’。就是这样”<sup id=\"cite-91\">[[91]](#footnote-91)</sup>。\n\n## 参考链接\n\n1. <a id=\"footnote-1\">&nbsp;</a> [ ↑ ](#cite-1) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画 — [第 48 卷](https://onepiece.fandom.com/wiki/SBS_Volume_48)（第 166 页）, “更多信息，请等到故事中某个专家出来解释恶魔果实到底是什么。”\n\n2. <a id=\"footnote-2\">&nbsp;</a> [ ↑ ](#cite-2) 海贼王漫画和动画 — [第 3 卷](https://onepiece.fandom.com/wiki/Volume_3) [第 19 章](https://onepiece.fandom.com/wiki/Chapter_19)（第 14 页） 和 [第 8 集](https://onepiece.fandom.com/wiki/Episode_8), 年少得香克斯与巴基讨论恶魔果实。\n\n3. <a id=\"footnote-3\">&nbsp;</a> [ ↑ ](#cite-3) 海贼王漫画和动画 — [第 4 卷](https://onepiece.fandom.com/wiki/Volume_4) [第 35 章](https://onepiece.fandom.com/wiki/Chapter_35)（第 8 页）和 [第 15 集](https://onepiece.fandom.com/wiki/Episode_15)，[克洛](https://onepiece.fandom.com/wiki/Kuro) 认出了路飞的 [能力](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi)；值得注意的是，这是故事中第一次出现能力者这个词汇。\n\n4. <a id=\"footnote-4\">&nbsp;</a> [ ↑ ](#cite-4) 海贼王漫画 - [第 4 卷](https://onepiece.fandom.com/wiki/SBS_Volume_4)（第 150 页），关于世界上有多少“恶魔果实种类”，都是什么样的果实？\n\n5. <a id=\"footnote-5\">&nbsp;</a> [ ↑ ](#cite-5) 海贼王漫画和动画 - [第 40 卷](https://onepiece.fandom.com/wiki/Volume_40) [第 385 章](https://onepiece.fandom.com/wiki/Chapter_385)（第 5 页）和 [第 271 集](https://onepiece.fandom.com/wiki/Episode_271)，加布拉想要通过告诉他们味道多糟糕来阻止卡库和卡莉法吃恶魔果实。\n\n6. <a id=\"footnote-6\">&nbsp;</a> [ ↑ ](#cite-6) 海贼王漫画和动画 - [第 70 卷](https://onepiece.fandom.com/wiki/Volume_70) [第 698 章](https://onepiece.fandom.com/wiki/Chapter_698)（第 17 页）和 [第 625 集](https://onepiece.fandom.com/wiki/Episode_625)，罗解释贝加庞克关于恶魔果实如何赋予能力的研究。\n\n7. <a id=\"footnote-7\">&nbsp;</a> [ ↑ ](#cite-7) 海贼王漫画 - [第 45 卷](https://onepiece.fandom.com/wiki/Volume_45) （第 128 页）,是否所有恶魔果实有漩涡图案？\n\n8. <a id=\"footnote-8\">&nbsp;</a> [ ↑ ](#cite-8) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画和动画 — [第 69 卷](https://onepiece.fandom.com/wiki/SBS_Volume_69) [第 685 章](https://onepiece.fandom.com/wiki/Chapter_685) 和 [第 611 集](https://onepiece.fandom.com/wiki/Episode_611)，回忆中桃之助吃了贝加庞克的人造恶魔果实。\n\n9. <a id=\"footnote-9\">&nbsp;</a> [ ↑ ](#cite-9) 海贼王漫画和动画 - [第 95 卷](https://onepiece.fandom.com/wiki/Volume_95) [第 964 章](https://onepiece.fandom.com/wiki/Chapter_964)（第 17 页）和 [第 964 集](https://onepiece.fandom.com/wiki/Episode_964)，时夫人说她出生于八百年前，在三十年前某个时间点。\n\n10. <a id=\"footnote-10\">&nbsp;</a> [ ↑ ](#cite-10) 海贼王漫画 — [第 77 卷](https://onepiece.fandom.com/wiki/SBS_Volume_77) (第 154 页), “尾田仔，如果一个人已经吃过了恶魔果实一口，然后其他人吃了剩下的，他仍然能够获得能力吗？选我，尾田仔”\n\n11. <a id=\"footnote-11\">&nbsp;</a> [ ↑ ](#cite-11) 海贼王漫画和动画 - [第 1 卷](https://onepiece.fandom.com/wiki/Volume_1) [第 1 章](https://onepiece.fandom.com/wiki/Chapter_1) 和 [第 4 集](https://onepiece.fandom.com/wiki/Episode_4)，路飞在吃下橡胶果实之后不久变成橡胶人。\n\n12. <a id=\"footnote-12\">&nbsp;</a> [ ↑ ](#cite-12) 海贼王漫画和动画 - [第 3 卷](https://onepiece.fandom.com/wiki/Volume_3) [第 19 章](https://onepiece.fandom.com/wiki/Chapter_19) 和 [第 8 集](https://onepiece.fandom.com/wiki/Episode_8)，巴基吃下四分五裂果实之后，立即失去游泳的能力。\n\n13. <a id=\"footnote-13\">&nbsp;</a> [ ↑ ](#cite-13) 海贼王漫画和动画 - [第 40 卷](https://onepiece.fandom.com/wiki/Volume_40) [第 385 章](https://onepiece.fandom.com/wiki/Chapter_385)（第 2-3 页）和 [第 271 集](https://onepiece.fandom.com/wiki/Episode_271)，关于吃下两颗恶魔果实的讨论。\n\n14. <a id=\"footnote-14\">&nbsp;</a> [ ↑ ](#cite-14) 海贼王漫画和动画 - [第 62 卷](https://onepiece.fandom.com/wiki/Volume_62) [第 613 章](https://onepiece.fandom.com/wiki/Chapter_613)（第 9 页）和 [第 532 集](https://onepiece.fandom.com/wiki/Episode_532)，白星讲述邓肯的能力。\n\n15. <a id=\"footnote-15\">&nbsp;</a> [ ↑ ](#cite-15) 海贼王漫画和动画 - [第 96 卷](https://onepiece.fandom.com/wiki/Volume_96) [第 969 章](https://onepiece.fandom.com/wiki/Chapter_969)（第 4 页）和 [第 970 集](https://onepiece.fandom.com/wiki/Episode_970)。\n\n16. <a id=\"footnote-16\">&nbsp;</a> [ ↑ ](#cite-16) 海贼王漫画和动画 - [第 41 卷](https://onepiece.fandom.com/wiki/Volume_41) [第 391 章](https://onepiece.fandom.com/wiki/Chapter_391)（第 13-14 页）和 [第 275 集](https://onepiece.fandom.com/wiki/Episode_275)，妮可·罗宾的恶魔果实能力让她成为奥哈拉岛的弃儿。村名和其他孩子认为她是个怪胎。\n\n17. <a id=\"footnote-17\">&nbsp;</a> [ ↑ ](#cite-7) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画 — [第 24 卷](https://onepiece.fandom.com/wiki/SBS_Volume_24) (第 166 页)，Miss Doublefinger 的 [荆棘果实](https://onepiece.fandom.com/wiki/Toge_Toge_no_Mi) 能力是如何从他的衣服里出来的？\n\n18. <a id=\"footnote-18\">&nbsp;</a> [ ↑ ](#cite-18) 海贼王动画 — [第 944 集](https://onepiece.fandom.com/wiki/Episode_944)，奎因的蜿龙变换展示了细节，他的人造胳膊和他身体的剩余部分一起变换。\n\n19. <a id=\"footnote-19\">&nbsp;</a> [ ↑ ](#cite-19) 海贼王漫画和动画 - [第 51 卷](https://onepiece.fandom.com/wiki/Volume_51) [第 499 章](https://onepiece.fandom.com/wiki/Chapter_499)（第 16 页）和 [第 393 集](https://onepiece.fandom.com/wiki/Episode_393)，波妮和她的衣服一起变换。\n\n20. <a id=\"footnote-20\">&nbsp;</a> [ ↑ ](#cite-20) 海贼王漫画和动画 - [第 51 卷](https://onepiece.fandom.com/wiki/Volume_51) [第 501 章](https://onepiece.fandom.com/wiki/Chapter_501)（第 7 页）和 [第 395 集](https://onepiece.fandom.com/wiki/Episode_395)，奴隶清单和恶魔果实能力者一起，出现在地下售价清单。\n\n21. <a id=\"footnote-21\">&nbsp;</a> [ ↑ ](#cite-21) 海贼王漫画和动画 - [第 77 卷](https://onepiece.fandom.com/wiki/Volume_77) [第 766 章](https://onepiece.fandom.com/wiki/Chapter_766)（第 3 页）和 [第 705 集](https://onepiece.fandom.com/wiki/Episode_705)，迪埃斯·巴雷鲁斯说海军想要用多少钱买手术果实。\n\n22. <a id=\"footnote-22\">&nbsp;</a> [ ↑ ](#cite-22) 海贼王漫画和动画 - [第 41 卷](https://onepiece.fandom.com/wiki/Volume_41) [第 392 章](https://onepiece.fandom.com/wiki/Chapter_392)（第 5 页）和 [第 275 集](https://onepiece.fandom.com/wiki/Episode_275)，哈古瓦尔·D·萨乌罗看见了罗宾的恶魔果实并不奇怪，因为他在伟大航路看过。\n\n23. <a id=\"footnote-23\">&nbsp;</a> [ ↑ ](#cite-23) 海贼王漫画和动画 - [第 2 卷](https://onepiece.fandom.com/wiki/Volume_2) [第 15 章](https://onepiece.fandom.com/wiki/Chapter_15)（第 10 页）和 [第 6 集](https://onepiece.fandom.com/wiki/Episode_6)，路飞面对巴基。\n\n24. <a id=\"footnote-24\">&nbsp;</a> [ ↑ ](#cite-24) 海贼王漫画和动画 - [第 12 卷](https://onepiece.fandom.com/wiki/Volume_12) [第 100 章](https://onepiece.fandom.com/wiki/Chapter_100)（第 14 页）和 [第 53 集](https://onepiece.fandom.com/wiki/Episode_53)，路飞面对斯摩格。\n\n25. <a id=\"footnote-25\">&nbsp;</a> [ ↑ ](#cite-25) 海贼王漫画和动画 - [第 68 卷](https://onepiece.fandom.com/wiki/Volume_68) [第 676 章](https://onepiece.fandom.com/wiki/Chapter_676)（第 6-7 页）和 [第 602 集](https://onepiece.fandom.com/wiki/Episode_602)，蝾螈果实·美西螈形态正在重生。\n\n26. <a id=\"footnote-26\">&nbsp;</a> [ ↑ ](#cite-26) 海贼王漫画和动画 - [第 74 卷](https://onepiece.fandom.com/wiki/Volume_74) [第 738 章](https://onepiece.fandom.com/wiki/Chapter_738)（第 4-7 页）和 [第 671 集](https://onepiece.fandom.com/wiki/Episode_671)，SMILE 工厂公布。\n\n27. <a id=\"footnote-27\">&nbsp;</a> [ ↑ ](#cite-27) 海贼王漫画和动画 - [第 40 卷](https://onepiece.fandom.com/wiki/Volume_40) [第 385 章](https://onepiece.fandom.com/wiki/Chapter_385)（第 4 页）和 [第 271 集](https://onepiece.fandom.com/wiki/Episode_271)，卡库和卡莉法在讨论他们的未知恶魔果实。\n\n28. <a id=\"footnote-28\">&nbsp;</a> [ ↑ ](#cite-28) 海贼王漫画 - [第 45 卷](https://onepiece.fandom.com/wiki/Volume_45) （第 188 页），尾田解释恶魔果实图鉴。\n\n29. <a id=\"footnote-29\">&nbsp;</a> [ ↑ ](#cite-29) 海贼王漫画 - [第 45 卷](https://onepiece.fandom.com/wiki/Volume_45) [第 440 章](https://onepiece.fandom.com/wiki/Chapter_440)（第 17 页），黑胡子谈及他对暗暗果实的研究。\n\n30. <a id=\"footnote-30\">&nbsp;</a> [ ↑ ](#cite-30) 海贼王漫画和动画 - [第 84 卷](https://onepiece.fandom.com/wiki/Volume_84) [第 840 章](https://onepiece.fandom.com/wiki/Chapter_840)（第 14 页）和 [第 803 集](https://onepiece.fandom.com/wiki/Episode_803)，图鉴作为文斯莫克·山治的拥有物展示。\n\n31. <a id=\"footnote-31\">&nbsp;</a> [ ↑ ](#cite-31) 海贼王漫画和动画 - [第 48 卷](https://onepiece.fandom.com/wiki/Volume_48) [第 464 章](https://onepiece.fandom.com/wiki/Chapter_464)（第 6-8 页）和 [第 359 集](https://onepiece.fandom.com/wiki/Episode_359)，山治提到他读过一本关于恶魔果实的书。\n\n32. <a id=\"footnote-32\">&nbsp;</a> [ ↑ ](#cite-32) 海贼王漫画和动画 - [第 69 卷](https://onepiece.fandom.com/wiki/Volume_69) [第 689 章](https://onepiece.fandom.com/wiki/Chapter_689)（第 15-17 页）和 [第 615 集](https://onepiece.fandom.com/wiki/Episode_615)，凯撒解释他的 SMILE 恶魔果实。\n\n33. <a id=\"footnote-33\">&nbsp;</a> [ ↑ ](#cite-33) 海贼王漫画和动画 - [第 70 卷](https://onepiece.fandom.com/wiki/Volume_70) [第 697 章](https://onepiece.fandom.com/wiki/Chapter_697)-[第 698 章](https://onepiece.fandom.com/wiki/Chapter_698)（第 17 页，第 13-17 页）和 [第 623 集](https://onepiece.fandom.com/wiki/Episode_623)-[第 625 集](https://onepiece.fandom.com/wiki/Episode_625)，罗谈到凯多和 SMILE 的关系。\n\n34. <a id=\"footnote-34\">&nbsp;</a> [ ↑ ](#cite-34) 海贼王漫画和动画 - [第 0 卷](https://onepiece.fandom.com/wiki/Volume_0) [第 0 章](https://onepiece.fandom.com/wiki/Chapter_0)（第 16-18 页）和 [第 0 集](https://onepiece.fandom.com/wiki/Episode_0)，史基从海底监狱逃脱。\n\n35. <a id=\"footnote-35\">&nbsp;</a> [ ↑ ](#cite-35) 海贼王漫画和动画 - [第 54 卷](https://onepiece.fandom.com/wiki/Volume_54) [第 530 章](https://onepiece.fandom.com/wiki/Chapter_530) 和 [第 425 集](https://onepiece.fandom.com/wiki/Episode_425)，战国说史基从海底监狱逃脱。\n\n36. <a id=\"footnote-36\">&nbsp;</a> [ ↑ ](#cite-36) 海贼王动画 - [第 426 集](https://onepiece.fandom.com/wiki/Episode_426)，回忆中史基从海底监狱逃脱。\n\n37. <a id=\"footnote-37\">&nbsp;</a> [ ↑ ](#cite-37) 海贼王漫画和动画 - [第 56 卷](https://onepiece.fandom.com/wiki/Volume_56) [第 544 章](https://onepiece.fandom.com/wiki/Chapter_544)（第 11 页）和 [第 447 集](https://onepiece.fandom.com/wiki/Episode_447)，克洛克达尔解释海底监狱的狱卒兽都是“觉醒”的动物系。\n\n38. <a id=\"footnote-38\">&nbsp;</a> [ ↑ ](#cite-38) 海贼王漫画和动画 - [第 78 卷](https://onepiece.fandom.com/wiki/Volume_78) [第 785 章](https://onepiece.fandom.com/wiki/Chapter_785)（第 8 页）和 [第 727 集](https://onepiece.fandom.com/wiki/Episode_727)，多弗朗明哥解释觉醒的恶魔果实所赋予的能力。\n\n39. <a id=\"footnote-39\">&nbsp;</a> [ ↑ ](#cite-39) 海贼王漫画和动画 - [第 88 卷](https://onepiece.fandom.com/wiki/Volume_88) [第 882 章](https://onepiece.fandom.com/wiki/Chapter_882)（第 8-11 页）和 [第 855 集](https://onepiece.fandom.com/wiki/Episode_855)。\n\n40. <a id=\"footnote-40\">&nbsp;</a> [ ↑ ](#cite-40) 海贼王剧场版 - [海贼王：黄金城](https://onepiece.fandom.com/wiki/One_Piece_Film:_Gold)，卡丽娜解释特索罗觉醒的能力。\n\n41. <a id=\"footnote-41\">&nbsp;</a> [ ↑ ](#cite-41) 海贼王剧场版 — [海贼王：狂热行动](https://onepiece.fandom.com/wiki/One_Piece:_Stampede), 巴雷特的能力。\n\n42. <a id=\"footnote-42\">&nbsp;</a> [ ↑ ](#cite-42) 海贼王漫画和动画 - [第 76 卷](https://onepiece.fandom.com/wiki/Volume_76) [第 763 章](https://onepiece.fandom.com/wiki/Chapter_763)（第 11 页）和 [第 702 集](https://onepiece.fandom.com/wiki/Episode_702)，多弗朗明哥解释恶魔果实可能是罗唯一治愈的希望。\n\n43. <a id=\"footnote-43\">&nbsp;</a> [ ↑ ](#cite-43) 海贼王漫画和动画 - [第 52 卷](https://onepiece.fandom.com/wiki/Volume_52) [第 505 章](https://onepiece.fandom.com/wiki/Chapter_505)（第 2-7 页）和 [第 399 集](https://onepiece.fandom.com/wiki/Episode_399)，海军和路飞、罗、基德的战斗。\n\n44. <a id=\"footnote-44\">&nbsp;</a> [ ↑ ](#cite-44) 海贼王漫画和动画 - [第 53 卷](https://onepiece.fandom.com/wiki/Volume_53) [第 515 章](https://onepiece.fandom.com/wiki/Chapter_515)（第 10 页）和 [第 409 集](https://onepiece.fandom.com/wiki/Episode_409)，九蛇三姐妹发现路飞可以拉伸，认为所有男人都可以这样。\n\n45. <a id=\"footnote-45\">&nbsp;</a> [ ↑ ](#cite-45) 海贼王漫画和动画 - [第 60 卷](https://onepiece.fandom.com/wiki/Volume_60) [第 594 章](https://onepiece.fandom.com/wiki/Chapter_594)（第 15 页）和 [第 512 集](https://onepiece.fandom.com/wiki/Episode_512)，九蛇拉甚平和雷利的皮肤。\n\n46. <a id=\"footnote-46\">&nbsp;</a> [ ↑ ](#cite-46) 海贼王漫画和动画 - [第 1 卷](https://onepiece.fandom.com/wiki/Volume_1) [第 1 章](https://onepiece.fandom.com/wiki/Chapter_1)（第 22 页）和 [第 4 集](https://onepiece.fandom.com/wiki/Episode_4)，路飞村庄的人们发现他的能力很有趣。\n\n47. <a id=\"footnote-47\">&nbsp;</a> [ ↑ ](#cite-47) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画 — [第 41 卷](https://onepiece.fandom.com/wiki/SBS_Volume_41)（第 206 页）, 尾田说所有水的形态会让恶魔果实能力者虚弱。\n\n48. <a id=\"footnote-48\">&nbsp;</a> [ ↑ ](#cite-48) 海贼王漫画和动画 - [第 80 卷](https://onepiece.fandom.com/wiki/Volume_80) [第 806 章](https://onepiece.fandom.com/wiki/Chapter_806)（第 5 页）和 [第 755 集](https://onepiece.fandom.com/wiki/Episode_755)，路飞骑着沃尼搭便车\n\n49. <a id=\"footnote-49\">&nbsp;</a> [ ↑ ](#cite-49) 海贼王漫画和动画 - [第 63 卷](https://onepiece.fandom.com/wiki/Volume_63) [第 617 章](https://onepiece.fandom.com/wiki/Chapter_617)（第 10 页）和 [第 536 集](https://onepiece.fandom.com/wiki/Episode_536)，布鲁克随着水位上升逐渐失去力量。\n\n50. <a id=\"footnote-50\">&nbsp;</a> [ ↑ ](#cite-50) 海贼王漫画和动画 - [第 22 卷](https://onepiece.fandom.com/wiki/Volume_22) [第 200 章](https://onepiece.fandom.com/wiki/Chapter_200)（第 16-19 页）和 [第 122 集](https://onepiece.fandom.com/wiki/Episode_122)，路飞变成水路飞和克洛克达尔战斗。\n\n51. <a id=\"footnote-51\">&nbsp;</a> [ ↑ ](#cite-51) 海贼王漫画和动画 - [第 22 卷](https://onepiece.fandom.com/wiki/Volume_22) [第 201 章](https://onepiece.fandom.com/wiki/Chapter_201)（第 3-11 页，第 18-19 页）和 [第 122 集](https://onepiece.fandom.com/wiki/Episode_122)。\n\n52. <a id=\"footnote-52\">&nbsp;</a> [ ↑ ](#cite-52) 海贼王漫画和动画 - [第 24 卷](https://onepiece.fandom.com/wiki/Volume_24) [第 219 章](https://onepiece.fandom.com/wiki/Chapter_219)（第 10-12 页，第 19 页）和 [第 144 集](https://onepiece.fandom.com/wiki/Episode_144)，路飞、索隆、山治探索圣·布里斯。\n\n53. <a id=\"footnote-53\">&nbsp;</a> [ ↑ ](#cite-53) 海贼王漫画和动画 - [第 22 卷](https://onepiece.fandom.com/wiki/Volume_22) [第 199 章](https://onepiece.fandom.com/wiki/Chapter_199) 和 [第 121 集](https://onepiece.fandom.com/wiki/Episode_121)，路飞使用水来固化克洛克达尔的沙子。\n\n54. <a id=\"footnote-54\">&nbsp;</a> [ ↑ ](#cite-54) 海贼王漫画和动画 - [第 84 卷](https://onepiece.fandom.com/wiki/Volume_84) [第 842 章](https://onepiece.fandom.com/wiki/Chapter_842)（第 5 页）和 [第 805 集](https://onepiece.fandom.com/wiki/Episode_805)，娜美制造雨水来软化克力架坚硬的饼干。\n\n55. <a id=\"footnote-55\">&nbsp;</a> [ ↑ ](#cite-55) 海贼王漫画和动画 - [第 86 卷](https://onepiece.fandom.com/wiki/Volume_86) [第 863 章](https://onepiece.fandom.com/wiki/Chapter_863)（第 15 页）和 [第 833 集](https://onepiece.fandom.com/wiki/Episode_833)，甚平用茶冲泡了卡塔库栗的糯米，使其失去粘性。\n\n56. <a id=\"footnote-56\">&nbsp;</a> [ ↑ ](#cite-56) 海贼王漫画和动画 - [第 43 卷](https://onepiece.fandom.com/wiki/Volume_43) [第 411 章](https://onepiece.fandom.com/wiki/Chapter_411)（第 11-15 页）和 [第 295 集](https://onepiece.fandom.com/wiki/Episode_295)，纳米和山治使用水冲走卡莉法的泡泡影响。\n\n57. <a id=\"footnote-57\">&nbsp;</a> [ ↑ ](#cite-57) 海贼王漫画和动画 - [第 57 卷](https://onepiece.fandom.com/wiki/Volume_57) [第 558 章](https://onepiece.fandom.com/wiki/Chapter_558)（第 13 页）和 [第 467 集](https://onepiece.fandom.com/wiki/Episode_467)，甚平用海水冲莫利亚的僵尸，净化他们。\n\n58. <a id=\"footnote-58\">&nbsp;</a> [ ↑ ](#cite-58) 海贼王剧场版 - [海贼王：黄金城](https://onepiece.fandom.com/wiki/One_Piece_Film:_Gold)，特索罗失去了对黄金的控制力，当海水冲过它们的时候。\n\n59. <a id=\"footnote-59\">&nbsp;</a> [ ↑ ](#cite-59) 海贼王漫画和动画 - [第 20 卷](https://onepiece.fandom.com/wiki/Volume_20) [第 178 章](https://onepiece.fandom.com/wiki/Chapter_178)（第 5 页）和 [第 110 集](https://onepiece.fandom.com/wiki/Episode_110)，克洛克达尔讲述一颗恶魔果实的真相。\n\n60. <a id=\"footnote-60\">&nbsp;</a> [ ↑ ](#cite-60) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画 - [第 79 卷](https://onepiece.fandom.com/wiki/Volume_79)（第 100 页），恶魔果实优劣等级揭晓。\n\n61. <a id=\"footnote-61\">&nbsp;</a> [ ↑ ](#cite-61) 海贼王漫画和动画 - [第 56 卷](https://onepiece.fandom.com/wiki/Volume_56) [第 546 章](https://onepiece.fandom.com/wiki/Chapter_546)（第 2 页）和 [第 449 集](https://onepiece.fandom.com/wiki/Episode_449)，因为 Mr. 3 和麦哲伦的力量有冲突，克洛克达尔对这两种力量对决的惊人结果发表评论。\n\n62. <a id=\"footnote-62\">&nbsp;</a> [ ↑ ](#cite-62) 海贼王漫画和动画 - [第 18 卷](https://onepiece.fandom.com/wiki/Volume_18) [第 158 章](https://onepiece.fandom.com/wiki/Chapter_158)（第 18-19 页）和 [第 95 集](https://onepiece.fandom.com/wiki/Episode_95)，艾斯和斯摩格战斗。\n\n63. <a id=\"footnote-63\">&nbsp;</a> [ ↑ ](#cite-63) 海贼王漫画和动画 - [第 58 卷](https://onepiece.fandom.com/wiki/Volume_58) [第 572 章](https://onepiece.fandom.com/wiki/Chapter_572)（第 9 页）和 [第 481 集](https://onepiece.fandom.com/wiki/Episode_481)，艾斯和青雉战斗。\n\n64. <a id=\"footnote-64\">&nbsp;</a> [ ↑ ](#cite-64) 海贼王剧场版 - [死亡尽头的冒险](https://onepiece.fandom.com/wiki/Dead_End_Adventure)，路飞和嘉斯帕德战斗。\n\n65. <a id=\"footnote-65\">&nbsp;</a> [ ↑ ](#cite-65) 海贼王漫画和动画 - [第 87 卷](https://onepiece.fandom.com/wiki/Volume_87) [第 877 章](https://onepiece.fandom.com/wiki/Chapter_877)（第 10 页）和 [第 849 集](https://onepiece.fandom.com/wiki/Episode_849)，路飞和卡塔库栗在阳光千里号上战斗。\n\n66. <a id=\"footnote-66\">&nbsp;</a> [ ↑ ](#cite-66) 海贼王漫画和动画 - [第 87 卷](https://onepiece.fandom.com/wiki/Volume_87) [第 879 章](https://onepiece.fandom.com/wiki/Chapter_879)（第 11-17 页）和 [第 851 集](https://onepiece.fandom.com/wiki/Episode_851)-[第 852 集](https://onepiece.fandom.com/wiki/Episode_852)，路飞和卡塔库栗在镜世界中战斗。\n\n67. <a id=\"footnote-67\">&nbsp;</a> [ ↑ ](#cite-67) 海贼王漫画和动画 - [第 30 卷](https://onepiece.fandom.com/wiki/Volume_30) [第 279 章](https://onepiece.fandom.com/wiki/Chapter_279)（第 9-19 页）和 [第 182 集](https://onepiece.fandom.com/wiki/Episode_182)，路飞和艾尼路战斗。\n\n68. <a id=\"footnote-68\">&nbsp;</a> [ ↑ ](#cite-68) 海贼王漫画和动画 - [第 56 卷](https://onepiece.fandom.com/wiki/Volume_56) [第 546 章](https://onepiece.fandom.com/wiki/Chapter_546)（第 18-19 页）和 [第 449 集](https://onepiece.fandom.com/wiki/Episode_449)，Mr.3 阻止麦哲伦。\n\n69. <a id=\"footnote-69\">&nbsp;</a> [ ↑ ](#cite-69) 海贼王剧场版 - [海贼王：黄金城](https://onepiece.fandom.com/wiki/One_Piece_Film:_Gold)，妮可·罗宾抓住田中先生，让山治打败他。\n\n70. <a id=\"footnote-70\">&nbsp;</a> [ ↑ ](#cite-70) 海贼王漫画和动画 - [第 84 卷](https://onepiece.fandom.com/wiki/Volume_84) [第 848 章](https://onepiece.fandom.com/wiki/Chapter_848)（第 14-15 页）和 [第 814 集](https://onepiece.fandom.com/wiki/Episode_814)，布鲁克和几名霍米兹战斗。\n\n71. <a id=\"footnote-71\">&nbsp;</a> [ ↑ ](#cite-71) 海贼王漫画和动画 - [第 87 卷](https://onepiece.fandom.com/wiki/Volume_87) [第 876 章](https://onepiece.fandom.com/wiki/Chapter_876)（第 16 页）和 [第 848 集](https://onepiece.fandom.com/wiki/Episode_848)，布琳迷惑几名霍米兹。\n\n72. <a id=\"footnote-72\">&nbsp;</a> [ ↑ ](#cite-72) 海贼王漫画和动画 - [第 91 卷](https://onepiece.fandom.com/wiki/Volume_91) [第 918 章](https://onepiece.fandom.com/wiki/Chapter_918)（第 4-5 页）和 [第 906 集](https://onepiece.fandom.com/wiki/Episode_906)，小玉驯服斯皮德。\n\n73. <a id=\"footnote-73\">&nbsp;</a> [ ↑ ](#cite-73) 海贼王漫画和动画 - [第 53 卷](https://onepiece.fandom.com/wiki/Volume_53) [第 517 章](https://onepiece.fandom.com/wiki/Chapter_517)（第 14-15 页）和 [第 411 集](https://onepiece.fandom.com/wiki/Episode_411)，一名九蛇战士告诉年轻成员关于戈尔贡姐妹捏造的传说。\n\n74. <a id=\"footnote-74\">&nbsp;</a> [ ↑ ](#cite-74) 海贼王漫画和动画 - [第 63 卷](https://onepiece.fandom.com/wiki/Volume_63) [第 615 章](https://onepiece.fandom.com/wiki/Chapter_615)（第 7 页）和 [第 534 集](https://onepiece.fandom.com/wiki/Episode_534)，邓肯自己告诉被霍迪琼斯抓住的人们，他的能力是个“诅咒”。\n\n75. <a id=\"footnote-75\">&nbsp;</a> [ ↑ ](#cite-75) 海贼王漫画和动画 - [第 75 卷](https://onepiece.fandom.com/wiki/Volume_75) [第 743 章](https://onepiece.fandom.com/wiki/Chapter_743)（第 5 页）和 [第 677 集](https://onepiece.fandom.com/wiki/Episode_677)。\n\n76. <a id=\"footnote-76\">&nbsp;</a> [ ↑ ](#cite-76) 海贼王漫画和动画 - [第 71 卷](https://onepiece.fandom.com/wiki/Volume_71) [第 711 章](https://onepiece.fandom.com/wiki/Chapter_711)（第 2-7 页）和 [第 641 集](https://onepiece.fandom.com/wiki/Episode_641)，妮可·罗宾被缝在地上，随后雷欧解除缝针。\n\n77. <a id=\"footnote-77\">&nbsp;</a> [ ↑ ](#cite-77) 海贼王漫画和动画 - [第 44 卷](https://onepiece.fandom.com/wiki/Volume_44) [第 423 章](https://onepiece.fandom.com/wiki/Chapter_423)（第 9 页）和 [第 306 集](https://onepiece.fandom.com/wiki/Episode_306)，，范克弗里德恢复了他的动物形态，因为弗兰奇威胁说他会在它的头上开一个洞。\n\n78. <a id=\"footnote-78\">&nbsp;</a> [ ↑ ](#cite-78) 海贼王漫画和动画 - [第 94 卷](https://onepiece.fandom.com/wiki/Volume_94) [第 943 章](https://onepiece.fandom.com/wiki/Chapter_943)（第 8-13 页）和 [第 941 集](https://onepiece.fandom.com/wiki/Episode_941)，日和、酒天丸、兵五郎和阿忍解释 SMILE 对其他人的副作用。\n\n79. <a id=\"footnote-79\">&nbsp;</a> [ ↑ ](#cite-79) 海贼王漫画和动画 - [第 74 卷](https://onepiece.fandom.com/wiki/Volume_74) [第 738 章](https://onepiece.fandom.com/wiki/Chapter_738)（第 4-7 页）和 [第 671 集](https://onepiece.fandom.com/wiki/Episode_671)，多弗朗明哥海贼团的一名成员向矮人族撒谎说他们需要 SMILE。\n\n80. <a id=\"footnote-80\">&nbsp;</a> [ ↑ ](#cite-80) 海贼王漫画和动画 - [第 17 卷](https://onepiece.fandom.com/wiki/Volume_17) [第 149 章](https://onepiece.fandom.com/wiki/Chapter_149)（第 3-9 页）和 [第 88 集](https://onepiece.fandom.com/wiki/Episode_88)，解释蓝波球的作用。\n\n81. <a id=\"footnote-81\">&nbsp;</a> [ ↑ ](#cite-81) 海贼王动画 - [第 427 集](https://onepiece.fandom.com/wiki/Episode_427)。\n\n82. <a id=\"footnote-82\">&nbsp;</a> [ ↑ ](#cite-82) 海贼王漫画和动画 - [第 19 卷](https://onepiece.fandom.com/wiki/Volume_19) [第 169 章](https://onepiece.fandom.com/wiki/Chapter_169)（第 17 页）和 [第 106 集](https://onepiece.fandom.com/wiki/Episode_106)，贝尔说世界上已知的几种飞行能力。\n\n83. <a id=\"footnote-83\">&nbsp;</a> [ ↑ ](#cite-83) 海贼王漫画和动画 - [第 29 卷](https://onepiece.fandom.com/wiki/Volume_29) [第 274 章](https://onepiece.fandom.com/wiki/Chapter_274)（第 15 页）和 [第 180 集](https://onepiece.fandom.com/wiki/Episode_180)，罗宾说在已存在的众多恶魔果实当中，闪电果实是少数被认为是无与伦比的其中之一。\n\n84. <a id=\"footnote-84\">&nbsp;</a> [ ↑ ](#cite-84) 海贼王漫画和动画 - [第 45 卷](https://onepiece.fandom.com/wiki/Volume_45) [第 440 章](https://onepiece.fandom.com/wiki/Chapter_440)（第 17 页）和 [第 325 集](https://onepiece.fandom.com/wiki/Episode_325)，蒂奇说暗暗果实是独特的，即使对自然系来说也是。\n\n85. <a id=\"footnote-85\">&nbsp;</a> [ ↑ ](#cite-85) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画 - [第 58 卷](https://onepiece.fandom.com/wiki/SBS_Volume_58)（第 24 页），尾田确认震震果实是最厉害的超人系。\n\n86. <a id=\"footnote-86\">&nbsp;</a> [ ↑ ](#cite-86) [生命卡 - 海贼王虚拟字典](https://onepiece.fandom.com/wiki/Vivre_Card_-_One_Piece_Visual_Dictionary)（卡片编号 0595），岩浆果实据说是拥有最高攻击力的（果实）之一。\n\n87. <a id=\"footnote-87\">&nbsp;</a> [ ↑ ](#cite-87) 海贼王漫画和动画 - [第 76 卷](https://onepiece.fandom.com/wiki/Volume_76) [第 761 章](https://onepiece.fandom.com/wiki/Chapter_761)（第 7-9 页）和 [第 700 集](https://onepiece.fandom.com/wiki/Episode_700)，多弗朗明哥说手术果实是“终极恶魔果实”。\n\n88. <a id=\"footnote-88\">&nbsp;</a> [ ↑ ](#cite-88) [Dillon, C., 2001. 迷信和民间偏方](https://books.google.com/books?id=_LHh5Dgi1EEC&pg=PA63&lpg=PA63#v=onepage&q&f=false)，San Jose, Calif.: Authors Choice Press, 第 63 页。\n\n89. <a id=\"footnote-89\">&nbsp;</a> [ ↑ ](#cite-89) [Compton, N., 2013. 为什么水手不能游泳，更多的海洋奇观](https://books.google.com/books?id=dWQTAAAAQBAJ&pg=PA18&lpg=PA18#v=onepage&q&f=false)，伦敦：布卢姆斯伯里，第 18 页。\n\n90. <a id=\"footnote-90\">&nbsp;</a> [ ↑ ](#cite-90) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画 - [第 16 卷](https://onepiece.fandom.com/wiki/SBS_Volume_16)（第 80 页），粉丝问题：如果我吃路飞，我能变成橡胶人吗？\n\n91. <a id=\"footnote-91\">&nbsp;</a> [ ↑ ](#cite-91) [SBS](https://onepiece.fandom.com/wiki/SBS) 海贼王漫画 - [第 37 卷](https://onepiece.fandom.com/wiki/SBS_Volume_37)（第 46 页），尾田决定恶魔果实是否仅适用于动画。\n\n## 站点导航\n\n### 恶魔果实\n\n| | 超人系 |\n|--------|--------|\n| 官方的 | [橡胶果实](https://onepiece.fandom.com/wiki/Gomu_Gomu_no_Mi) · [四分五裂果实](https://onepiece.fandom.com/wiki/Bara_Bara_no_Mi) · [滑滑果实](https://onepiece.fandom.com/wiki/Sube_Sube_no_Mi) · [千斤果实](https://onepiece.fandom.com/wiki/Kilo_Kilo_no_Mi) · [爆炸果实](https://onepiece.fandom.com/wiki/Bomu_Bomu_no_Mi) · [花花果实](https://onepiece.fandom.com/wiki/Hana_Hana_no_Mi) · [蜡蜡果实](https://onepiece.fandom.com/wiki/Doru_Doru_no_Mi) · [吞吞果实](https://onepiece.fandom.com/wiki/Baku_Baku_no_Mi) · [模仿果实](https://onepiece.fandom.com/wiki/Mane_Mane_no_Mi) · [荆棘果实](https://onepiece.fandom.com/wiki/Toge_Toge_no_Mi) · [斩斩果实](https://onepiece.fandom.com/wiki/Supa_Supa_no_Mi) · [监狱果实](https://onepiece.fandom.com/wiki/Ori_Ori_no_Mi) · [弹簧果实](https://onepiece.fandom.com/wiki/Bane_Bane_no_Mi) · [线线果实](https://onepiece.fandom.com/wiki/Ito_Ito_no_Mi) · [迟缓果实](https://onepiece.fandom.com/wiki/Noro_Noro_no_Mi) · [门门果实](https://onepiece.fandom.com/wiki/Doa_Doa_no_Mi) · [泡泡果实](https://onepiece.fandom.com/wiki/Awa_Awa_no_Mi) · [球球果实](https://onepiece.fandom.com/wiki/Beri_Beri_no_Mi) · [锈锈果实](https://onepiece.fandom.com/wiki/Sabi_Sabi_no_Mi) · [车轮果实](https://onepiece.fandom.com/wiki/Shari_Shari_no_Mi) · [黄泉果实](https://onepiece.fandom.com/wiki/Yomi_Yomi_no_Mi) · [影影果实](https://onepiece.fandom.com/wiki/Kage_Kage_no_Mi) · [幽灵果实](https://onepiece.fandom.com/wiki/Horo_Horo_no_Mi) · [透明果实](https://onepiece.fandom.com/wiki/Suke_Suke_no_Mi) · [肉球果实](https://onepiece.fandom.com/wiki/Nikyu_Nikyu_no_Mi) · [手术果实](https://onepiece.fandom.com/wiki/Ope_Ope_no_Mi) · [城堡果实](https://onepiece.fandom.com/wiki/Shiro_Shiro_no_Mi) · [甜甜果实](https://onepiece.fandom.com/wiki/Mero_Mero_no_Mi) · [毒毒果实](https://onepiece.fandom.com/wiki/Doku_Doku_no_Mi) · [荷尔蒙果实](https://onepiece.fandom.com/wiki/Horu_Horu_no_Mi) · [剪刀果实](https://onepiece.fandom.com/wiki/Choki_Choki_no_Mi) · [震震果实](https://onepiece.fandom.com/wiki/Gura_Gura_no_Mi) · [洗洗果实](https://onepiece.fandom.com/wiki/Woshu_Woshu_no_Mi) · [飘飘果实](https://onepiece.fandom.com/wiki/Fuwa_Fuwa_no_Mi) · [靶靶果实](https://onepiece.fandom.com/wiki/Mato_Mato_no_Mi) · [武器果实](https://onepiece.fandom.com/wiki/Buki_Buki_no_Mi) · [转转果实](https://onepiece.fandom.com/wiki/Guru_Guru_no_Mi) · [黏黏果实](https://onepiece.fandom.com/wiki/Beta_Beta_no_Mi) · [童趣果实](https://onepiece.fandom.com/wiki/Hobi_Hobi_no_Mi) · [屏障果实](https://onepiece.fandom.com/wiki/Bari_Bari_no_Mi) · [缝缝果实](https://onepiece.fandom.com/wiki/Nui_Nui_no_Mi) · [瞪瞪果实](https://onepiece.fandom.com/wiki/Giro_Giro_no_Mi) · [艺术果实](https://onepiece.fandom.com/wiki/Ato_Ato_no_Mi) · [夹克果实](https://onepiece.fandom.com/wiki/Jake_Jake_no_Mi) · [爆爆果实](https://onepiece.fandom.com/wiki/Pamu_Pamu_no_Mi) · [游游果实](https://onepiece.fandom.com/wiki/Sui_Sui_no_Mi) · [吨吨果实](https://onepiece.fandom.com/wiki/Ton_Ton_no_Mi) · [旗帜果实](https://onepiece.fandom.com/wiki/Hira_Hira_no_Mi) · [静音果实](https://onepiece.fandom.com/wiki/Nagi_Nagi_no_Mi) · [治愈果实](https://onepiece.fandom.com/wiki/Chiyu_Chiyu_no_Mi) · [魂魂果实](https://onepiece.fandom.com/wiki/Soru_Soru_no_Mi) · [镜镜果实](https://onepiece.fandom.com/wiki/Mira_Mira_no_Mi) · [舔舔果实](https://onepiece.fandom.com/wiki/Pero_Pero_no_Mi) · [饼干果实](https://onepiece.fandom.com/wiki/Bisu_Bisu_no_Mi) · [黄油果实](https://onepiece.fandom.com/wiki/Bata_Bata_no_Mi) · [书书果实](https://onepiece.fandom.com/wiki/Buku_Buku_no_Mi) · [奶油果实](https://onepiece.fandom.com/wiki/Kuri_Kuri_no_Mi) · [榨榨果实](https://onepiece.fandom.com/wiki/Shibo_Shibo_no_Mi) · [记忆果实](https://onepiece.fandom.com/wiki/Memo_Memo_no_Mi) · [糯糯果实](https://onepiece.fandom.com/wiki/Mochi_Mochi_no_Mi) · [蒸腾果实](https://onepiece.fandom.com/wiki/Hoya_Hoya_no_Mi) · [热热果实](https://onepiece.fandom.com/wiki/Netsu_Netsu_no_Mi) · [吃吃果实](https://onepiece.fandom.com/wiki/Kuku_Kuku_no_Mi) · [乱乱果实](https://onepiece.fandom.com/wiki/Gocha_Gocha_no_Mi) · [推推果实](https://onepiece.fandom.com/wiki/Oshi_Oshi_no_Mi) · [鼓舞果实](https://onepiece.fandom.com/wiki/Kobu_Kobu_no_Mi) · [团子果实](https://onepiece.fandom.com/wiki/Kibi_Kibi_no_Mi) · [时时果实](https://onepiece.fandom.com/wiki/Toki_Toki_no_Mi) · [熟熟果实](https://onepiece.fandom.com/wiki/Juku_Juku_no_Mi) · [卷卷果实](https://onepiece.fandom.com/wiki/Maki_Maki_no_Mi) |\n| 非官方的 | [音音果实](https://onepiece.fandom.com/wiki/Goe_Goe_no_Mi) · [悄悄话果实](https://onepiece.fandom.com/wiki/Hiso_Hiso_no_Mi) · [镰刀果实](https://onepiece.fandom.com/wiki/Kama_Kama_no_Mi) · [滋滋果实](https://onepiece.fandom.com/wiki/Kachi_Kachi_no_Mi) · [睡眠果实](https://onepiece.fandom.com/wiki/Nemu_Nemu_no_Mi) · [小小果实](https://onepiece.fandom.com/wiki/Mini_Mini_no_Mi) · [热热果实](https://onepiece.fandom.com/wiki/Atsu_Atsu_no_Mi) · [蘑菇果实](https://onepiece.fandom.com/wiki/Noko_Noko_no_Mi) · [网网果实](https://onepiece.fandom.com/wiki/Ami_Ami_no_Mi) · [复制果实](https://onepiece.fandom.com/wiki/Kopi_Kopi_no_Mi) · [倒退果实](https://onepiece.fandom.com/wiki/Modo_Modo_no_Mi) · [丛生果实](https://onepiece.fandom.com/wiki/Mosa_Mosa_no_Mi) · [宠物果实](https://onepiece.fandom.com/wiki/Peto_Peto_no_Mi) · [莫莫果实](https://onepiece.fandom.com/wiki/Moa_Moa_no_Mi) · [方块果实](https://onepiece.fandom.com/wiki/Kyubu_Kyubu_no_Mi) · [硝酸果实](https://onepiece.fandom.com/wiki/Nito_Nito_no_Mi) · [恋爱果实](https://onepiece.fandom.com/wiki/Hore_Hore_no_Mi) · [矿石果实](https://onepiece.fandom.com/wiki/Gutsu_Gutsu_no_Mi) · [脱落果实](https://onepiece.fandom.com/wiki/Nuke_Nuke_no_Mi) · [轮滑果实](https://onepiece.fandom.com/wiki/Koro_Koro_no_Mi) · [铁链果实](https://onepiece.fandom.com/wiki/Jara_Jara_no_Mi) · [变色果实](https://onepiece.fandom.com/wiki/Iro_Iro_no_Mi) · [金金果实](https://onepiece.fandom.com/wiki/Goru_Goru_no_Mi) · [幸运果实](https://onepiece.fandom.com/wiki/Raki_Raki_no_Mi) · [热浪果实](https://onepiece.fandom.com/wiki/Nepa_Nepa_no_Mi) · [克隆果实](https://onepiece.fandom.com/wiki/Mono_Mono_no_Mi) · [幻影果实](https://onepiece.fandom.com/wiki/Bijo_Bijo_no_Mi) · [射射果实](https://onepiece.fandom.com/wiki/Ute_Ute_no_Mi) · [胖胖果实](https://onepiece.fandom.com/wiki/Pocha_Pocha_no_Mi) · [点燃果实](https://onepiece.fandom.com/wiki/Bana_Bana_no_Mi) · [快递（传输）果实](https://onepiece.fandom.com/wiki/Deri_Deri_no_Mi) · [溶解果实](https://onepiece.fandom.com/wiki/Dero_Dero_no_Mi) · [炸弹人果实](https://onepiece.fandom.com/wiki/Basu_Basu_no_Mi) · [合体果实](https://onepiece.fandom.com/wiki/Gasha_Gasha_no_Mi) · [音容宛在果实](https://onepiece.fandom.com/wiki/Nibi_Nibi_no_Mi) |\n| SBS | [呕吐果实](https://onepiece.fandom.com/wiki/Gero_Gero_no_Mi) · [冷笑话果实](https://onepiece.fandom.com/wiki/Samu_Samu_no_Mi) · [痒痒果实·裆形态](https://onepiece.fandom.com/wiki/Muzu_Muzu_no_Mi,_Model:_Kokan) |\n\n| | 动物系 |\n|--------|---------|\n| 官方的（自然恶魔果实） | [牛牛果实 野牛形态](https://onepiece.fandom.com/wiki/Ushi_Ushi_no_Mi,_Model:_Bison) · [人人果实](https://onepiece.fandom.com/wiki/Hito_Hito_no_Mi) · [鸟鸟果实 隼形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Falcon) · [犬犬果实 腊肠狗形态](https://onepiece.fandom.com/wiki/Inu_Inu_no_Mi,_Model:_Dachshund) · [鼹鼠果实](https://onepiece.fandom.com/wiki/Mogu_Mogu_no_Mi) · [犬犬果实 豺狼形态](https://onepiece.fandom.com/wiki/Inu_Inu_no_Mi,_Model:_Jackal) · [马马果实](https://onepiece.fandom.com/wiki/Uma_Uma_no_Mi) · [猫猫果实 豹形态](https://onepiece.fandom.com/wiki/Neko_Neko_no_Mi,_Model:_Leopard) · [象象果实](https://onepiece.fandom.com/wiki/Zou_Zou_no_Mi) · [犬犬果实 狼形态](https://onepiece.fandom.com/wiki/Inu_Inu_no_Mi,_Model:_Wolf) · [牛牛果实 长颈鹿形态](https://onepiece.fandom.com/wiki/Ushi_Ushi_no_Mi,_Model:_Giraffe) · [蛇蛇果实 蟒蛇形态](https://onepiece.fandom.com/wiki/Hebi_Hebi_no_Mi,_Model:_Anaconda) · [蛇蛇果实-眼镜蛇形态](https://onepiece.fandom.com/wiki/Hebi_Hebi_no_Mi,_Model:_King_Cobra) · [人人果实 佛形态](https://onepiece.fandom.com/wiki/Hito_Hito_no_Mi,_Model:_Daibutsu) · [龟龟果实](https://onepiece.fandom.com/wiki/Kame_Kame_no_Mi) · [蝾螈果实 美西螈形态](https://onepiece.fandom.com/wiki/Sara_Sara_no_Mi,_Model:_Axolotl) · [虫虫果实 独角仙形态](https://onepiece.fandom.com/wiki/Mushi_Mushi_no_Mi,_Model:_Kabutomushi) · [虫虫果实 大黄蜂形态](https://onepiece.fandom.com/wiki/Mushi_Mushi_no_Mi,_Model:_Suzumebachi) · [象象果实 猛犸形态](https://onepiece.fandom.com/wiki/Zou_Zou_no_Mi,_Model:_Mammoth) · [蛋蛋果实](https://onepiece.fandom.com/wiki/Tama_Tama_no_Mi) · [鸟鸟果实·信天翁形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Albatross) · [犬犬果实·狸形态](https://onepiece.fandom.com/wiki/Inu_Inu_no_Mi,_Model:_Tanuki) · [鱼鱼果实·青龙形态](https://onepiece.fandom.com/wiki/Uo_Uo_no_Mi,_Model:_Seiryu) · [犬犬果实·九尾狐形态](https://onepiece.fandom.com/wiki/Inu_Inu_no_Mi,_Model:_Kyubi_no_Kitsune) · [蛇蛇果实·八岐大蛇形态](https://onepiece.fandom.com/wiki/Hebi_Hebi_no_Mi,_Model:_Yamata_no_Orochi) · [龙龙果实·棘背龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Spinosaurus) · [龙龙果实·无齿翼龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Pteranodon) · [人人果实·大入道形态](https://onepiece.fandom.com/wiki/Hito_Hito_no_Mi,_Model:_Onyudo) · [龙龙果实·蜿龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Brachiosaurus) · [龙龙果实·厚头龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Pachycephalosaurus) · [龙龙果实·三角龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Triceratops) · [蛛蛛果实·格氏玫瑰古狼蛛形态](https://onepiece.fandom.com/wiki/Kumo_Kumo_no_Mi,_Model:_Rosamygale_Grauvogeli) · [猫猫果实·剑齿虎形态](https://onepiece.fandom.com/wiki/Neko_Neko_no_Mi,_Model:_Saber_Tiger) · [犬犬果实·大口真神形态](https://onepiece.fandom.com/wiki/Inu_Inu_no_Mi,_Model:_Okuchi_no_Makami)|\n| 官方的（人造恶魔果实 | [人造恶魔果实](https://onepiece.fandom.com/wiki/Artificial_Devil_Fruit)（[SMILE](https://onepiece.fandom.com/wiki/SMILE)）|\n| 非官方的 | [鸟鸟果实·鹰形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Eagle) · [犬犬果实·化狸形态](https://onepiece.fandom.com/wiki/Inu_Inu_no_Mi,_Model:_Bake-danuki) · [蝙蝠果实·吸血鬼形态](https://onepiece.fandom.com/wiki/Batto_Batto_no_Mi,_Model:_Vampire) · [鸟鸟果实·鵺形态](https://onepiece.fandom.com/wiki/Tori_Tori_no_Mi,_Model:_Nue) |\n\n| | 自然系 |\n|--------|--------|\n| 官方的 | [烟烟果实](https://onepiece.fandom.com/wiki/Moku_Moku_no_Mi) · [烧烧果实](https://onepiece.fandom.com/wiki/Mera_Mera_no_Mi) · [沙沙果实](https://onepiece.fandom.com/wiki/Suna_Suna_no_Mi) · [闪电果实](https://onepiece.fandom.com/wiki/Goro_Goro_no_Mi) · [冰冻能力](https://onepiece.fandom.com/wiki/Hie_Hie_no_Mi) · [暗暗果实](https://onepiece.fandom.com/wiki/Yami_Yami_no_Mi) · [闪闪果实](https://onepiece.fandom.com/wiki/Pika_Pika_no_Mi) · [岩浆果实](https://onepiece.fandom.com/wiki/Magu_Magu_no_Mi) · [泥浆果实](https://onepiece.fandom.com/wiki/Numa_Numa_no_Mi) · [瓦斯果实](https://onepiece.fandom.com/wiki/Gasu_Gasu_no_Mi) · [雪雪果实](https://onepiece.fandom.com/wiki/Yuki_Yuki_no_Mi) |\n| 非官方的 | [浆糊果实](https://onepiece.fandom.com/wiki/Toro_Toro_no_Mi) · [纸片果实](https://onepiece.fandom.com/wiki/Pasa_Pasa_no_Mi) · [麦芽糖果实](https://onepiece.fandom.com/wiki/Ame_Ame_no_Mi) |\n\n| | 待定 |\n|--------|-----|\n| 非官方的 | [祖玛果实](https://onepiece.fandom.com/wiki/Zuma_Zuma_no_Mi) · [金属果实](https://onepiece.fandom.com/wiki/Meta_Meta_no_Mi) |\n| SBS | [色咪咪果实](https://onepiece.fandom.com/wiki/Concepts#Ero_Ero_no_Mi) |\n\n| | 相关文章 |\n|--------|-----|\n| 威慑 | [海楼石](https://onepiece.fandom.com/wiki/Seastone) · [武装色霸气](https://onepiece.fandom.com/wiki/Haki/Busoshoku_Haki) |\n| 车/船 | [比隆阿摩托车](https://onepiece.fandom.com/wiki/Billower_Bike) · [智略天然丸](https://onepiece.fandom.com/wiki/Chiryaku_Ten%27nen_Maru) · [火箭号](https://onepiece.fandom.com/wiki/Striker) · [方舟](https://onepiece.fandom.com/wiki/Maxim) · [蓝色自行车](https://onepiece.fandom.com/wiki/Ao_Chari) · [飞翔瓦斯气球](https://onepiece.fandom.com/wiki/Flying_Gas_Balloon) |\n| 研究 | [蓝波球](https://onepiece.fandom.com/wiki/Rumble_Ball) · [SAD](https://onepiece.fandom.com/wiki/SAD) · [血统因子](https://onepiece.fandom.com/wiki/Lineage_Factor) |\n| 人种 | [僵尸](https://onepiece.fandom.com/wiki/Zombie) · [新人妖](https://onepiece.fandom.com/wiki/Okama#Newkama) · [半人马](https://onepiece.fandom.com/wiki/Centaurs) · [牧羊人](https://onepiece.fandom.com/wiki/Punk_Hazard#Satyrs) · [半人鸟](https://onepiece.fandom.com/wiki/Punk_Hazard#Harpy) · [玩具人](https://onepiece.fandom.com/wiki/Toys)  · [霍米兹](https://onepiece.fandom.com/wiki/Homies) |\n| 地点 | [镜世界](https://onepiece.fandom.com/wiki/Mirro-World) |\n\n### 恶魔果实能力者\n\n| | 超人系 |\n|--------|-----|\n| 官方的 | [蒙奇 D 路飞](https://onepiece.fandom.com/wiki/Monkey_D._Luffy) · [巴基](https://onepiece.fandom.com/wiki/Buggy) · [艾薇达](https://onepiece.fandom.com/wiki/Alvida) · [Miss 情人节](https://onepiece.fandom.com/wiki/Miss_Valentine) · [Mr. 5](https://onepiece.fandom.com/wiki/Mr._5) · [妮可罗宾](https://onepiece.fandom.com/wiki/Nico_Robin) · [Mr. 3](https://onepiece.fandom.com/wiki/Galdino) · [瓦波尔](https://onepiece.fandom.com/wiki/Wapol) · [Mr. 2](https://onepiece.fandom.com/wiki/Bentham) · [Mr. 1](https://onepiece.fandom.com/wiki/Daz_Bones) · [Miss Doublefinger](https://onepiece.fandom.com/wiki/Paula) · [缇娜](https://onepiece.fandom.com/wiki/Hina) · [贝拉米](https://onepiece.fandom.com/wiki/Bellamy) · [堂吉柯德 多弗朗明哥](https://onepiece.fandom.com/wiki/Donquixote_Doflamingo) · [福克西](https://onepiece.fandom.com/wiki/Foxy) · [布鲁诺](https://onepiece.fandom.com/wiki/Blueno) · [卡莉法](https://onepiece.fandom.com/wiki/Kalifa) · [Very Good](https://onepiece.fandom.com/wiki/Very_Good) · [修恩](https://onepiece.fandom.com/wiki/Shu) · [夏林库尔](https://onepiece.fandom.com/wiki/Sharinguru) · [布鲁克](https://onepiece.fandom.com/wiki/Brook) · [莫利亚](https://onepiece.fandom.com/wiki/Gekko_Moriah) · [佩罗娜](https://onepiece.fandom.com/wiki/Perona) · [阿布萨罗姆](https://onepiece.fandom.com/wiki/Absalom) · [熊](https://onepiece.fandom.com/wiki/Bartholomew_Kuma) · [珠宝 波妮](https://onepiece.fandom.com/wiki/Jewelry_Bonney) · [基德](https://onepiece.fandom.com/wiki/Eustass_Kid) · [特拉法尔加 D 瓦铁尔 罗](https://onepiece.fandom.com/wiki/Trafalgar_D._Water_Law) · [卡彭 贝基](https://onepiece.fandom.com/wiki/Capone_Bege) · [巴兹尔 霍金斯](https://onepiece.fandom.com/wiki/Basil_Hawkins) · [阿普](https://onepiece.fandom.com/wiki/Scratchmen_Apoo) · [乌尔基](https://onepiece.fandom.com/wiki/Urouge) · [波雅 汉库克](https://onepiece.fandom.com/wiki/Boa_Hancock) · [麦哲伦](https://onepiece.fandom.com/wiki/Magellan) · [安布里奥·伊万科夫](https://onepiece.fandom.com/wiki/Emporio_Ivankov) · [闪电](https://onepiece.fandom.com/wiki/Inazuma) · [爱德华·纽盖特](https://onepiece.fandom.com/wiki/Edward_Newgate)<sup title=\"已死亡\">†</sup>·[乔兹](https://onepiece.fandom.com/wiki/Jozu) · [鹤](https://onepiece.fandom.com/wiki/Tsuru) · [史基](https://onepiece.fandom.com/wiki/Shiki) · [布拉曼克](https://onepiece.fandom.com/wiki/Blamenco) · [马歇尔 D 蒂奇](https://onepiece.fandom.com/wiki/Marshall_D._Teach) · [范德戴肯九世](https://baike.baidu.com/view/5168794.htm) · [锦卫门](https://onepiece.fandom.com/wiki/Kin%27emon) · [Baby 5](https://onepiece.fandom.com/wiki/Baby_5) · [巴法罗](https://onepiece.fandom.com/wiki/Buffalo) · [特雷波尔](https://onepiece.fandom.com/wiki/Trebol) · [砂糖](https://onepiece.fandom.com/wiki/Sugar) · [藤虎](https://onepiece.fandom.com/wiki/Issho) · [巴托洛米奥](https://onepiece.fandom.com/wiki/Bartolomeo) · [雷欧](https://onepiece.fandom.com/wiki/Leo) · [维奥拉](https://onepiece.fandom.com/wiki/Viola) · [乔拉](https://onepiece.fandom.com/wiki/Jora) · [凯利 范库](https://onepiece.fandom.com/wiki/Kelly_Funk) · [古拉迪斯](https://onepiece.fandom.com/wiki/Gladius) · [塞尼奥尔 皮克](https://onepiece.fandom.com/wiki/Senor_Pink) · [马哈拜斯](https://onepiece.fandom.com/wiki/Machvise) · [迪亚曼蒂](https://onepiece.fandom.com/wiki/Diamante) · [皮卡](https://onepiece.fandom.com/wiki/Pica) · [堪十郎](https://onepiece.fandom.com/wiki/Kanjuro) · [堂吉柯德·罗西南迪](https://onepiece.fandom.com/wiki/Donquixote_Rosinante)<sup title=\"已死亡\">†</sup>·[曼雪莉](https://onepiece.fandom.com/wiki/Mansherry) · [夏洛特 玲玲](https://onepiece.fandom.com/wiki/Charlotte_Linlin) · [夏洛特 布蕾](https://onepiece.fandom.com/wiki/Charlotte_Br%C3%BBl%C3%A9e) · [夏洛特 佩罗斯佩洛](https://onepiece.fandom.com/wiki/Charlotte_Perospero) · [夏洛特 克力架](https://onepiece.fandom.com/wiki/Charlotte_Cracker) |\n| 非官方的 | [El Drago](https://onepiece.fandom.com/wiki/El_Drago) · [阿碧丝](https://onepiece.fandom.com/wiki/Apis) · [艾瑞克](https://onepiece.fandom.com/wiki/Eric) · [熊王](https://onepiece.fandom.com/wiki/Bear_King) · [Noko](https://onepiece.fandom.com/wiki/Noko) · [Blyue](https://onepiece.fandom.com/wiki/Blyue) · [阿奇诺](https://onepiece.fandom.com/wiki/Accino) · [Musshuru](https://onepiece.fandom.com/wiki/Musshuru) · [Largo](https://onepiece.fandom.com/wiki/Largo) · [Chameleone](https://onepiece.fandom.com/wiki/Chameleone) · [艾因](https://onepiece.fandom.com/wiki/Ain) · [宾兹](https://onepiece.fandom.com/wiki/Binz) · [丽丽](https://onepiece.fandom.com/wiki/Lily_Enstomach) · [布里德](https://onepiece.fandom.com/wiki/Breed) · [邦迪 瓦尔德](https://onepiece.fandom.com/wiki/Byrnndi_World) · [盖依拉姆](https://onepiece.fandom.com/wiki/Gairam) · [Bürst](https://onepiece.fandom.com/wiki/B%C3%BCrst) · [Bonbon](https://onepiece.fandom.com/wiki/Bonbon) · [比尔](https://onepiece.fandom.com/wiki/Bill) · [田中先生](https://onepiece.fandom.com/wiki/Tanaka) · [Aveyron](https://onepiece.fandom.com/wiki/Aveyron) · [宝藏狂人](https://onepiece.fandom.com/wiki/Mad_Treasure) · [Psycho P](https://onepiece.fandom.com/wiki/Psycho_P) · [吉尔德 泰佐洛](https://onepiece.fandom.com/wiki/Gild_Tesoro) · [芭卡拉](https://onepiece.fandom.com/wiki/Baccarat) |\n\n| | 动物系 |\n|--------|---------|\n| 官方的 | [多尔顿](https://onepiece.fandom.com/wiki/Dalton) · [托尼 托尼 乔巴](https://onepiece.fandom.com/wiki/Tony_Tony_Chopper) · [贝尔](https://onepiece.fandom.com/wiki/Pell) · [拉苏](https://onepiece.fandom.com/wiki/Lassoo) · [Miss Merry Christmas](https://onepiece.fandom.com/wiki/Miss_Merry_Christmas) · [加卡](https://onepiece.fandom.com/wiki/Chaka) · [皮埃尔](https://onepiece.fandom.com/wiki/Pierre) · [罗布 路奇](https://onepiece.fandom.com/wiki/Rob_Lucci) · [法古佛里德](https://onepiece.fandom.com/wiki/Funkfreed) · [加布拉](https://onepiece.fandom.com/wiki/Jabra) · [卡库](https://onepiece.fandom.com/wiki/Kaku) · [X 德雷克](https://onepiece.fandom.com/wiki/X_Drake) · [鬼蜘蛛](https://onepiece.fandom.com/wiki/Onigumo) · [波雅 桑达索尼娅](https://onepiece.fandom.com/wiki/Boa_Sandersonia) · [波雅 玛丽哥鲁德](https://onepiece.fandom.com/wiki/Boa_Marigold) · [米诺陶洛斯](https://onepiece.fandom.com/wiki/Minotaurus) · [米诺斑马](https://onepiece.fandom.com/wiki/Minozebra) · [米诺考拉](https://onepiece.fandom.com/wiki/Minokoala) · [米诺犀牛](https://onepiece.fandom.com/wiki/Minorhinoceros) · [达尔马提亚](https://onepiece.fandom.com/wiki/Dalmatian) · [马尔科](https://onepiece.fandom.com/wiki/Marco) · [艾波伊塔](https://onepiece.fandom.com/wiki/Epoida) · [战国](https://onepiece.fandom.com/wiki/Sengoku) · [贝壳慕斯](https://onepiece.fandom.com/wiki/Pekoms) · [米诺吉娃娃](https://onepiece.fandom.com/wiki/Minochihuahua) · [SMILEY](https://onepiece.fandom.com/wiki/Smiley)<sup title=\"已死亡\">†</sup>·[桃之助](https://onepiece.fandom.com/wiki/Momonosuke) · [卡布](https://onepiece.fandom.com/wiki/Kabu) · [比安](https://onepiece.fandom.com/wiki/Bian) · [西普斯海德](https://onepiece.fandom.com/wiki/Sheepshead) · [杰克](https://onepiece.fandom.com/wiki/Jack) |\n| 非官方的 | [吉基吉达](https://onepiece.fandom.com/wiki/Chiqicheetah) · [巴兹](https://onepiece.fandom.com/wiki/Buzz) · [阿尔帕 奇诺](https://onepiece.fandom.com/wiki/Alpacacino) · [帕托](https://onepiece.fandom.com/wiki/Pato) · [帕特里克 雷德菲尔德](https://onepiece.fandom.com/wiki/Patrick_Redfield) |\n\n| | 自然系 |\n|--------|--------|\n| 官方的 | [斯摩格](https://onepiece.fandom.com/wiki/Smoker) · [克洛克达尔](https://onepiece.fandom.com/wiki/Crocodile) · [波特卡斯 D 艾斯](https://onepiece.fandom.com/wiki/Portgas_D._Ace)<sup title=\"已死亡\">†</sup> · [艾尼路](https://onepiece.fandom.com/wiki/Enel) · [青雉](https://onepiece.fandom.com/wiki/Kuzan) · [马歇尔·D·蒂奇](https://onepiece.fandom.com/wiki/Marshall_D._Teach) · [黄猿](https://onepiece.fandom.com/wiki/Borsalino) · [赤犬](https://onepiece.fandom.com/wiki/Sakazuki) · [卡里布](https://onepiece.fandom.com/wiki/Caribou) · [凯撒·库朗](https://onepiece.fandom.com/wiki/Caesar_Clown) · [莫奈](https://onepiece.fandom.com/wiki/Monet)<sup title=\"已死亡\">†</sup> · [萨博](https://onepiece.fandom.com/wiki/Sabo) |\n| 非官方的 | [甜心皇后](https://onepiece.fandom.com/wiki/Honey_Queen) · [西蒙](https://onepiece.fandom.com/wiki/Simon) · [Gasparde](https://onepiece.fandom.com/wiki/Gasparde) |\n\n| | 待定 |\n|--------|--------|\n| 官方的 | [拉斐特](https://onepiece.fandom.com/wiki/Laffitte) · [乌鸦](https://onepiece.fandom.com/wiki/Karasu) |\n| 非官方的 | [司马氏](https://onepiece.fandom.com/wiki/Smash) · [格雷德尔](https://onepiece.fandom.com/wiki/Graydle) |\n\n### 科学家\n\n| | 科学家 |\n|--------|--------|\n| 官方的 | [贝加庞克](https://onepiece.fandom.com/wiki/Vegapunk) · [弗兰奇](https://onepiece.fandom.com/wiki/Franky) · [月见博士](https://onepiece.fandom.com/wiki/Tsukimi) · [哈雷达](https://onepiece.fandom.com/wiki/Haredas) · [英迪格](https://onepiece.fandom.com/wiki/Indigo) · [凯撒·库朗](https://onepiece.fandom.com/wiki/Caesar_Clown) · [威利·加隆](https://onepiece.fandom.com/wiki/Willie_Gallon) · [文斯莫克·伽治](https://onepiece.fandom.com/wiki/Vinsmoke_Judge) · [林德伯格](https://onepiece.fandom.com/wiki/Lindbergh) · [奎因](https://onepiece.fandom.com/wiki/Queen) |\n| 非官方的 | [尼泊塔尔](https://onepiece.fandom.com/wiki/Niphtal) · [房](https://onepiece.fandom.com/wiki/Fang) · [亨佐](https://onepiece.fandom.com/wiki/Henzo) · [棘轮](https://onepiece.fandom.com/wiki/Ratchet) · [米斯金纳](https://onepiece.fandom.com/wiki/Myskina_Acier) · [波拉姆](https://onepiece.fandom.com/wiki/Bolam) · [Bürst](https://onepiece.fandom.com/wiki/B%C3%BCrst) · [密苏达](https://onepiece.fandom.com/wiki/Misutta) · [邦邦](https://onepiece.fandom.com/wiki/Bonbon) · [狼](https://onepiece.fandom.com/wiki/Wolf_(Scientist)) · [艾萨克](https://onepiece.fandom.com/wiki/Isaac)|\n\n| | 能力 |\n|--------|--------|\n| 基于恶魔果实 | [瓦斯果实](https://onepiece.fandom.com/wiki/Gasu_Gasu_no_Mi) · [龙龙果实·蜿龙形态](https://onepiece.fandom.com/wiki/Ryu_Ryu_no_Mi,_Model:_Brachiosaurus) · [硝酸甘油果实](https://onepiece.fandom.com/wiki/Nito_Nito_no_Mi)<sup title=\"非官方\">≠</sup> · [恋爱果实](https://onepiece.fandom.com/wiki/Hore_Hore_no_Mi)<sup title=\"非官方\">≠</sup> |\n| 基于武器 | [战斗弗兰奇](https://onepiece.fandom.com/wiki/Battle_Frankies)（[半机械人](https://onepiece.fandom.com/wiki/Battle_Frankies/BF-36)<sup title=\"前代\">‡</sup> · [武装进化风](https://onepiece.fandom.com/wiki/Battle_Frankies/BF-37) · [弗兰奇将军](https://onepiece.fandom.com/wiki/Battle_Frankies/General_Franky) （[黑犀牛 FR-U 四号](https://onepiece.fandom.com/wiki/Kurosai_FR-U_IV)  · [蜿龙战车五号](https://onepiece.fandom.com/wiki/Brachio_Tank_V)）） · [硫化氢](https://onepiece.fandom.com/wiki/H2S) · [死亡国度](https://onepiece.fandom.com/wiki/Shinokuni) · [战斗服](https://onepiece.fandom.com/wiki/Raid_Suit) · [疫灾弹](https://onepiece.fandom.com/wiki/Excite_Bullets) （[木乃伊](https://onepiece.fandom.com/wiki/Mummy_(Virus)) · [冰鬼](https://onepiece.fandom.com/wiki/Ice_Oni)） |\n\n| | 相关词汇 |\n|--------|--------|\n| 研究 | [改造人](https://onepiece.fandom.com/wiki/Modified_Humans) （[半机械人](https://onepiece.fandom.com/wiki/Cyborgs) · [杰尔马66](https://onepiece.fandom.com/wiki/Germa_66)） · [和平主义者](https://onepiece.fandom.com/wiki/Pacifista)（[巴索罗米奥·熊](https://onepiece.fandom.com/wiki/Bartholomew_Kuma) · [PX-Z](https://onepiece.fandom.com/wiki/PX-Z)） · [机器人](https://onepiece.fandom.com/wiki/Automata) · [SAD](https://onepiece.fandom.com/wiki/SAD) 恶魔果实（[人造恶魔果实](https://onepiece.fandom.com/wiki/Artificial_Devil_Fruit) · [SMILE](https://onepiece.fandom.com/wiki/SMILE)） · [气象科学家](https://onepiece.fandom.com/wiki/Weatheria) · [巨大化](https://onepiece.fandom.com/wiki/Gigantification)（[蓝波球](https://onepiece.fandom.com/wiki/Rumble_Ball)） · [血统因子](https://onepiece.fandom.com/wiki/Lineage_Factor) · [克隆人](https://onepiece.fandom.com/wiki/Cloning) · [纯黄金](https://onepiece.fandom.com/wiki/Pure_Gold)<sup title=\"非官方\">≠</sup> |\n| 地点 | [七水之都](https://onepiece.fandom.com/wiki/Water_7) · [维萨利亚](https://onepiece.fandom.com/wiki/Weatheria) · [卡拉库里岛（机械岛）](https://onepiece.fandom.com/wiki/Karakuri_Island) · [庞克·哈萨德](https://onepiece.fandom.com/wiki/Punk_Hazard) · [杰尔马王国](https://onepiece.fandom.com/wiki/Germa_Kingdom) |\n| 杂项 | [MADS](https://onepiece.fandom.com/wiki/MADS) |\n","tags":["one piece","devil fruit","translation"]},{"title":"使用 ASP.NET Core 和 Angular 构建视频聊天应用","url":"/2021/08/18/build-a-video-chat-app-with-ASP-NET-Core-and-Angular/","content":"\n~~ WebRTC 太难了 ~~\n\n\n\n### 参考链接\n\n- [Get Started with WebRTC](https://www.html5rocks.com/en/tutorials/webrtc/basics/)\n- [WebRTC 之ICE浅谈·网易云信](https://www.cnblogs.com/wangyiyunxin/p/11155795.html)\n- [Build the backend services needed for a WebRTC app](https://www.html5rocks.com/en/tutorials/webrtc/infrastructure/)\n- [Tutorial: Get started with ASP.NET Core SignalR](https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-5.0&tabs=visual-studio)\n- [@microsoft/signalr - npm](https://www.npmjs.com/package/@microsoft/signalr)\n","tags":["angular","asp.net core","video chat","webrtc","signalr"]},{"title":"使用 Nightmare.js 爬取页面","url":"/2021/07/24/crawling-web-via-Nightmare-js/","content":"\n### 背景\n\n此前我已有一个 [scrapy](https://docs.scrapy.org/en/latest/index.html) 爬虫项目，一切看起来都挺美好的。能爬到动态加载的数据，用 [scrapyd](https://scrapyd.readthedocs.io/en/stable/) 管理爬虫任务，还自己写了一个创建爬虫任务的小工具。但是，写爬虫就是这样，即使矛多锐利，盾也不会差，不会出现其中某一个特别强另一个特别弱的情形。二者处在一个动态平衡的局面，可能现在是矛更厉害，过段时间盾一定会打回来的（反爬虫进化）；也可能现在是盾厉害更胜一筹，但过不了多久一定会有大神破解出来（变态如 12306 都能被破解）。所以，不要追求完美和一劳永逸，保持乐观和持续学习的心态就好了！ 😄\n\n先说问题吧：\n\n1. `python` 写的。虽然也是脚本语言，调整起来很快，但是和 `nodejs` 比起来，还是有差别的，毕竟后者用的是和页面一样的编程语言。解析页面数据、注入脚本、模拟用户行为等等，后者肯定是优于前者。\n2. `scrapy` 欠缺用户交互 API，如滚屏、模拟点击等等。我才疏学浅，没找到，但是有用户交互行为的爬虫，能够很大程度上减少被反爬虫🈲的可能性。\n3. `scrapy` 调试时缺少浏览器窗口，无法快速编写爬虫程序。\n\n看完这几个问题，大家应该清楚了，使用 `nodejs` 来写爬虫要优于 `python`。（当然，这仅仅是个人观点，不喜勿喷）\n\n所以，今天的主角登场了：\n\n[Nightmare JS](https://github.com/segmentio/nightmare)\n\n为什么是它呢，而不是前端自动测试使用更广泛的 [Selenium](https://www.selenium.dev/)、[PhantomJS]() 或者 [Electron](http://electron.atom.io/)？emmm，因为用过。🙂\n\n### 范例\n\n**声明：以下代码仅供学习使用，如果您坚持要用在产品环境或者商用，概不负责！！！**\n\n搜狗搜索（片段）：\n\n``` js\nconst Nightmare = require(\"nightmare\");\nconst {\n  IS_PROD,\n  NIGHTMARE_TYPE_INTERVAL,\n  NIGHTMARE_USER_AGENT,\n  NIGHTMARE_VIEWPORT,\n  NIGHTMARE_GOTOTIMEOUT,\n  NIGHTMARE_LOADTIMEOUT,\n  PROXY_SERVER_HOST,\n  PROXY_SERVER_PORT,\n  PROXY_USER_NAME,\n  proxy_user_PASSWORD,\n  SOGOU_NEWS_HOST,\n} = require(\"../constants\");\nconst {\n  isNotEmptyString,\n  get3rdPartyShortName,\n  persistAdverseMedias\n} = require(\"../utility\");\n\n/** name of the third party */\nlet thirdPartyName = process.argv[2]; //get third party name from command line\n\nif (!isNotEmptyString(thirdPartyName)) {\n  process.exit(404); // third party name is mandatory\n}\n\n/// if the third party name contains empty string ' ',\n/// the full name might be cutted into multiple fragments\nlet argvIdx = 3;\nwhile (isNotEmptyString(process.argv[argvIdx])) {\n  thirdPartyName += \" \" + process.argv[argvIdx];\n  argvIdx++;\n}\n\n/** short name of the third party */\nconst thirdPartyName_short = get3rdPartyShortName(thirdPartyName);\n\nconst nm = Nightmare({\n  //   switches: {\n  //     \"proxy-server\": PROXY_SERVER_HOST + \":\" + PROXY_SERVER_PORT\n  //   },\n  //   openDevTools: {\n  //     mode: \"detach\"\n  //   },\n  show: !IS_PROD,\n  typeInterval: NIGHTMARE_TYPE_INTERVAL,\n  width: NIGHTMARE_VIEWPORT.width,\n  height: NIGHTMARE_VIEWPORT.height,\n  gotoTimeout: NIGHTMARE_GOTOTIMEOUT,\n  loadTimeout: NIGHTMARE_LOADTIMEOUT\n});\n\nconst searchTerm = '\"' + thirdPartyName_short + '\"';\n\n/** extract adverse media */\nconst extractResults = (\n  /** response data */\n  resp,\n  /** third party name */\n  vendor,\n  /** third party short name */\n  vendor_short,\n  /** search term for the site */\n  EY_Search_Term\n) => {\n  const smartHint = document.getElementById(\"smart_hint_container\");\n  if (smartHint) {\n    const smartHintText = smartHint.innerText.trim();\n    if (\n      smartHintText.startsWith(\"抱歉，没有找到与\") &&\n      smartHintText.includes(\"相关的网页。\")\n    ) {\n      // can't find any adverse media with such search term.\n      resp.hasNextPage = false;\n      return resp;\n    }\n  }\n  resp.data = resp.data || [];\n  if (resp.data.length > 256) {\n    // over 256 records were found, no need to seek more pages\n    resp.hasNextPage = false;\n    return resp;\n  }\n  console.log(\"before extracting:\", resp.data.length);\n  const items = document.querySelectorAll(\"#main .results .vrwrap\");\n  if (items && items.length) {\n    console.log(items.length + \" records were found...\");\n    for (let i = 0; i < items.length; i++) {\n      const _ = items[i];\n      const myurl = document.location.href;\n      const List_date = new Date().toISOString().substr(0, 10);\n      const obj = {\n        vendor,\n        vendor_short,\n        List_date,\n        EY_Search_Term,\n        myurl,\n        title: _.querySelector(\".vr-title\").innerText,\n        href:\n          document.location.origin +\n          _.querySelector(\".vr-title a\").getAttribute(\"href\"),\n        summary: _.querySelector(\".star-wiki\").innerText,\n        newsSite: _.querySelector(\".news-from span\").innerText,\n        newsDate: _.querySelector(\".news-from span:last-child\").innerText,\n        newsTime: \"\" // N/A\n      };\n      console.log(\"push item: \", JSON.stringify(obj));\n      resp.data.push(obj);\n    }\n  }\n  console.log(\"after extracting:\", resp.data.length);\n  // scroll down to the paginator\n  document.getElementById(\"pagebar_container\") &&\n    document\n      .getElementById(\"pagebar_container\")\n      .scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n  resp.hasNextPage = !!document.getElementById(\"sogou_next\");\n  return resp;\n};\n/** fetch adverse media of next page  */\nconst crawlNexPage = nm => {\n  return resp => {\n    debugger;\n    // pagination\n    if (resp.hasNextPage) {\n      console.log(\"crawling next page...\");\n      return nm\n        .click(\"#sogou_next\")\n        .wait(2048)\n        .wait(\"#main\")\n        .evaluate(\n          extractResults,\n          resp,\n          thirdPartyName,\n          thirdPartyName_short,\n          searchTerm\n        )\n        .then(crawlNexPage(nm, resp));\n    }\n    return resp;\n  };\n};\n\nconsole.log(\"start crawling adverse media for \" + searchTerm);\n// main processing logic code\nnm.useragent(NIGHTMARE_USER_AGENT)\n  //.authentication(PROXY_USER_NAME, proxy_user_PASSWORD)\n  .goto(SOGOU_NEWS_HOST)\n  .wait(4096)\n  .type(\"#query\", searchTerm)\n  .click(\"#searchBtn\")\n  .wait(2048)\n  .wait(\"#main\")\n  .evaluate(\n    extractResults,\n    { data: [], hasNextPage: true },\n    thirdPartyName,\n    thirdPartyName_short,\n    searchTerm\n  )\n  .then(crawlNexPage(nm))\n  .then(response => {\n    // persistent\n    console.log(\"persistent, amount: \", response.data.length);\n    return persistAdverseMedias(response.data);\n  })\n  .finally(_ => {\n    console.log(\"Done, exiting...\");\n    process.exit(0);\n  });\n```\n\n头条新闻搜索（片段）：\n\n``` js\nconst Nightmare = require(\"nightmare\");\nconst {\n  IS_PROD,\n  NIGHTMARE_TYPE_INTERVAL,\n  NIGHTMARE_USER_AGENT,\n  NIGHTMARE_VIEWPORT,\n  NIGHTMARE_GOTOTIMEOUT,\n  NIGHTMARE_LOADTIMEOUT\n} = require(\"../constants\");\nconst {\n  isNotEmptyString,\n  get3rdPartyShortName,\n  persistAdverseMedias\n} = require(\"../utility\");\n\n/** name of the third party */\nlet thirdPartyName = process.argv[2]; //get third party name from command line\n\nif (!isNotEmptyString(thirdPartyName)) {\n  process.exit(404); // third party name is mandatory\n}\n\n/// if the third party name contains empty string ' ',\n/// the full name might be cutted into multiple fragments\nlet argvIdx = 3;\nwhile (isNotEmptyString(process.argv[argvIdx])) {\n  thirdPartyName += \" \" + process.argv[argvIdx];\n  argvIdx++;\n}\n\n/** short name of the third party */\nconst thirdPartyName_short = get3rdPartyShortName(thirdPartyName);\n\nconst nm = Nightmare({\n  //   switches: {\n  //     \"proxy-server\": PROXY_SERVER_HOST + \":\" + PROXY_SERVER_PORT\n  //   },\n  //   openDevTools: {\n  //     mode: \"detach\"\n  //   },\n  show: !IS_PROD,\n  typeInterval: NIGHTMARE_TYPE_INTERVAL,\n  width: NIGHTMARE_VIEWPORT.width,\n  height: NIGHTMARE_VIEWPORT.height,\n  gotoTimeout: NIGHTMARE_GOTOTIMEOUT,\n  loadTimeout: NIGHTMARE_LOADTIMEOUT\n});\n\n// const searchTerm = '\"' + thirdPartyName_short + '\"';\nconst searchTerm = thirdPartyName;\n/** 头条搜索·资讯频道 home page */\nconst homePage =\n  \"https://so.toutiao.com/search?keyword=baidu.com&pd=information&source=input&dvpf=pc&aid=4916&page_num=0\";\n\n/** extract adverse media from HTTP response */\nconst extractResults = (\n  /** response data */\n  resp,\n  /** third party name */\n  vendor,\n  /** third party short name */\n  vendor_short,\n  /** search term for the site */\n  EY_Search_Term\n) => {\n  console.log(\"extracting…\");\n  resp.data = resp.data || [];\n  if (resp.data.length > 256) {\n    // over 256 records were found, no need to seek next page\n    resp.hasNextPage = false;\n    return resp;\n  }\n  console.log(\"before extracting:\", resp.data.length);\n  const items = document.querySelectorAll(\".main .result-content[data-i]\");\n  if (items && items.length) {\n    console.log(items.length + \" records were found...\");\n    for (let i = 0; i < items.length; i++) {\n      const _ = items[i];\n      const myurl = document.location.href;\n      const List_date = new Date().toISOString().substr(0, 10);\n      //   debugger;\n      const link = _.querySelector(\"a\");\n      const summary = _.querySelector(\".text-underline-hover\");\n      const newsSite = _.querySelector(\".cs-source-content span\");\n      const newsDate = _.querySelector(\".cs-source-content>span:last-child\");\n      const obj = {\n        vendor,\n        vendor_short,\n        List_date,\n        EY_Search_Term,\n        myurl,\n        title: link ? link.innerText : \"\",\n        href: link ? document.location.origin + link.getAttribute(\"href\") : '',\n        summary: summary ? summary.innerText : \"\",\n        newsSite: newsSite ? newsSite.innerText : \"\",\n        newsDate: newsDate ? newsDate.innerText : \"\",\n        newsTime: \"\" // N/A\n      };\n      console.log(\"push item: \", JSON.stringify(obj));\n      resp.data.push(obj);\n    }\n  }\n  console.log(\"after extracting:\", resp.data.length);\n  // scroll down to the paginator\n  const paginator = document.querySelector(\".cs-pagination\");\n  if (paginator) paginator.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n  resp.hasNextPage =\n    paginator &&\n    paginator.querySelector(\"a:last-child\") &&\n    paginator.querySelector(\"a:last-child\").classList.contains(\"cs-button-mb\");\n  return resp;\n};\n/** fetch adverse media of next page  */\nconst crawlNexPage = nm => {\n  return resp => {\n    console.log(\"crawling next page…\");\n    // pagination\n    if (resp.hasNextPage) {\n      console.log(\"crawling next page...\");\n      return nm\n        .click(\".cs-pagination a:last-child\")\n        .wait(2048)\n        .wait(\".main .s-result-list\")\n        .evaluate(\n          extractResults,\n          resp,\n          thirdPartyName,\n          thirdPartyName_short,\n          searchTerm\n        )\n        .then(crawlNexPage(nm, resp));\n    }\n    return resp;\n  };\n};\n\nconsole.log(\"start crawling adverse media for \" + searchTerm);\n// main processing logic code\nnm.useragent(\n  \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0\"\n) // .useragent(NIGHTMARE_USER_AGENT)\n  //.authentication(PROXY_USER_NAME, proxy_user_PASSWORD)\n  .goto(homePage)\n  .wait(4096)\n  .wait('input[type=\"search\"]')\n  .type('input[type=\"search\"]', \"\") // clear first\n  .type('input[type=\"search\"]', searchTerm)\n  //   .type('input[type=\"search\"]', \"\\u000d\")// press the enter key\n  .click(\".search_1sPyO_\")\n  .wait(4096)\n  .wait(\".main .s-result-list\")\n  .evaluate(\n    extractResults,\n    { data: [], hasNextPage: true },\n    thirdPartyName,\n    thirdPartyName_short,\n    searchTerm\n  )\n  .then(crawlNexPage(nm))\n  .then(response => {\n    // persistent\n    console.log(\n      \"trying persistent adverse medias, amount: \",\n      response.data.length\n    );\n    return persistAdverseMedias(response.data);\n  })\n  .catch(err => {\n    console.error(err);\n    console.log(JSON.stringify(err));\n  })\n  .finally(_ => {\n    console.log(\"Done, exiting...\");\n    process.exit(0);\n  });\n```\n\n### 最佳实践\n\n1. [evaluate](https://github.com/segmentio/nightmare/blob/HEAD/Readme.md#evaluatefn-arg1-arg2) 其实是把方法体注入到页面里，所以，假如你的 `evaluate` 方法体引用了外部变量，那肯定是不行的。解决办法也很简单，使用立即执行函数(IIFE，Immediately invoked function expression)传入外部变量即可。\n2. [evaluate](https://github.com/segmentio/nightmare/blob/HEAD/Readme.md#evaluatefn-arg1-arg2) 记得 `catch`，否则很容易中断执行。\n3. 记得设置 [loadTimeout](https://github.com/segmentio/nightmare#loadtimeout-default-infinite)，因为默认是 `infinite`！如果某些网站（你懂的）一直不报错，也不返回结果，或者返回结果超级慢，那你的这个爬虫程序就卡在这里了。\n4. 翻页的话，使用之前的 `nightmare` 实例就行。\n\n### 参考链接\n\n- [Nightmare JS](https://github.com/segmentio/nightmare)\n","tags":["crawler","spider","nightmare.js"]},{"title":"JavaScript 轻量级缓存","url":"/2021/06/29/JavaScript-Storage-lite/","content":"\n### localStorage VS sessionStorage\n\n二者统称为 [Web Storage](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API)。使用场景是少量数据缓存，用来替代 `Cookie` 还是很不错滴。\n\n| | localStorage | sessionStorage|\n|-----|-----|-----|\n|常见场景|代替 `cookie` 和 `window` 全局变量，存储一些计算费时的，需要多页面/组件共享的变量|类似 `localStorage`，但是有时效 *|\n|时效性|长期存在，仅当用户/程序手动删除时才失效|有点复杂，本身 `session` 就很难讲请，`sessionStorage` 的时效性和 `session` 又有区别😂|\n|限额|5MB|5MB|\n\n### IndexedDB\n\n光看它的 API 文档 [<fa-link/>](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)，就已经晕了😵。简单理解就是，前端的事务性数据库。所以，它能够支持大量数据存储/查询。根据官方介绍 [<fa-link/>](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria)，`IndexedDB` 最多能存硬盘的 50%，每个组（简单理解为一个站点）能存最少 10MB 最多 2GB！简直不要太开心~\n\n不过考虑到上手难度极高，一般都会使用第三方库 [<fa-link/>](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API#see_also) 来操作 `IndexedDB`。\n\n### Web SQL\n\n注意，Web SQL 并不是 `HTML 5` 标准，目前仅支持 Chromium 系的浏览器 [<fa-link/>](https://caniuse.com/sql-storage)。虽然以前 [W3C 提案](https://www.w3.org/TR/webdatabase/) 过，但早就舍弃了。所以，不用看了！\n\n~~使用方法也炒鸡简单，仅三个基础 API：opendatabase、transaction、executeSql。~~\n\n### storageHelper\n\n```ts\nimport { Utility } from './utility';\nimport * as objectHash from 'object-hash';\nimport { ENGAGEMENT } from './constants';\n\n/** reference of the storage */\nconst STORAGE: Storage = window.sessionStorage;\n// const STORAGE:Storage = window.localStorage;\n\n/** key prefix for cache, distinguish from other apps */\nconst STORAGE_KEY_PREFIX = 'myStorage:key:'\n\n/** generate storage key */\nconst genStorageKey = (...params) => {\n    return STORAGE_KEY_PREFIX + objectHash.MD5(params.join('\\n'));\n};\n\n/**\n * try fetch response data from storage\n * @param keyFactors factors used for generating key (position matter)\n */\nexport const getStorage = (...keyFactors: string[]) => {\n    if (!Utility.isNotEmptyArray(keyFactors))\n        return null;\n    const key = genStorageKey(keyFactors);\n    const value = STORAGE.getItem(key);\n    return Utility.isNotEmptyString(value) ? JSON.parse(value) : null;\n    // if (Utility.isNotEmptyString(value)) {\n    //     try {\n    //         return JSON.parse(value);\n    //     } catch (e) {\n    //         return value;\n    //     }\n    // }\n};\n\n/**\n * try save response data into storage\n * @param value value to be cached\n * @param keyFactors factors used for generating key (position matter)\n */\nexport const setStorage = (value: any, ...keyFactors: string[]) => {\n    if (value && Utility.isNotEmptyArray(keyFactors)) {\n        const key = genStorageKey(keyFactors);\n        try {\n            STORAGE.setItem(key, JSON.stringify(value));\n        } catch (e) {\n            // may exceed the quota\n            console.warn('exceeded the quota of Storage');\n        }\n    }\n};\n/** clear local cache */\nexport const clearStorage = () => {\n    const keys = Object.keys(STORAGE);\n    if (Utility.isNotEmptyArray(keys)) {\n        keys.forEach(_ => {\n            if (_.startsWith(STORAGE_KEY_PREFIX))\n                STORAGE.removeItem(_);\n        });\n    }\n};\n\n```\n\n备注：\n\n1. 因为限额，在计算缓存主键的时候，我使用了 `MD5` 信息摘要算法以缩小键的长度。可能会有些哈希碰撞问题，可考虑替换成 `SHA1` 或者其他更高级的算法（如果性能不是关注点的话）。\n2. 有时候我们的页面可能会和其他页面共存，甚至是我们的页面内嵌在其他页面中。如果这时候需要清空缓存，简单粗暴的直接调用 `Storage.clear` 方法，可能会导致其他页面报错/不正常工作。为避免此类事情发生，在计算缓存主键的时候，我额外添加了固定前缀。这样的话，如果真要清空缓存，挑出属于自己程序的缓存再手动删除。\n3. 因为会有 5MB 的限额，程序很容易会超过这个限制，所以程序设计时一定要考虑这种情况，比如使用 `LRU` 这样的过期策略。我这里简单起见，直接忽略了 😄。\n\n### 参考链接\n\n- [Window.localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage)\n- [Window.sessionStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)\n- [IndexedDB API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)\n- [What is WEB SQL?](https://www.geeksforgeeks.org/what-is-web-sql/)\n","tags":["javascript","storage","localstorage","sessionstorage"]},{"title":"微信小程序入门篇(2)","url":"/2021/06/20/WeChat-mini-program-102/","content":"\n距离 [上次接触小程序](/2021/09/11/get-started-with-WeChat-mini-program/) 已经过去大半年了，期间一直没有更新。实在是太懒了。正好这个周末有空，就自己瞎鼓捣一下好了。\n\n说干就干！\n\n安装及环境初始化，这里就略过了。官方已经提供了很详细的 [101 教程](https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html)。\n\n### 注意事项\n\n1. 自 2021/4/13 起，微信旧 API [wx.getUserInfo](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html) 不再弹出弹窗，并直接返回匿名的用户个人信息，取而代之的是 [wx.getUserProfile](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserProfile.html)，详细参考 [小程序官方公告](https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801)；\n2. 小程序端的 [数据缓存 API](https://developers.weixin.qq.com/miniprogram/dev/api/storage/wx.setStorage.html)：\n   - 不能使用类似 `wx.setStorage(key, value)` 和 `wx.getStorage(key)` 的形式存取数据，取而代之的是 `wx.setStorage({ key:\"key\", data:\"value\"})` 和 `wx.getStorage({ key:\"key\"})`（注意，是 `data` 而不是 `value` 哦）；\n   - 虽然官方文档说 `success`、`fail`、`complete` 三个回调函数都不是必填项，但是代码中很容易因为没有指定 `fail` 回调导致报错，所以推荐后两者中任意指定的一个。\n3. 云开发免费版提供了不超过 2GB 的数据库容量以及每天不超过 500 次读操作，这对个人开发者或者企业 POC （Proof of Concept）非常友好。如果为了保险起见，那 6.9 元/月特惠基础版套餐应该够你做原型验证了。（我没有在打广告 😂）收费项目如下，详细内容请参考 [官方文档](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html):\n   | 分类·参数 | 免费版套餐 | 6.9元/月特惠基础版套餐 |\n   |------|------|------|\n   |存储·容量|5GB|8GB|\n   |存储·下载操作次数|2000/月|10万/月|\n   |存储·上传操作次数|1000/月|5万/月|\n   |存储·CDN回源流量 [注](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html#quota_footnote_cdn_origin)|1GB/月|2GB/月|\n   |CDN·CDN流量 [注](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html#quota_footnote_cdn)|1GB/月|2GB/月|\n   |云函数·资源使用量GBs [注](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html#quota_footnote_gbs)|1000/月|1万/月|\n   |云函数·外网出流量|1GB/月|1GB/月|\n   |云函数·云函数数量|10个|50个|\n   |数据库·容量|2GB|5GB|\n   |数据库·同时连接数 [注](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/billing/quota.html#quota_footnote_db)|5|20|\n   |数据库·读操作数|500/天|5万/天|\n   |数据库·写操作数|300/天|3万/天|\n   |数据库·集合限制|15个|50个|\n4. 官方 WeUI 组件库扩展了小程序原生组件。虽然还是明显不够用，但总比没有强。比如 [mp-icon](https://developers.weixin.qq.com/miniprogram/dev/extended/weui/icon.html) 就省的我们去搜寻或者设计基础图标了。\n\n### 云开发\n\n现在创建微信小程序项目，默认开启云开发选项，方便大家快速部署原型。\n\n### 一点个人感受\n\n微信小程序开发更接近于目前国内最火的 `Vue` 开发，不推荐操作 `DOM`，而是使用各种集成指令。但是小程序开发并不等于 `H5` 开发，很多操作都是基于微信这个沙盒。虽说确实保障了用户数据安全以及个人隐私，但开发者开发体验很受影响，有点像是带着脚镣跳舞吧，其实就是阉割版的 `H5` 开发。这应该是各种权衡下来的结果。\n\n### 预览\n\n![时代残党小程序](/images/WeChat-mini-program-1st-step/gh_d8e358fd13d3_258.jpg)\n\n### 参考链接\n\n- [微信官方文档·小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)\n- [源码](https://github.com/ZXS66/nextwave-miniprogram)\n","tags":["wechat","mini program","微信","小程序"]},{"title":"JavaScript Promise 异常捕获","url":"/2021/06/19/JavaScript-Promise-error-handling/","content":"\n[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) 在前端编程中，越来越频繁地被使用了。作为 `ES6` 的核心功能之一，`Promise` 现在 [基本上没有兼容性问题](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#browser_compatibility)（除了 [Promise.prototype.finally](https://caniuse.com/mdn-javascript_builtins_promise_finally)、[Promise.allSettled](https://caniuse.com/mdn-javascript_builtins_promise_allsettled)、[Promise.any](https://caniuse.com/mdn-javascript_builtins_promise_any) 这些比较新的 API）。而且，现在 [async functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) 写法越来越普遍，`Promise` 作为其背后的基础功能，自然需要各位前端更好地掌握了。\n\n这里推荐 [阮一峰老师](http://www.ruanyifeng.com/home.html) 的 [ES6 入门](https://es6.ruanyifeng.com/#docs/promise)，简洁明了，还举例说明，同时满足新手和专家不同的学习需求！👍👍👍\n\n好了，进入主题：**如何捕获 JS 中 `Promise` 的异常？**\n\n一般 JS 中异常捕获都是使用 [try...catch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) 语句，而 `Promise` 中如果出现异常，一般都是 `reject()`，然后在 `Promise` 链的末尾 [Promise.prototype.catch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) 里处理异常。\n\n![Promise Chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png)\n\n但 `Promise` 也可以使用 [Promise.prototype.finally](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally) 或者使用 JS 原生的 `try...catch` 语句达到抛出异常的目的。\n\n### 最佳实践 \n\n根据 [MDN](https://developer.mozilla.org) 的文章 [<fa-link/>](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#common_mistakes) 推荐，一般 `Promise` 链的最佳实践满足以下三个条件：\n\n1. 内链返回新的 `Promise`；\n2. 避免不必要的嵌套；\n3. 使用 `catch` 中止 `Promise` 链。\n\n反例 🙁：\n\n```js\n// Bad example! Spot 3 mistakes!\ndoSomething().then(function(result) {\n  doSomethingElse(result) // Forgot to return promise from inner chain + unnecessary nesting\n  .then(newResult => doThirdThing(newResult));\n}).then(() => doFourthThing());\n// Forgot to terminate chain with a catch!\n```\n\n正确姿势 🙂：\n\n```js\ndoSomething()\n.then(function(result) {\n  return doSomethingElse(result);\n})\n.then(newResult => doThirdThing(newResult))\n.then(() => doFourthThing())\n.catch(error => console.error(error));\n```\n\n总结：\n\n- [Promise.prototype.catch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) 可以捕获 `Promise` 中所有的异常，包括 `reject` 掉的、或者抛出的异常；以下两种写法其实是等效的：\n  ```js\n  new Promise((resolve, reject) => {\n    throw new Error(\"Whoops!\");\n  }).catch(alert); // Error: Whoops!\n  ```\n  ```js\n  new Promise((resolve, reject) => {\n    reject(new Error(\"Whoops!\"));\n  }).catch(alert); // Error: Whoops!\n  ```\n- 当我们明确知道哪里会出现异常，知道如何处理异常，请时刻牢记使用 [Promise.prototype.catch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) 来捕获/分析/记录异常；如果我们不知道捕获到的异常种类（比如编程错别字导致的），那就重新抛出异常；\n- 当然，如果发生了无法预料到的异常，那我们也可以不使用 [Promise.prototype.catch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch)\n- 任何情况下，我们都应该监听 `unhandledrejection` 事件，跟踪未捕获的异常并通知给用户（也可能是我们的服务器），这样的话我们的应用才不会“死”。\n\n### 不同点\n\n1. `reject` 只能用在 `Promise` 回调函数里，而抛出 (`throw`) 异常则可以使用在任何 `try...catch` 语句或者 `Promise` 中；\n2. `reject` 异常之后，方法内的函数会继续执行，而抛出 (`throw`) 异常则会立刻终止执行；\n3. `reject` 可以用在 `Promise` 的同步/异步回调函数里，而抛出 (`throw`) 异常只能用在同步回调函数里。\n\n### 参考链接\n\n- [Error handling with promises](https://javascript.info/promise-error-handling)\n- [Using Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)\n- [Reject Vs Throw Promises in JavaScript](https://www.geeksforgeeks.org/reject-vs-throw-promises-in-javascript)\n","tags":["javascript","promise","throw","try...catch"]},{"title":"JavaScript window.print 不能正常调用","url":"/2021/06/09/JavaScript-window-print-not-working/","content":"\n一直以来，我都是调用 `window.print` 方法唤起页面打印功能（这个方法还可以用来保存 pdf 文件）。但是今天开始，这个方法不能 100% 正常工作了。我以为，只要我调用了这个方法，打印对话框就跟我调用 `window.alert` 一样立马出来。但是现实啪啪打脸，它并没有出来。\n\n网上搜了一大堆资料，发现遇到这个问题的人还不少。看来是我想当然了。\n\n这里记录一下结论（坑）：**页面还卡在加载资源的时候，是不能调用 `window.print` 方法的**（见参考 [链接 1](https://stackoverflow.com/questions/18622626/chrome-window-print-print-dialogue-opens-only-after-page-reload-javascript/46051099#46051099)）。\n\n可能你遇到的问题和我的还不太一样，更多可能原因，请参考 [链接 2](https://www.xspdf.com/resolution/51316274.html)\n\n### 参考链接\n\n- [Chrome: window.print() print dialogue opens only after page reload (javascript)](https://stackoverflow.com/questions/18622626/chrome-window-print-print-dialogue-opens-only-after-page-reload-javascript/46051099#46051099)\n- [Google chrome printing issues 2020](https://www.xspdf.com/resolution/51316274.html)\n","tags":["javascript","window.print"]},{"title":"从 MySQL 迁移数据至 SQL Server","url":"/2021/06/06/migrate-data-from-MySQL-to-SQL-Server/","content":"\n数据库之间数据同步，是很常见的场景。可能发生在相同服务器不同数据库名之间，也可能发生在不同服务器实例相同数据库之间，还可能发生在不同服务器不同数据库软件之间等等。本片文章只覆盖：如何从 MySQL 迁移数据至 SQL Server 中。\n\n我目前使用了两种方法：\n\n### 使用 Microsoft SQL Server Migration Assistant for MySQL 工具\n\n这是微软官方出品的迁移工具。对于项目前期业务人员进行原型快速验证非常有帮助。\n\n##### 使用步骤\n\n1. 下载 [Microsoft SQL Server Migration Assistant for MySQL](https://www.microsoft.com/en-us/download/details.aspx?id=54257) ；\n2. 双击 exe 文件安装；\n3. 运行 SSMA：\n    1. 连接 MySQL\n    2. 勾选需要迁移的表、视图、存储过程、函数等\n    3. 连接 SQL Server\n    4. 勾选需要迁移的目标 SQL Server 数据库\n    5. 回到左边 MySQL Metadata Explorer 窗口，点击按钮 “Convert Schema”\n    6. 待完成后，右键 SQL Server 数据库节点，“Synchronize with Database”\n    7. 待完成后，点击“Migrate Data”\n    8. 完成。\n\nSSMA 网上有很多图文/视频教程，各位可以自行搜索。期间可能会遇到以下问题：\n\n- MySQL ODBC Driver 缺失问题，可以自行去 [MySQL 官网下载](https://www.mysql.com/products/connector/)；如果还是有问题，可以去 SSMA 下载页找它的 System Requirements，里面会提到具体的 MySQL ODBC Driver 版本号，下载这一特定版本号就对了。\n- Visual Studio 2019 x64 Redistributable 组件缺失问题，去 [微软官方下载](https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0) 安装即可。\n\n##### 优点\n1. 非 IT 人士也可以上手，不用编写任何代码；\n\n##### 缺点\n1. 前期环境安装和配置步骤繁琐，容易出错；\n2. 无法自动化。\n\n### 创建 SSIS\n\n##### 使用步骤\n\n[官方参考文档](https://docs.microsoft.com/en-us/sql/integration-services/lesson-1-create-a-project-and-basic-package-with-ssis?view=sql-server-ver15)\n\n1. 安装 MySQL ODBC Connector [点此下载](https://dev.mysql.com/downloads/connector/odbc/)；\n2. 打开 Visual Studio，新建 Integration Services Project； \n3. 分别为 MySQL 和 SQL Server 添加 Connection（在 Solution Explorer 中，右键 Connection Managers，New Connection Manager），范例如下：\n![MySQL Connection Manager](/images/migrate-data-from-MySQL-to-SQL-Server/MySQL-connection-manager.jpg)\n![SQL Server Connection Manager](/images/migrate-data-from-MySQL-to-SQL-Server/SQL-Server-connection-manager.jpg)\n4. 从 SSIS Toolbox 中拖入 Execute SQL Task 或者 Data Flow Task，前者可用于执行 SQL 脚本或者存储过程，后者则可以更加灵活配置；\n5. 双击 Data Flow Task 切换至 Data Flow 视图，添加一个 `ADO NET Source`，双击编辑，ADO.NET Connection Manager选择刚才第3步所创建 MySQL Connection Manager，Data access mode 选择 SQL command，SQL command text 填入 SELECT 查询语句：\n![MySQL Source](/images/migrate-data-from-MySQL-to-SQL-Server/MySQL-ADO.NET-Source.jpg)\n6. 再添加一个 `ADO NET Destination`，双击编辑，ADO.NET Connection Manager选择刚才第3步所创建 SQL Server Connection Manager，Use a table or view 选择需要插入的目标表：\n![SQL Server Destination](/images/migrate-data-from-MySQL-to-SQL-Server/SQL-Server-ADO.NET-Source.jpg)\n7. 点击 ADO NET Source 蓝色箭头，连接至 SQL Server Destination（当然这中间可以加一些变换，可选）；\n8. 切换回 Control Flow，也用蓝色箭头连接各 Execute SQL Task 或者 Data Flow Task；\n9. 编译、本地调试一遍；\n10. 邮件点击 Project Name，Deploy，Server Name 输入目标 SQL Server 地址，Path 设置完毕，Next，Deploy，数秒后完成；\n11. 打开 SSMS (SQL Server Management Studio)，找到对应的 Package，右键 Execute：\n![Execute SSIS](/images/migrate-data-from-MySQL-to-SQL-Server/execute-SSIS.jpg)\n12. 稍等片刻，即可查看运行结果报告。\n\n说一个我开发时遇到的坑吧：从 MySQL 到 SQL Server 类型转换时请参考 [文档](https://docs.microsoft.com/en-us/sql/integration-services/data-flow/integration-services-data-types?view=sql-server-ver15)，一般 `VARCHAR` 或者 `TEXT` 这些类型没有问题，但是 `DateTime` 需要注意精度问题、空值问题。精度不一致可能会导致精度丢失甚至运行报错。MySQL 中空时间为 `0000-00-00`，而 SQL Server 中空时间为 `1970-01-01`。\n\n网上说的解决方案很多，但不一定适用，或者不适用于所有场景。我的解决方案很简单，就是在第5步时，填写 MySQL Source 的 SQL command text 时，稍加调整脚本，把 DATETIME 这些类型的数据做个变换：\n\n```sql\n-- approach 1: IF(`fromTime` IS NULL OR `fromTime`='0000-00-00', NULL, DATE_FORMAT(`fromTime`, '%Y-%m-%d')) AS `fromTime`,  -- for nullable date type\n-- approach 2: CAST(`list_date` AS CHAR) AS `EY_List_date`,  -- for datetime type\n-- approach 3: CAST(`list_date` AS DATE) AS `EY_List_date`,  -- for date type\n```\n\n##### 优势：\n1. 性能快；\n2. 人工介入少，不易出错；\n3. 可自动化，SQL Server 中可以直接查看每次运行的报告。\n\n##### 缺点：\n1. SSIS 任务**只能使用 Windows 认证**。前期环境配置需要花费一定时间；\n2. 开发 SSIS 时，部分提示信息不够准确清晰；\n3. 第一次需要手动同步 Schema，以后每次 Schema 有变动，SSIS package 也需要跟着变动。\n\n### 参考链接：\n\n- <i class=\"fa fa-windows\" aria-hidden=\"true\"></i> [Download Microsoft SQL Server Migration Assistant for MySQL](https://www.microsoft.com/en-us/download/details.aspx?id=54257)\n- [MySQL :: Download Connector/ODBC](https://dev.mysql.com/downloads/connector/odbc/)\n- <i class=\"fa fa-windows\" aria-hidden=\"true\"></i> [Integration Services Data Types](https://docs.microsoft.com/en-us/sql/integration-services/data-flow/integration-services-data-types?view=sql-server-ver15)\n","tags":["mysql","sql server","migration","microsoft sql server migration assistant for mysql","sql server integration service","etl"]},{"title":"数据库信息摘要","url":"/2021/05/23/message-digest-in-database/","content":"\n数据库中，经常遇见需要去重的场景。可能是整行记录（除了 ID）去重，也可能是整行记录的部分字段去重（仅看核心字段）。一般都是采用 SELECT DISTINCT 或者 GROUP BY 方式拿到唯一值，但是这个方法有一个缺陷，SELECT DISTINCT 或者 GROUP BY 多个字段的时候，每次都要书写把所有参与去重逻辑的字段写全了，稍微更改字段或调整次序都需要在所有 SELECT DISTINCT 或者 GROUP BY 的地方同步代码，既繁琐又易出错。下面介绍一下我在项目中使用到的办法（其实很简单，在插入数据库记录时，每次都是先计算好这一条记录的[信息摘要](https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E6%91%98%E8%A6%81/4069118?fromtitle=%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81&fromid=4547744&fr=aladdin)并存成额外的字段如checksum，查询的时候只需要看这一个字段就行）：\n\n### MySQL 解决办法\n\n```sql\nUPDATE tableA SET checksum=MD5(CONCAT_WS(\n  col1\n  ,col2\n  ,col3\n  -- more columns here\n  ))\n-- WHERE col1=1;\n```\n\n### SQL Server 解决办法\n\n\n```sql\nUPDATE tableA SET checksum=CONVERT(VARCHAR(256),HashBytes('SHA2_256', CONCAT(\n  col1\n  ,col2\n  ,col3\n  -- more columns here\n  )),2)\n-- WHERE col1=1;\n```\n\n备注：此种方法有一个限制，参与计算信息摘要的所有字段不能超过一定长度限制。\n\n### 参考链接\n\n- [HASHBYTES (Transact-SQL)](https://docs.microsoft.com/en-us/sql/t-sql/functions/hashbytes-transact-sql?view=sql-server-ver15)\n","tags":["database","message digest","md5","sha256"]},{"title":"Hexo博客使用二维码生成器","url":"/2021/05/16/self-serve-QRCode-in-hexo/","content":"\n一般情况下，网上的二维码生成器都是后台解决方案，即前台填写信息后，发送至后台，后台生成二维码图片返回前台。比如 [草料二维码](https://cli.im) 或 [自学PHP网的二维码生成器](https://zixuephp.net/inc/qrcode_img.php?url=https://zxs66.github.io) 或者\n\n考虑到二维码生成器是个很简单的任务，没必要非要搞个后台托管服务器，这里提供另一种纯前端方案。具体使用方法可以参考 [这个仓库](https://github.com/ZXS66/qrcode-web)\n\n这里我就介绍一下 `Hexo` 静态博客中如何启用。\n\n1. 拷贝 [此仓库](https://github.com/ZXS66/qrcode-web) 中 `index.html` 和 `qrcode.min.js` 文件到目标博客目录，比如 `/source/static`；\n\n2. 打开需要使用的二位生成器的脚本或页面，引用链接到上一步复制的 `index.html`，动态传入参数 `data`(记得转义字符)，比如 `/static/qrcode.html?data=https%3A%2F%2Fzxs66.github.io%2F2021%2F05%2F16%2Fself-serve-QRCode-in-hexo%2F`(此处重命名 `index.html` 为 `qrcode.html`)；\n\n3. 更新 `Hexo` 配置 `_config.yml`，添加忽略目标目录 `skip_render`，比如 `static/**`；\n\n4. 更多可参考本博客每篇文章右下角的分享/微信分享。\n\n### 参考链接\n\n- [qrcode - npm](https://www.npmjs.com/package/qrcode)\n","tags":["qr code","hexo"]},{"title":"渐进式网页应用(PWA)入门","url":"/2021/05/06/get-started-with-PWA/","content":"\n`PWA` 现在越来越流行了。虽然国内见得不多，但国外已经非常常见了。闲来无事，那就把本博客改造成 `PWA` 好了。\n\n### PWA 介绍\n\n此处省略一万字。[<fa-link/>](https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps)\n\n### 起步\n\n参考的是 [<i class=\"fa fa-microsoft\" aria-hidden=\"true\"></i> 这篇文档](https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/get-started)。~~此处又省略了一万字。~~\n\n### 一个小 bug\n\n`@pwabuilder/pwaupdate` 组件 [默认](https://github.com/pwa-builder/pwa-update#api) 加载的 `service worker` 是**当前路径**下的 \"pwabuilder-sw.js\" 文件。可是，当路径变了，比如跳到了更深一层目录，`service worker` 就不能正常加载了。解决办法是在注册 `service worker` 时（执行 `pwabuilder-sw-register.js` 文件），指定 `swpath` 为 \"`/pwabuilder-sw.js`\"。\n\n``` js\nimport \"https://cdn.jsdelivr.net/npm/@pwabuilder/pwaupdate\";\nconst el = document.createElement(\"pwa-update\");\n// default is \"pwabuilder-sw.js\", but it doesn't work in subpaths\nel.setAttribute(\"swpath\", \"/pwabuilder-sw.js\");\ndocument.body.appendChild(el);\n```\n\n### 强制更新\n\n上线后一段时间发现，`PWA` 是可以正常工作了，也能离线使用，但是因为使用的是 `Cache-First` 策略，所以会发生服务器端其实已经更新了，但是本地一直看不到最新版本。PC 端还好，可以使用强制刷新 (`Ctrl`+`Shift`+`R`或者`Ctrl`+`Shift`+`F5`组合键或者长按刷新按钮)来查看最新版本，手机端怎么办。手机浏览器又没有强制刷新功能。\n\n上网搜寻解决方案，发现我并不是一个人，很多人有这个痛点！！使用 `Cache-First` 策略的人，其实大部分人都是希望优先打开本地缓存版本（以提升速度），在设备联网的时候，有更新即更新版本，这次/下次刷新直接用，没更新就接着用本地缓存版。\n\n![The stale-while-revalidate strategy](https://cdn.sanity.io/images/uf1om34c/production/5c7f0c54f4c05c14d0bbbfe4a76753c51faf9154-1014x492.png?w=1200&fm=webp&max-h=600&q=80&auto=format)\n\n其实，Google 在设计 `workbox` 的时候，已经考虑到这个场景，解决办法非常简单，把策略改成 `Stale-While-Revalidate` 即可。\n`pwabuilder-sw.js` 内容修改如下：\n\n``` js\n// This is the \"Offline copy of assets\" service worker\nconst CACHE = \"pwabuilder-offline\";\nconst QUEUE_NAME = \"bgSyncQueue\";\nimportScripts(\n  \"https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js\"\n);\nself.addEventListener(\"message\", event => {\n  if (event.data && event.data.type === \"SKIP_WAITING\") {\n    self.skipWaiting();\n  }\n});\nconst bgSyncPlugin = new workbox.backgroundSync.BackgroundSyncPlugin(\n  QUEUE_NAME,\n  // { maxRetentionTime: 7 * 24 * 60 } // Retry for max of 1 week (specified in minutes)\n);\nworkbox.routing.registerRoute(\n  new RegExp(\"/*\"),\n  new workbox.strategies.StaleWhileRevalidate({\n    cacheName: CACHE,\n    plugins: [bgSyncPlugin]\n  })\n);\n```\n\n更多策略，请参考 [<i class=\"fa fa-google\" aria-hidden=\"true\"></i> Workbox 官方文档](https://developers.google.com/web/tools/workbox/modules/workbox-strategies) 或 [Workbox Strategies with examples and use-cases](https://www.charistheo.io/blog/2021/03/workbox-strategies-with-examples-and-use-cases/)。\n\n发布上线，测试，完美解决问题！😄\n\n### 参考链接\n\n- [<i class=\"fa fa-microsoft\" aria-hidden=\"true\"></i> Get started with Progressive Web Apps (Chromium)](https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps-chromium/get-started)\n- [<i class=\"fa fa-stack-overflow\" aria-hidden=\"true\"></i> When and how does a PWA update itself?](https://stackoverflow.com/questions/49739438/when-and-how-does-a-pwa-update-itself)\n- [PWA Builder](https://www.pwabuilder.com/)\n- [<i class=\"fa fa-google\" aria-hidden=\"true\"></i> Workbox 官方文档](https://developers.google.com/web/tools/workbox/modules/workbox-strategies)\n- [Workbox Strategies with examples and use-cases](https://www.charistheo.io/blog/2021/03/workbox-strategies-with-examples-and-use-cases/)\n","tags":["get started","pwa","progressive web app","workbox"]},{"title":"开源许可证","url":"/2021/05/01/open-source-licenses/","content":"\n![如何选择开源许可证](https://www.ruanyifeng.com/blogimg/asset/201105/bg2011050101.png)","tags":["open source","license"]},{"title":"SQL Server 数据迁移","url":"/2021/04/25/SQL-Server-data-migration/","content":"\n\n### 清空数据库\n\n以下代码来自 [Stackoverflow](https://stackoverflow.com):\n\n```sql\n    /* Drop all non-system stored procs */ \n    DECLARE @name VARCHAR(128) \n    DECLARE @SQL VARCHAR(254)\n    DECLARE @schema VARCHAR(128)\n\n    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = 'P' AND category = 0 ORDER BY [name]) \n    SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.procedures WHERE [name] = @name)\n\n    WHILE @name is not null \n    BEGIN \n        SELECT @SQL = 'DROP PROCEDURE [' + @schema + '].[' + RTRIM(@name) +']' \n        --PRINT (@SQL)\n        EXEC (@SQL) \n        PRINT 'Dropped Procedure: ' + @name \n\n        SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = 'P' AND category = 0 ORDER BY [name])\n        SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.procedures WHERE [name] = @name) \n    END \n    GO \n\n    /* Drop all database triggers */\n    DECLARE @name VARCHAR(128) \n    DECLARE @SQL VARCHAR(254)\n\n    SELECT @name = (SELECT TOP 1 T.name FROM sys.triggers AS T WHERE T.parent_id = 0 /* database trigger */ ORDER BY [name])\n\n    WHILE @name is not null \n    BEGIN \n        SELECT @SQL = 'DROP TRIGGER [' + RTRIM(@name) +'] ON DATABASE' \n        EXEC (@SQL) \n        PRINT 'Dropped TRIGGER: ' + @name \n\n        SELECT @name = (SELECT TOP 1 T.name FROM sys.triggers AS T WHERE T.parent_id = 0 /* database trigger */ AND [name] > @name ORDER BY [name])\n    END \n    GO \n\n    /* Drop all views */ \n    DECLARE @name VARCHAR(128) \n    DECLARE @SQL VARCHAR(254)\n    DECLARE @schema VARCHAR(128)\n\n    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = 'V' AND category = 0 ORDER BY [name]) \n    SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.views WHERE [name] = @name)\n\n    WHILE @name IS NOT NULL \n    BEGIN \n        SELECT @SQL = 'DROP VIEW [' + @schema + '].[' + RTRIM(@name) +']' \n        EXEC (@SQL) \n        PRINT 'Dropped View: ' + @name \n        SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = 'V' AND category = 0 AND [name] > @name ORDER BY [name]) \n        SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.views WHERE [name] = @name)\n    END \n    GO \n\n    /* Drop all Foreign Key constraints */ \n    DECLARE @name VARCHAR(128) \n    DECLARE @constraint VARCHAR(254) \n    DECLARE @SQL VARCHAR(254) \n    DECLARE @schema VARCHAR(128)\n\n    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'FOREIGN KEY' ORDER BY TABLE_NAME) \n    SELECT @schema = (SELECT TOP 1 CONSTRAINT_SCHEMA FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'FOREIGN KEY' ORDER BY TABLE_NAME)\n\n    WHILE @name is not null \n    BEGIN \n        SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'FOREIGN KEY' AND TABLE_NAME = @name AND CONSTRAINT_SCHEMA = @schema ORDER BY CONSTRAINT_NAME) \n        WHILE @constraint IS NOT NULL \n        BEGIN \n            SELECT @SQL = 'ALTER TABLE [' + @schema + '].[' + RTRIM(@name) +'] DROP CONSTRAINT [' + RTRIM(@constraint) +']' \n            BEGIN TRY\n                EXEC (@SQL)\n                PRINT 'Dropped FK Constraint: ' + @constraint + ' on ' + @name\n            END TRY\n            BEGIN CATCH\n                PRINT (@SQL)\n            END CATCH\n            SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'FOREIGN KEY' AND CONSTRAINT_NAME <> @constraint AND TABLE_NAME = @name AND CONSTRAINT_SCHEMA = @schema ORDER BY CONSTRAINT_NAME) \n        END \n    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'FOREIGN KEY' ORDER BY TABLE_NAME) \n    SELECT @schema = (SELECT TOP 1 CONSTRAINT_SCHEMA FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'FOREIGN KEY' ORDER BY TABLE_NAME)\n    END \n    GO \n\n    /* Drop all Primary Key constraints */ \n    DECLARE @name VARCHAR(128) \n    DECLARE @constraint VARCHAR(254) \n    DECLARE @SQL VARCHAR(254) \n    DECLARE @schema VARCHAR(128)\n\n    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'PRIMARY KEY' ORDER BY TABLE_NAME) \n    SELECT @schema = (SELECT TOP 1 CONSTRAINT_SCHEMA FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'PRIMARY KEY' ORDER BY TABLE_NAME)\n\n    WHILE @name IS NOT NULL \n    BEGIN \n        SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_NAME = @name AND CONSTRAINT_SCHEMA = @schema ORDER BY CONSTRAINT_NAME) \n        WHILE @constraint is not null \n        BEGIN \n            SELECT @SQL = 'ALTER TABLE [' + @schema + '].[' + RTRIM(@name) +'] DROP CONSTRAINT [' + RTRIM(@constraint)+']' \n            --PRINT @SQL\n            EXEC (@SQL)\n            PRINT 'Dropped PK Constraint: ' + @constraint + ' on ' + @name \n            SELECT @constraint = (SELECT TOP 1 CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'PRIMARY KEY' AND CONSTRAINT_NAME <> @constraint AND TABLE_NAME = @name AND CONSTRAINT_SCHEMA = @schema ORDER BY CONSTRAINT_NAME) \n        END \n    SELECT @name = (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'PRIMARY KEY' ORDER BY TABLE_NAME) \n    SELECT @schema = (SELECT TOP 1 CONSTRAINT_SCHEMA FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_catalog=DB_NAME() AND CONSTRAINT_TYPE = 'PRIMARY KEY' ORDER BY TABLE_NAME)\n    END \n    GO \n\n    /* Drop all tables */ \n    DECLARE @name VARCHAR(128) \n    DECLARE @SQL VARCHAR(254) \n    DECLARE @schema VARCHAR(128)\n\n    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = 'U' AND category = 0 ORDER BY [name]) \n    SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.tables WHERE [name] = @name)\n\n    WHILE @name IS NOT NULL \n    BEGIN \n        SELECT @SQL = 'DROP TABLE [' + @schema + '].[' + RTRIM(@name) +']' \n        EXEC (@SQL) \n        PRINT 'Dropped Table: ' + @name \n        SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] = 'U' AND category = 0 ORDER BY [name]) \n        SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.tables WHERE [name] = @name)\n    END \n    GO \n\n    /* Drop all functions */ \n    DECLARE @name VARCHAR(128) \n    DECLARE @SQL VARCHAR(254) \n    DECLARE @schema VARCHAR(128)\n\n    SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] IN (N'FN', N'IF', N'TF', N'FS', N'FT') AND category = 0 ORDER BY [name]) \n    SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.objects WHERE [name] = @name)\n\n    WHILE @name IS NOT NULL \n    BEGIN \n        SELECT @SQL = 'DROP FUNCTION [' + @schema + '].[' + RTRIM(@name) +']' \n        EXEC (@SQL) \n        PRINT 'Dropped Function: ' + @name \n        SELECT @name = (SELECT TOP 1 [name] FROM sysobjects WHERE [type] IN (N'FN', N'IF', N'TF', N'FS', N'FT') AND category = 0 AND [name] > @name ORDER BY [name]) \n        SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.objects WHERE [name] = @name)\n    END \n    GO \n\n    /* Drop all types */ \n    DECLARE @name VARCHAR(128) \n    DECLARE @SQL VARCHAR(254) \n    DECLARE @schema VARCHAR(128)\n\n    SELECT @name = (SELECT TOP 1 [name] FROM sys.types WHERE is_user_defined = 1 ORDER BY [name]) \n    SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.types WHERE [name] = @name)\n\n    WHILE @name IS NOT NULL \n    BEGIN \n        SELECT @SQL = 'DROP TYPE [' + @schema + '].[' + RTRIM(@name) +']' \n        EXEC (@SQL) \n        PRINT 'Dropped type: ' + @name \n        SELECT @name = (SELECT TOP 1 [name] FROM sys.types WHERE is_user_defined = 1 AND [name] > @name ORDER BY [name]) \n        SELECT @schema = (SELECT TOP 1 schema_name(schema_id) FROM sys.types WHERE [name] = @name)\n    END \n    GO \n```\n\n> You are not alone. One out of every four users who visits a Stack Overflow question copies something within five minutes of hitting the page.\n\n### 参考链接\n\n- [How to delete everything from a database (tables, views, stored procedures, functions)?](https://stackoverflow.com/questions/13392969/how-to-delete-everything-from-a-database-tables-views-stored-procedures-func)\n- [How often do people actually copy and paste from Stack Overflow? Now we know.](https://stackoverflow.blog/2021/04/19/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/?cb=1&_ga=2.168632097.1294065429.1618732937-441246969.1618368368)\n\n\n","tags":["sql","sql server","migration"]},{"title":"CSharp 去抖和节流","url":"/2021/04/20/CSharp-debounce-and-throttle/","content":"\n去抖和节流，是前端频繁提及的概念。因为前端容易触及性能问题，比如窗口滑动、鼠标重复点击等等，如果没有去抖/节流/防重复提交这些操作，页面交互极有可能变得肉眼可见的卡顿。\n\n现在 CSharp 编程中遇到类似情况，需要将同样的原理应用于后台编程。\n\n一般情况下，我们可以使用第三方库，比如 [Reactive Extension](https://github.com/Reactive-Extensions/Rx.NET) (类似于前端的 [RxJS](https://rxjs.dev/) )。但是，我就只是要一个去抖和节流的功能，没必要引入一个第三方库吧。现实中项目如果要引入第三方库*可能*会引入各种问题。既然如此，何不重复造个轮子 😂\n\n> Talk is cheap, show me the code!\n\n```cs\n/// <summary>\n/// <para>Provides Debounce() and Throttle() methods.\n/// Use these methods to ensure that events aren't handled too frequently.</para>\n/// \n/// <para>Throttle() ensures that events are throttled by the interval specified.\n/// Only the last event in the interval sequence of events fires.</para>\n/// \n/// <para>Debounce() fires an event only after the specified interval has passed\n/// in which no other pending event has fired. Only the last event in the\n/// sequence is fired.</para>\n/// </summary>\npublic class DebounceDispatcher\n{\n    private CancellationTokenSource debouncer;\n    /// <summary>\n    /// <para>Debounce an event by resetting the event timeout every time the event is \n    /// fired. The behavior is that the Action passed is fired only after events\n    /// stop firing for the given timeout period.</para>\n    /// \n    /// <para>Use Debounce when you want events to fire only after events stop firing\n    /// after the given interval timeout period.</para>\n    /// </summary>\n    /// <param name=\"interval\">Timeout in Milliseconds</param>\n    /// <param name=\"action\">Action<object> to fire when debounced event fires</object></param>\n    /// <param name=\"param\">optional parameter</param>\n    public void Debounce(int interval, Action<object> action, object param = null)\n    {\n        if (debouncer != null && !debouncer.IsCancellationRequested)\n        {\n            debouncer.Cancel();\n        }\n        try\n        {\n            debouncer = new CancellationTokenSource();\n            var t = Task.Delay(interval, debouncer.Token);\n            t.ContinueWith((p) =>\n            {\n                if (p.Status == TaskStatus.RanToCompletion)\n                    action.Invoke(param);\n            });\n            t.Start();\n        }\n        catch (Exception)\n        {\n            // duplicated invokes, the previous one was cancelled\n            System.Console.WriteLine($\"[{DateTime.Now}]: task was cancelled\");\n        }\n    }\n    private long throttler = 0;\n    /// <summary>\n    /// <para>This method throttles events by allowing only 1 event to fire for the given\n    /// timeout period. Only the last event fired is handled - all others are ignored.\n    /// Throttle will fire events every timeout ms even if additional events are pending.</para>\n    /// \n    /// <para>Use Throttle where you need to ensure that events fire at given intervals.</para>\n    /// </summary>\n    /// <param name=\"interval\">Timeout in Milliseconds</param>\n    /// <param name=\"action\">Action<object> to fire when debounced event fires</object></param>\n    /// <param name=\"param\">optional parameter</param>\n    public void Throttle(int interval, Action<object> action, object param = null)\n    {\n        if (throttler == 0 || (DateTime.Now.Ticks - throttler) / 10000 >= interval)\n        {\n            action.Invoke(param);\n            throttler = DateTime.Now.Ticks;\n        }\n    }\n}\n```\n\n- 节流很简单，就不过多解释了；\n- 去抖，此处用到了三个关键函数： [Task.Delay](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay?view=net-5.0) （类似于 js 中 setTimeout ）、[Task.ContinueWith](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.continuewith?view=net-5.0) （类似于 js 中的 Promise.then，不同的是后者接受两个参数，分别是成功回调和错误回调，而前者仅有一个回调，成功和错误都在一个里面）、[CancellationTokenSource.Cancel](https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancel?view=net-5.0)。\n\n### 参考链接\n\n- [Task.Delay Method](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay?view=net-5.0)\n- [Task.ContinueWith Method](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.continuewith?view=net-5.0)\n- [CancellationTokenSource.Cancel Method](https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancel?view=net-5.0)\n","tags":["csharp","debounce","throttle"]},{"title":"CSharp 正则表达式初尝","url":"/2021/04/15/CSharp-Regular-Experssion-taste/","content":"\n检测用户名和密码是否符合相应的强度要求：\n\n```cs\n  string username = \"BF-37\";\n  if (!System.Text.RegularExpressions.Regex.Match(username, @\"^[a-zA-Z0-9\\-\\.]{4,16}$\").Success)\n  {\n    // 大小写、数字、分隔符(-)、点号(.)，密码长度4到16\n    Console.WriteLine(\"invalid user name\");\n  }\n  string password = \"Super hent@i\";\n  if (!System.Text.RegularExpressions.Regex.Match(password, @\"^[\\s!-~]{8,32}$\").Success)\n  {\n    // 可打印字符（ASCII码从空格到~结束），密码长度8到32\n    Console.WriteLine(\"invalid password\");\n  }\n```\n","tags":["csharp","regular expression"]},{"title":"CORS 复习","url":"/2021/04/11/CORS-review/","content":"\n好久没有更新了，主要是~~工作忙~~懒。正好前两天给同事开发 API 的时候，遇见一个小问题，这里简单记录一下。\n\n故事是这样的，我明明给他开启了 CORS （已设置响应头，正确处理 preflight options request），但是对方从本地开发环境访问仍说 CORS 错误。因为这个 API 启用了 Windows 认证，我让他设置 [withCredentials:true](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)，也没有用，一直报错 401 或 405：\n\n![401 Unauthorized](/images/CORS-review/401_unauthorized.jpg)\n![405 Method Not Allowed](/images/CORS-review/405_method_not_allowed.jpg)\n\n明明是复制粘贴之前能正常工作的代码，怎么就不行了？\n\n好吧，按照 [官方推荐做法](https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/enabling-cross-origin-requests-in-web-api) 再来一遍：\n\n1. 安装 NuGet 包： `Install-Package Microsoft.AspNet.WebApi.Cors`\n2. 启用 CORS，在 *App_Start/WebApiConfig.cs* 文件新增如下代码：\n   ```cs\n  var cors = new System.Web.Http.Cors.EnableCorsAttribute\n    (\n        Constants.LocalDevEnv,\n        \"*\",\n        \"*\"\n    );\n  cors.SupportsCredentials = true;\n  config.EnableCors(cors);\n   ```\n3. 接收 preflight request，在*web.config*文件&lt;system.webServer&gt;&lt;handlers&gt;节点添加以下内容(一般安装 NuGet 包时自动添加)：\n   ```xml\n  <system.webServer>\n    <handlers>\n      <remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\n      <remove name=\"OPTIONSVerbHandler\" />\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\n    </handlers>\n  </system.webServer>\n   ```\n4. 设置响应头，在 *web.config*文件&lt;system.webServer&gt;&lt;httpProtocol&gt;&lt;customHeaders&gt;节点添加以下内容：\n   ```xml\n  <add name=\"Access-Control-Allow-Origin\" value=\"http://localhost:3000\" />  <!-- set the origin specifically-->\n  <add name=\"Access-Control-Allow-Headers\" value=\"*\" />\n  <add name=\"Access-Control-Allow-Methods\" value=\"*\" />\n  <add name=\"Access-Control-Allow-Credentials\" value=\"true\" />\n   ```\n\n值得注意的是，因为我们启用了 Windows 认证，也就是说，跨域的时候需要设置正确的响应头，否则浏览器依然会报错：\n\n> If the browser sends credentials, but the response does not include a valid Access-Control-Allow-Credentials header, the browser will not expose the response to the application, and the AJAX request fails. Be careful about setting SupportsCredentials to true, because it means a website at another domain can send a logged-in user's credentials to your Web API on the user's behalf, without the user being aware. The CORS spec also states that setting origins to \"*\" is invalid if SupportsCredentials is true.\n\n简单来说，当 API 需要发送 credentials 给 API 服务器时，`Access-Control-Allow-Origin` 不能为 `*`，必须得指明 Origin。\n\n再次测试：\n\n![测试结果](/images/CORS-review/test.png)\n\nBingo！\n\n### 参考链接\n\n- [Enable cross-origin requests in ASP.NET Web API 2](https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/enabling-cross-origin-requests-in-web-api)\n- [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS)\n- [Access-Control-Allow-Credentials](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials)\n","tags":["cors"]},{"title":"MySQL 变量","url":"/2021/03/25/MySQL-variables/","content":"\n本文仅记录 MySQL 中本地变量和用户变量的相同和不同。\n\n### TL;DR;\n\n感觉英文还行的看官，请直接移步 [参考链接](#参考链接) 查看 MySQL 官方文档。\n\n##### 相同点：\n\n都可以使用 SET 语句赋值。\n\n##### 不同点\n\n| |本地变量|用户变量|\n|-------|-------|-------|\n|变量名称格式|不以@开头|必须以@开头|\n|是否需要DECLARE|✔️|❌|\n|常见使用场景|存储过程|即时查询窗口|\n|存在作用域|当前存储过程|当前会话|\n\n> The scope of a local variable is the BEGIN ... END block within which it is declared. The variable can be referred to in blocks nested within the declaring block, except those blocks that declare a variable with the same name. Because local variables are in scope only during stored program execution, references to them are not permitted in prepared statements created within a stored program. Prepared statement scope is the current session, not the stored program, so the statement could be executed after the program ends, at which point the variables would no longer be in scope. For example, SELECT ... INTO local_var cannot be used as a prepared statement. \n\n> User-defined variables are session specific. A user variable defined by one client cannot be seen or used by other clients. (Exception: A user with access to the Performance Schema user_variables_by_thread table can see all user variables for all sessions.) All variables for a given client session are automatically freed when that client exits.\n\n### 参考链接\n\n- [MySQL::User-Defined Variables](https://dev.mysql.com/doc/refman/8.0/en/user-variables.html)\n- [MySQL::Local Variable Scope and Resolution](https://dev.mysql.com/doc/refman/8.0/en/local-variable-scope.html)\n- [Declare and Use Variables in MySQL](https://www.delftstack.com/howto/mysql/mysql-declare-variable/)","tags":["mysql","variable"]},{"title":"ASP.NET MVC 表单认证","url":"/2021/03/14/ASP-NET-MVC-Forms-Authentication/","content":"\n开始之前，先发一句牢骚，平时我们用微软技术栈（`ASP.NET`、`C#`、`.NET Core`），就是因为看中了绝大多数公司办公环境是 `Windows` 桌面系统，使用微软技术栈能够更好的与 `OA`、`SMTP` 邮箱、`ERP` 等企业内部系统深度集成。省去了用户权限设计不说（和其他系统共用一个 AD 域账户），还能方便开发者快速搭建原型。所以，我之前编写的 `ASP.NET` 网站基本上都是使用的 `Windows` 认证。然而，前几天某客户 IT 的标准要求，不能使用 `Windows` 认证。具体来说，不是不能使用 `Windows` 认证，是不能使用各浏览器自带的用户权限输入框来填写用户名密码。我们写的 APP 必须有自己的登陆/登出页面，同时为了使用 AD 域账户，我们的 APP 拿到用户名和**密码**后去 AD 里验证合法性。当时听到这个整个，心中一百个 CNM 在奔腾。你们真的确定吗？？？\n\n先不说这个标准是谁定的，脑子瓦塌了？你真的放心让我来接触域账户密码(明文)？！我自己都害怕。。。不担心我私自存储用户密码？不担心用户填写信息时候被窃听？至少你使用 `SSO` （Single-Sign On，单点登录）都比这个强啊！\n\n### 更改 web.config\n\n打开目标站点的 `web.config` 文件，更新 `authentication` 和 `authorization` 节点配置如下：\n\n``` xml\n<system.web>\n  <httpCookies requireSSL=\"true\" httpOnlyCookies=\"true\" />\n  <authentication mode=\"Forms\">\n    <forms name=\"at\" requireSSL=\"true\" loginUrl=\"~/v3/Home/Login\" slidingExpiration=\"true\" timeout=\"32\" defaultUrl=\"/v3/app/en/index.html\" path=\"/v3\">\n    </forms>\n  </authentication>\n  <authorization>\n    <deny users=\"?\"/>\n  </authorization>\n</system.web>\n```\n\n### 更改 IIS 配置\n\n运行 `inetmgr` 命令，进入 IIS，选中需要更改的目标站点，点击认证（Authentication），启用匿名认证（Anonymous Authentication）和表单认证（Forms Authentication）,禁用其他认证方式（如 Windows 认证、Basic 认证等等）。\n\n### 更新相关代码\n\n新建/打开 `Views/Home/Login.cshtml` 文件，更新代码如下：\n\n``` html\n@{\n    Layout = null;\n}\n<!DOCTYPE html>\n\n<html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Please login</title>\n    <style>\n        #login-form {\n            width: 16em;\n            margin: 0 auto;\n            padding: 1em;\n            box-shadow: 0 0 0.5em 0.125em gray;\n        }\n\n            #login-form img {\n                width: 4em;\n            }\n\n            #login-form h2 {\n                text-align: center;\n            }\n\n            #login-form fieldset {\n                border: none;\n            }\n\n            #login-form input {\n                width: 100%;\n                box-sizing: border-box;\n                border: none;\n                border-bottom: 1px solid gray;\n                outline: none;\n                font-size: 1.125em;\n            }\n\n                #login-form input[type=submit] {\n                    border: none;\n                    background-color: skyblue;\n                    color: white;\n                    cursor: pointer;\n                    padding: 0.5em;\n                    font-size: 1em;\n                }\n\n            #login-form footer {\n                text-align: center;\n            }\n    </style>\n</head>\n<body>\n    <div id=\"login-form\">\n        <h2>XXXX Platform</h2>\n        @using (Html.BeginForm(\"Login\", \"Home\", FormMethod.Post))\n        {\n            @Html.AntiForgeryToken()\n            <fieldset> Login </fieldset>\n            <p>\n                <input type=\"text\" name=\"username\" placeholder=\"user name\" required maxlength=\"16\" minlength=\"4\" />\n            </p>\n            <p>\n                <input type=\"password\" name=\"password\" placeholder=\"password\" required maxlength=\"32\" minlength=\"10\" />\n            </p>\n            <input type=\"hidden\" name=\"ts\" />\n            <input type=\"submit\" value=\"→ LOGIN\" />\n        }\n        <footer>\n            <p>Copyright &copy; XXXX @(DateTime.Now.Year)</p>\n        </footer>\n    </div>\n    <script>\n        document.forms[0].addEventListener('submit', function () {\n            document.forms[0].ts.value = Date.now();\n        });\n    </script>\n</body>\n</html>\n```\n\n新建/打开 `Controllers/HomeController.cs`，更新代码如下：\n\n``` cs\n    /// <summary>\n    /// default controller\n    /// </summary>\n    public class HomeController : Controller\n    {\n        /// <summary>\n        /// default action for HomeController\n        /// </summary>\n        /// <returns></returns>\n        public ActionResult Index()\n        {\n            ViewBag.Title = \"Home Page\";\n            return View();\n        }\n        /// <summary>\n        /// browse login page\n        /// </summary>\n        /// <returns></returns>\n        [AllowAnonymous]\n        public ActionResult Login()\n        {\n            if (User.Identity != null && User.Identity.IsAuthenticated)\n            {\n                // user already logged in\n                this.clearUserState();\n                // return Redirect(FormsAuthentication.DefaultUrl);\n            }\n            return View();\n        }\n        /// <summary>\n        /// authenticate user with Authorization header\n        /// </summary>\n        /// <returns></returns>\n        [HttpPost,ValidateAntiForgeryToken]\n        public ActionResult Login(LoginFormData form)\n        {\n            // login form validation\n            if (form == null)\n                throw new AuthenticationException(\"empty login form\");\n            if (string.IsNullOrWhiteSpace(form.username))\n                throw new AuthenticationException($\"empty {nameof(form.username)}\");\n            if (string.IsNullOrWhiteSpace(form.password))\n                throw new AuthenticationException($\"empty {nameof(form.password)}\");\n            if (form.ts == 0)\n                throw new AuthenticationException($\"empty {nameof(form.ts)}(timestamp)\");\n            // permit only the characters required and field length necessary \n            if (!System.Text.RegularExpressions.Regex.Match(form.username, @\"^[a-zA-Z0-9\\-\\.]{4,16}$\").Success)\n                throw new AuthenticationException($\"invalid {nameof(form.username)}\");\n            if (!(\n                /* a mimumum of 10 and maximum of 32 characters */\n                /* printable characters, including space */\n                System.Text.RegularExpressions.Regex.Match(form.password, @\"^[\\s!-~]{10,32}$\").Success\n                  /* at least 1 lower case alpha character (A-Z) */\n                  /* at least 1 upper case alpha character (A-Z) */\n                  /* at least 1 numberic character(0-9) */\n                  && System.Text.RegularExpressions.Regex.Match(form.password, @\"^(?=.*[a-z]+)(?=.*[A-Z]+)(?=.*[0-9]+)\").Success\n                ))\n                throw new AuthenticationException($\"invalid {nameof(form.password)}\");\n            // prevent form replay attach\n            long unixTime = ((DateTimeOffset)DateTime.UtcNow).ToUnixTimeSeconds();\n            if (Math.Abs(unixTime - (form.ts) / 1000) > 10)\n                // the timestamp gap between client and server is greater than 10 seconds\n                throw new AuthenticationException(\"NO Form Replay Attach!!!\");\n\n            using (var pCtx = new PrincipalContext(ContextType.Domain, Constants.ADDomain))\n            {\n                // validate credential against AD server\n                bool flag = pCtx.ValidateCredentials(form.username, form.password);\n                if (flag)\n                {\n                    // validate successfully\n                    var ticket = new FormsAuthenticationTicket\n                    (\n                        1,\n                        form.username,\n                        DateTime.Now,\n                        DateTime.Now.AddMinutes(Constants.SessionDurationInMinutes),\n                        Constants.CreatePersistentCookie,\n                        \"salt\",  // user specified data\n                        FormsAuthentication.FormsCookiePath\n                    );\n                    var cookie = new HttpCookie(FormsAuthentication.FormsCookieName, FormsAuthentication.Encrypt(ticket))\n                    {\n                        Secure = true,\n                        HttpOnly = true,\n                        Path = ticket.CookiePath\n                    };\n                    Response.Cookies.Add(cookie);\n                    // save login ticket\n                    // to prevent concurrent logins from same user\n                    Biz.Helper.UACHelper.UserLogin(cookie.Value);\n                    Logger.Info(\"Audit Success\", form.username, this.Request?.UserHostAddress);   // success login audit\n                    return Redirect(FormsAuthentication.DefaultUrl);\n                }\n                else\n                {\n                    // validate failed\n                    Logger.Info(\"Audit Failure\", form.username, this.Request?.UserHostAddress);   // failed login audit\n                    return RedirectToAction(\"Login\");\n                }\n            }\n        }\n        /// <summary>\n        /// logout page\n        /// </summary>\n        /// <returns></returns>\n        [AllowAnonymous]\n        public ActionResult Logout()\n        {\n            this.clearUserState();\n            Logger.Info(\"logout audit\", this.User?.Identity?.Name, this.Request?.UserHostAddress);   // logout audit\n            return View();\n        }\n        private void clearUserState()\n        {\n            FormsAuthentication.SignOut();\n            // clear authentication cookie\n            HttpCookie authTokenCookie = new HttpCookie(FormsAuthentication.FormsCookieName, string.Empty) { Secure = true, HttpOnly = true };\n            authTokenCookie.Expires = DateTime.Now.AddYears(-1);\n            Response.Cookies.Add(authTokenCookie);\n            // clear session\n            Session.Clear();\n            Session.Abandon();\n            //Session.RemoveAll();\n            //HttpContext.User = new System.Security.Principal.GenericPrincipal(new System.Security.Principal.GenericIdentity(string.Empty), null);\n        }\n    }\n```\n\n### 备注\n\n1. 应整改要求，Cookie Path 没有特殊批复，不得设置为根路径(`/`)，故此处的 Cookie Path 设置为 `/v3` (所有页面放置于 `/v3/app` 目录下，API 在 `/v3/api` 路径下)；\n2. 默认开启 Secure 和 HttpOnly 属性，防止 CSRF；\n3. 此处示例代码，表面上启用表单验证，其实后台服务器将用户填写的表单发送至服务器的域服务器（AD Server）验证。各位看官可以根据自身实际情况调整；\n4. 待调整事项：此处 `Login.cshtml` 使用了内联脚本。但如果公司启用了严格 CSP，该内联脚本将会被禁用，可考虑移至外部脚本中。\n\n### 参考链接\n\n- [Implement forms-based authentication in an ASP.NET application by using C#.NET](https://docs.microsoft.com/en-us/troubleshoot/aspnet/forms-based-authentication)\n- [Forms Authentication In ASP.NET](https://www.c-sharpcorner.com/UploadFile/fa9d0d/forms-authentication-in-Asp-Net/)\n","tags":["asp.net","mvc","forms authentication","windows authentication"]},{"title":"SQL Server 中的 GROUP_CONCAT","url":"/2021/02/28/GROUP-CONCAT-in-SQL-Server/","content":"\n在日常数据库编程中，分组，以及将分组中每个元素拼接，是非常常见的操作。MySQL 中只需要使用 [GROUP_CONCAT](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat) 函数即可。而在 SQL Server 中，如果 SQL Server 版本大于等于 2017，则可以使用 [STRING_AGG](https://docs.microsoft.com/en-us/sql/t-sql/functions/string-agg-transact-sql?view=sql-server-ver15) 函数。如果 SQL Server 版本小于 2017 的话，则稍微复杂一点。\n\n遗憾的是，目前（我所接触到的）大多数企业，使用的 SQL Server 都不高于 2017，甚至，有些还在用 SQL Server 2008 R2，甚至是 2000 都有！😟\n\n那么，如果在不支持 `STRING_AGG` 的低版本 SQL Server 中，如何才能把每个分组中的字段拼接起来？一般来说，使用 STUFF FOR XML PATH 语法就可以了。\n\n以下是范例：\n\n``` sql\nSELECT  \n    Categoria,\n    STUFF((\n        SELECT ', ' + B.Descricao \n        FROM dbo.Teste_Group_Concat B \n        WHERE ISNULL(B.Categoria, '') = ISNULL(A.Categoria, '')\n        ORDER BY B.Descricao \n        FOR XML PATH('')), 1, 2, ''\n    ) AS Descricao\nFROM\n    dbo.Teste_Group_Concat A\nGROUP BY \n    Categoria\nORDER BY \n    Categoria\n```\n\n看起来，超级复杂有木有，这是什么怪癖写法，其中几个 Magic Number 先不管，`STUFF` 里跟着一个奇怪的，子查询？感兴趣的可以自行去微软官网自学去。\n\n我这里介绍另一种稍微高阶，但是用起来超级简单的一种用法：[SQL CLR](https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration)。\n\n使用方法如下：\n\n第〇步：启用 SQL CLR（默认禁用）\n\n```sql\nsp_configure 'clr enabled', 1  \nGO  \nRECONFIGURE  \nGO\n```\n第一步：编写 GROUP_CONCAT 程序，参考的是微软官网的 [范例](https://learn.microsoft.com/en-us/sql/relational-databases/clr-integration-database-objects-user-defined-functions/clr-user-defined-aggregate-invoking-functions)。\n第二步：部署至 SQL Server。可选择编译好后，把 dll 文件扔到目标机器上后用 SSMS 完成发布；也可以直接使用 VS 连接到 SQL Server 直接发布，看实际情况和个人喜好。\n第三步：使用。同其他内置函数一样，只不过要写清楚命名空间(namespace)。\n\n更多请参考：[<i class=\"fa fa-github\" aria-hidden=\"true\"></i> ZXS66/mssql_clr_util](https://github.com/ZXS66/mssql_clr_util)\n\n### 参考链接\n\n- [How to make a query with group_concat in sql server](https://stackoverflow.com/questions/17591490/how-to-make-a-query-with-group-concat-in-sql-server)\n- [USE STUFF AND ‘FOR XML PATH’ IN SQL SERVER TO CONCATENATE STRING](https://codemegeek.com/2018/11/17/use-stuff-and-for-xml-path-in-sql-server-to-concatenate-string/)\n- [Introduction to SQL Server CLR Integration](https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration)\n- [CLR User-Defined Aggregate - Invoking Functions](https://learn.microsoft.com/en-us/sql/relational-databases/clr-integration-database-objects-user-defined-functions/clr-user-defined-aggregate-invoking-functions)\n- [SQL Server – Como concatenar linhas agrupando os dados por uma coluna](https://dirceuresende.com/blog/sql-server-como-concatenar-linhas-agrupando-os-dados-por-uma-coluna-grouped-concatenation/)\n\n","tags":["sql server","group_concat","string_agg","stuff for xml path"]},{"title":"如何网页显示臆造汉字","url":"/2021/02/06/zhaocaijinbao/","content":"\n接上一篇文章，本次主要探讨臆造汉字如何书写。使用的技术就是 SVG。\n\n废话少说，直接进入正题：\n\n### 拆字\n\n招财进宝合体字，一般在过新年的时候，大家贴春联的时候会用，寓意嘛，简单明了！\n\n诺，就像下面图片这样：\n\n![zhāocáijìnbăo](/images/zhaocaijinbao/zcjb.jpg)\n\n要拆的话，首先要明白，一般大家写这个字的时候，都是用的繁体字。\n\n第一步：招、進、寶\n第二步：宀(mián)、𤣩(拼音未知)、缶(gāng)、隹(zhuī)、貝、招、辶(chuò)\n\n### 编写 SVG.text \n\n修改 SVG 文件其实就是修改 HTML 文件。同样的 XML 语法，同样的 CSS 样式。仅部分细节不同。此处省略介绍 SVG 的一万字 😄\n\n### 修改 SVG 样式\n\n这就非常考验 CSS 功底了，也是个没底的工作。做的好看的，可以非常好看，阴影啊、艺术字体啊、背景图片啊、边框啊等等，我这里就偷个懒，非常简陋的版本，如下：\n\n![zhāocáijìnbăo](/images/zhaocaijinbao/zcjb.svg)\n\n希望可以抛砖引玉，各位可以在此基础之上尽情发挥。\n","tags":["svg","unicode","臆造汉字"]},{"title":"biáng","url":"/2021/01/31/biang/","content":"\n借着各大综艺节目，陕西关中小吃<img src=\"/images/biang/u30ede@5.svg\" style=\"max-width:1em;display:inline\"/>（biáng）<img src=\"/images/biang/u30ede@5.svg\" style=\"max-width:1em;display:inline\"/>（biáng）面，在大街小巷越来越常见了。\n\n![biáng](/images/biang/biang.jfif)\n\n但是，有一个问题，<img src=\"/images/biang/u30ede@5.svg\" style=\"max-width:1em;display:inline\"/>（biáng）其实是个臆造汉字，并未被*当前广泛使用的* Unicode 收录，导致一般输入法无法输入，一般页面也无法显示。\n\n但其实 2020 年 3 月表意文字小组了解并收录至 [CJK 统一表意汉字 ](https://unicode.org/faq/han_cjk.html) 扩充G区的版块中。字符码为 UTC-00791(繁体) 和 UTC-01312（简体）。\n\nUnicode 码： [u30ede](https://glyphwiki.org/wiki/u30ede) （繁体，日常使用版本）,[u30edd](https://glyphwiki.org/wiki/u30edd) （简体）\n\n更多请点击 [<fa-link/>](http://ftp.unicode.org/Public/UNIDATA/USourceGlyphs.pdf)\n\n所以，如果你的电脑下载了相关的字体扩展/插件，或者更新了最新版的 Unicode 字符集，则可以正常输入和显示这个汉字。\n\n### 扩展\n\n1. 得益于网络的发达（媒体的炒作），还有很多臆造字其实是真的不能正常输入和显示的，比如招财进宝合体字。\n   *2021/2/6更新：[如何网页显示臆造字](/2021/02/06/zhaocaijinbao)*\n\n2. 还有更多的的繁体字/生僻字，有的比<img src=\"/images/biang/u30ede@5.svg\" style=\"max-width:1em;display:inline\"/>（biáng） 字还复杂，但是已被 Unicode 收录，所以可以正常输入和显示，比如龘（dá）。\n\n3. 如果字体不能输入/显示，想要使用，除了上面的 jfif 图片（jpeg 的一种），其实我们平时还可以使用 svg 图片 👇。\n\n![biáng](/images/biang/u30ede@5.svg)\n\n4. 当然，还有很多其他方法可以展示生僻字，如 [icon font](https://www.iconfont.cn/)、[LaTex](https://www.latex-project.org/)、Word/PDF 排版等等，欢迎补充。\n\n### 参考链接\n\n- [汉字编码扩充，终于可以打出这些生僻字了！](https://www.sohu.com/a/379244647_355019)\n- [生僻字-陈柯宇-网易云音乐](https://music.163.com/#/song?id=518781004&market=baiduqk)\n- [u30ede - GlyphWiki](https://glyphwiki.org/wiki/u30ede) （繁体，日常使用版本）\n- [u30edd - GlyphWiki](https://glyphwiki.org/wiki/u30edd) （简体）\n","tags":["unicode","臆造汉字"]},{"title":"离线安装使用 Visual Studio 和 NuGet","url":"/2021/01/15/using-Visual-Studio-and-NuGet-Manager-offline/","content":"\n不知不觉，国外好多软件的安装都采用了在线的方式，比如，Google Chrome、Firefox 等，当然也包括今天我要安装的 Visual Studio。当我们在他们官网上下载的时候，咻的一下就完成了，但其实我们高兴的太早了，它仅仅是下载了一个 web installer，当我们运行这个 web installer 的时候，它其实还是需要联网下载完整包的。\n\n在线安装，有利有弊吧。简单说两点：① 安装大型软件如 Visual Studio 时，可以按需下载了。② 在某些地方（如限制访问互联网的公司局域网），在某些时候（服务器宕机），某些网站（如 Google）可能无法访问，或者访问如龟速，这时候还不如事先下载好然后分发到需要安装的机器上。\n\n目前，我就遇到了需要离线安装 Visual Studio，并且离线安装 NuGet Package 的场景。\n\n### 离线安装 Visual Studio\n\n微软很“贴心”的给出了离线安装的指引[<fa-link/>](https://docs.microsoft.com/en-us/visualstudio/install/create-an-offline-installation-of-visual-studio?view=vs-2019)：\n\n简单来说，有两种方式，图形化（GUI）或者命令行（Command Line)：\n\n##### 图形化下载安装方式\n\n这种方式适用于可联网的主机，在下载完成后，再断开连接完成安装。不过多展开了。\n\n##### 命令行下载安装\n\n这种方式虽然复杂一点，但是灵活，适用于在可联网的主机A下载，然后打包至主机B上安装。\n\n步骤：\n\n1. 下载 web installer。有如下不同版本供您选择：\n   \n    |版本|下载链接|\n    |-----|-----|\n    |Visual Studio Community（免费，下面步骤以此为例）|[vs_community.exe](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=community&rel=16&utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=offline+install&utm_content=download+vs2019)|    \n    |Visual Studio Professional|[vs_professional.exe](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=professional&rel=16&utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=offline+install&utm_content=download+vs2019)|\n    |Visual Studio Enterprise|[vs_enterprise.exe](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=enterprise&rel=16&utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=offline+install&utm_content=download+vs2019)|\n    |Visual Studio Build Tools|[vs_buildtools.exe](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=buildtools&rel=16&utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=offline+install&utm_content=download+vs2019)|\n\n2. 下载本地安装缓存。这一步各位可以按自己的技术栈选择需要下载的模块:\n   \n    |模块|命令行|\n    |-----|-----|\n    |.NET web and .NET desktop development|vs_community.exe --layout c:\\vslayout --add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.NetWeb --add Component.GitHub.VisualStudio --includeOptional --lang en-US|    \n    |.NET desktop and Office development|vs_community.exe --layout c:\\vslayout --add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.Office --includeOptional --lang en-US|\n    |C++ desktop development|vs_community.exe --layout c:\\vslayout --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended --lang en-US|\n    |完整安装包|vs_community.exe --layout c:\\vslayout --lang en-US|\n\n    其中，`c:\\vslayout`为目标缓存文件夹，`--lang en-US` 为指定[安装语言](https://docs.microsoft.com/en-us/visualstudio/install/create-an-offline-installation-of-visual-studio?view=vs-2019#list-of-language-locales)，都可以更改。\n\n3. 拷贝至需要安装的主机（可选）\n   \n4. 本地安装。也是安装需要的模块来安装。以 .NET web and .NET desktop development 为例，运行以下命令来安装：\n   \n    ``` bat\n    c:\\vslayout\\vs_community.exe --noweb --add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.VisualStudio.Workload.NetWeb --add Component.GitHub.VisualStudio --includeOptional\n    ```\n\n   接下来有安装界面了，鼠标点点就搞得定。\n   \n### 离线安装 NuGet Package\n\n在某些情形下，我们需要离线使用 Visual Studio，这个时候，我们就需要实现下载好 NuGet 包，然后上传到指定文件夹中。\n\n##### 下载 NuGet 包\n\n可以选择上 [NuGet 官网](https://www.nuget.org/) 搜索对应的包名然后点击 “Download package” 下载，或者使用 [NuGet Package Explorer](https://github.com/NuGetPackageExplorer/NuGetPackageExplorer)。\n\n##### 指定 NuGet Package Manager 本地安装库 [<fa-link/>](https://social.technet.microsoft.com/wiki/contents/articles/25127.nuget-offline-package.aspx)\n\n打开菜单：Tools --> NuGet Package Manager --> Package Manager Settings，点击 Package Source Tab，点击 + 图标，选择离线安装包所在目录，点击 OK。\n\n##### 参考链接\n\n- [Creating a local NuGet repository for offline development](https://www.codurance.com/publications/2015/05/04/creating-a-local-nuget-repository)\n","tags":["visual studio","nuget","offline"]},{"title":"海贼王素材","url":"/2021/01/04/onepiece-materials/","content":"\n最近，借着1000话，海贼王官方举办了一个全网投票的 [网站](https://onepiecewt100.com/)。为了便于个人日常使用，我把一些素材都 [下载](https://github.com/ZXS66/one-piece) 至本地并备份了。各位看官，如果觉得帮到您了，欢迎星标 ⭐，不胜感激。\n\n郑重声明：仅供个人学习使用，万不可玩火商用！如果您觉得侵犯到您的权益了，请尽快与本人联系，我会第一时间删除。\n","tags":["随笔","one piece","海贼王","素材"]},{"title":"Hexo 站点支持搜索","url":"/2020/12/16/search-within-hexo-site/","content":"\n### 背景\n\nHexo 默认的模板 landscape 对搜索的支持并不友好（也许是我没有领会到精髓😟），一般人选择先做好 SEO，然后把站内搜索直接转发给本地搜索引擎（如Google、百度等）。\n\n本网站严格意义上来讲，并不算是个博客，只是本人随手瞎记录一下平时遇到的问题以及感想，所以，完全没心思去做 SEO 优化，仅作为个人备忘录在用。但是偶尔会遇到自己有印象写过xx知识点，但是又不记得具体在哪里的时候。这时，就需要搜索了。\n\n出发点交代完毕，正文开启：\n\n### 实现思路\n\n实现思路很简单：\n\n##### 安装 `hexo-generator-search`\n\n详细请参考 <i class=\"fa fa-github\" aria-hidden=\"true\"></i> [hexo-generator-search](https://github.com/wzpan/hexo-generator-search)\n   \n``` sh\nnpm install hexo-generator-search --save\n```\n\n##### 配置 `hexo-generator-search`\n\n一般情况下，同样内容的数据，json 文件要比 xml 小，所以，此处我选择 `search.json` 文件。\n\n##### 修改 landscape 模板的页面生成脚本，\n\n打开 `header.ejs` 文件中，找到搜索相关代码，作相应修改。\n\n我的 `header.ejs` 相关代码如下：\n\n```ejs\n      <div id=\"search-form-wrap\">\n        <%- search_form_cn({button: '&#xF002;'}) %>\n        <% if (config.search){ %>\n        <input type=\"hidden\" id=\"search-index-file\" value=\"<%=config.root+config.search.path%>\" />\n        <div id=\"search-form-datalist\">\n        </div>\n        <% } %>\n      </div>\n      <nav id=\"sub-nav\">\n        <% if (theme.rss){ %>\n        <a id=\"nav-rss-link\" class=\"nav-icon\" href=\"<%- url_for(theme.rss) %>\" title=\"<%= __('rss_feed') %>\"></a>\n        <% } %>\n        <a id=\"nav-search-btn\" class=\"nav-icon\" title=\"<%= __('search') %>\"></a>\n      </nav>\n```\n\n##### 修改 `script.js` 脚本\n\n更新逻辑有如下：\n\n1. 初始化 web worker，用于搜索实现（TODO:搜索排序）；\n2. 加载 `search.json` 索引文件；\n3. 监听搜索关键词输入框按键事件（如 `keyup`、`blur`等），当用户输入变更时，搜索索引文件；并根据返回结果渲染页面；\n4. 响应键盘 ↑ ↓ 箭头按钮事件，高亮用户想要查看的内容；响应键盘确定按钮事件，跳转到对应的内容；\n5. 调整 UI，完善 UX。\n\n`script.js` 部分源码如下：\n\n```js\n    // Search\n    const $searchWrap = document.getElementById(\"search-form-wrap\");\n    let isSearchAnim = false;\n    const searchAnimDuration = 200;\n    const startSearchAnim = () => (isSearchAnim = true);\n    const stopSearchAnim = callback =>\n      setTimeout(() => {\n        isSearchAnim = false;\n        callback && callback();\n      }, searchAnimDuration);\n    const showSearchForm = () => {\n      if (isSearchAnim) return;\n      startSearchAnim();\n      $searchWrap.classList.add(\"on\");\n      stopSearchAnim(() =>\n        document.querySelector(\".search-form-input\").focus()\n      );\n    };\n    document\n      .getElementById(\"nav-search-btn\")\n      .addEventListener(\"click\", showSearchForm);\n    const $searchInput = document.querySelector(\".search-form-input\");\n    const $searchDataList = document.getElementById(\"search-form-datalist\");\n    let search_ww;\n    $searchInput.addEventListener(\"keyup\", evt => {\n      const options = Array.from($searchDataList.children);\n      let activeOptIdx = -1;\n      options.some((_, i) => {\n        if (_.classList.contains(\"active\")) {\n          activeOptIdx = i;\n        }\n      });\n      const keyCode = evt.key;\n      if (keyCode === \"Enter\") {\n        // enter button was pressed\n        // redirect to the highlight matched post\n        const theOpt = $searchDataList.querySelector(\".active\");\n        if (theOpt) {\n          window.location.pathname = theOpt.dataset.url;\n        }\n      } else if (keyCode === \"ArrowUp\" || keyCode === \"ArrowDown\") {\n        if (!(options && options.length && activeOptIdx !== -1)) {\n          return; // no matched posts found\n        }\n        if (keyCode === \"ArrowUp\") {\n          // up arrow button was pressed\n          activeOptIdx--;\n          if (activeOptIdx < 0) {\n            activeOptIdx = options.length - 1;\n          }\n        } else {\n          // down arrow button was pressed\n          activeOptIdx = (activeOptIdx + 1) % options.length;\n        }\n        // highlight selected post by set class 'active'\n        options.forEach((_, i) => {\n          if (activeOptIdx === i) {\n            _.classList.add(\"active\");\n          } else {\n            _.classList.remove(\"active\");\n          }\n        });\n        $searchDataList.scrollTo({\n          top: options[activeOptIdx].offsetTop,\n          left: 0,\n          behavior: \"smooth\"\n        });\n      } else {\n        // user is typing search term\n        // TODO: debounce\n        search_ww.postMessage({ action: \"SEARCH\", data: $searchInput.value });\n      }\n    });\n    $searchInput.addEventListener(\"blur\", () => {\n      setTimeout(() => {\n        startSearchAnim();\n        $searchWrap.classList.remove(\"on\");\n        stopSearchAnim();\n      }, 128);\n    });\n    if (window.Worker) {\n      search_ww = new Worker(\"/js/search_ww.js\");\n      search_ww.onmessage = e => {\n        // search result returned\n        const matchedPosts = e.data;\n        $searchDataList.innerHTML = \"\";\n        // render datalist with matched posts\n        if (matchedPosts && matchedPosts.length) {\n          matchedPosts.forEach((_, i) => {\n            const $opt = document.createElement(\"p\");\n            $opt.dataset.url = _.url;\n            const $h = document.createElement(\"h5\");\n            $h.innerHTML = `<a href=\"${_.url}\">${_.title}</a>`;\n            $opt.appendChild($h);\n            const $body = document.createElement(\"div\");\n            $body.innerText = _.content\n              .trim()\n              .replace(/\\n/ig, \" \")\n              .substring(0, 256);\n            $opt.appendChild($body);\n            $searchDataList.appendChild($opt);\n            // highlight the first matched post by default\n            if (i === 0) {\n              $opt.classList.add(\"active\");\n            }\n          });\n        } else {\n          $searchDataList.innerHTML =\n            \"<p>NO post(s) that matched with your input can be found, please try other keywords.</p>\";\n        }\n      };\n      setTimeout(() => {\n        // initial search web work with delay\n        if (document.getElementById(\"search-index-file\")) {\n          const indexFilePath = document.getElementById(\"search-index-file\")\n            .value;\n          search_ww.postMessage({ action: \"INIT\", data: indexFilePath });\n        }\n        // shortcut for showing search form\n        document.body.addEventListener(\"keyup\", evt => {\n          if ([\"E\", \"e\"].includes(evt.key)) {\n            showSearchForm();\n          }\n        });\n      }, 1024);\n    }\n```\n\n`search-ww.js` 源码如下：\n\n```js\n///// web worker for searching post\nlet searchStore = [];\n/** event listener for the web worker */\nonmessage = async e => {\n  let { action, data } = e.data;\n  if (typeof action === \"string\" && action.length) {\n    action = action.toUpperCase().trim();\n    switch (action) {\n      case \"INIT\":\n        // initialization\n        // fetch posts' indexing file\n        const response = await fetch(data);\n        const content = await response.json();\n        searchStore = content || [];\n        break;\n      case \"SEARCH\":\n      case \"QUERY\":\n      default:\n        // perform search with user input keyword\n        let value = (data || \"\").toLowerCase();\n        if (value.length === 0) {\n          return;\n        }\n        // TODO: implement advanced search algorithm\n        // reference: https://stackoverflow.com/questions/5859561/getting-the-closest-string-match\n        const matchedPosts = searchStore\n          .filter(\n            _ =>\n              _.title.toLowerCase().includes(value) ||\n              _.content.toLowerCase().includes(value)\n          )\n          .slice(0, 10);\n        postMessage(matchedPosts);\n        break;\n    }\n  } else {\n    console.log(\"please specify action when invoking search web worker!\");\n  }\n};\n```\n\n具体可查看本博客源码（按 `F12` 快捷键即可）。\n","tags":["hexo","搜索"]},{"title":"Web 应用程序安全提升","url":"/2020/11/28/webapp-security-improvements/","content":"\n最近，应工作需要，将某小型应用整改，目的是将此前仅对内可用的小工具公布到互联网上供外部用户使用。这其中就要经历多重审核、整改、测试、上线。\n\n鉴于细节过多，内容过于繁杂，就不一一列举每个整改步骤了。很多内容在系统设计之初就应当考虑在内，此处仅记录我在完成产品开发后，公司内部安全审核团队要求整改的点。\n\n### Session timeout\n\n前期便于快速原型开发及上线，此应用采用的是 Windows 认证。而一般此类应用不会考虑到 Session timeout 时长。但既然审查出了这个 finding （发现），那就要整改了。\n\n其实也很简单，就是找到 `web.config` 文件，在 `<configuration>.<system.web>` 节点添加/更改子节点 `<sessionState>`，将 `timeout` 时长（单位分钟）设置成你想要的值。\n\n``` xml\n<configuration>\n  <system.web>\n    <sessionState timeout=\"8\"/>\n  </system.web>\n</configuration>\n```\n\n### 删除服务器版本\n\n默认 ASP.NET Web 应用程序的 HTTP 请求的响应头，会夹带 `IIS`、`ASP.NET MVC` 及其版本信息。要想成为健壮的网页应用程序，就必须移除这些信息。以下是要做的改动:\n\n###### web.config 文件\n\n``` xml\n<configuration>\n  <system.web>\n    <httpRuntime enableVersionHeader=\"8\"/>\n  </system.web>\n  <system.webServer>\n    <httpProtocol>\n      <customHeaders>\n        <remove name=\"X-Powered-By\" />\n      </customHeaders>\n    </httpProtocol>\n    <security>\n      <requestFiltering removeServerHeader=\"true\"/>\n    </security>\n  </system.webServer>\n</configuration>\n```\n\n###### Global.asax.cs 文件\n\n``` cs\nnamespace NGL.API\n{\n    public class WebApiApplication : HttpApplication\n    {\n        protected void Application_Start()\n        {\n            // remove asp.net mvc version from response header\n            MvcHandler.DisableMvcResponseHeader = true;\n\n            // AreaRegistration.RegisterAllAreas();\n            // GlobalConfiguration.Configure(WebApiConfig.Register);\n            // FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            // RouteConfig.RegisterRoutes(RouteTable.Routes);\n            // //BundleConfig.RegisterBundles(BundleTable.Bundles);\n\n            // var serializerSettings = GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings;\n            // serializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;\n            // serializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore;\n        }\n    }\n}\n```\n\n\n### Content-Security-Policy (CSP) 响应头\n\n通过声明 `CSP` 响应头，可以有效减少现代浏览器在动态加载资源的时候被 `XSS` （跨站攻击）风险。标准做法是在**服务器端**添加，不过也可以在 `html` 文件中添加 `meta` 头声明。具体请移步至 [官网](https://content-security-policy.com/)。\n\n*有点类似于 [SRI](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) (Subresource Integrity)，使用 CDN 加载第三方脚本/样式时，通过使用 `integrity` 属性声明，降低脚本/样式被篡改的风险。不同的是，`CSP`适用范围更广。*\n\n在 ASP.NET 服务器端，修改 `web.config`：\n\n``` xml\n<configuration>\n  <system.webServer>\n    <httpProtocol>\n      <customHeaders>\n        <!-- CSP -->\n        <add name=\"Content-Security-Policy\" value=\"default-src 'self'; img-src 'self' https://api.tiles.mapbox.com; style-src 'self' 'unsafe-inline'\" />\n      </customHeaders>\n    </httpProtocol>\n  </system.webServer>\n</configuration>\n```\n\n###### 2020/12/8 更新\n\n上文所展示代码中，有一段代码 `'unsafe-inline'`，其实这依然是不安全的做法。严格的 CSP 策略会要求连这个都禁用 [<fa-link/>](https://content-security-policy.com/unsafe-inline/)。\n\n可是，[Angular](https://angular.io) 或者 [Angular-CLI](https://cli.angular.io) 目前不支持自动计算 [hash](https://content-security-policy.com/hash/) 或者 [nonce](https://content-security-policy.com/nonce/) 。这就尴尬了。\n\n要说明的是，Angular 其实是会将全局样式（包括 `styles.css` 和第三方类库的样式表文件）都编译到 `style.xxxxhashxxxx.css` 文件中，这种情况下 `style src 'self'` 是满足需求的，因为该样式文件是通过 `<style>` 标签引入的；问题是1️⃣开发者有时候（图省事）直接给标签的 `style` **属性** 设值或者动态改变其值；2️⃣Angular Component 组件样式是运行时动态插入的（具体可查看下图：1️⃣即是内联样式，2️⃣即是动态插入的样式，一般情况下都不是合法的，只有3️⃣样式表文件中的样式才是合法的）。\n\n![CSP中合法与非法的样式](/images/webapp-security/CSP_styles.png)\n\n这就出问题了，因为 CSP 响应头 [style-src](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src) 即使加上了对应的 SHA 或 nounce 值，`style` 属性（非 style 标签）依旧是被禁止的 [<fa-link/>](https://stackoverflow.com/questions/52724956/why-doesnt-chrome-respect-my-content-security-policy-hashes)。解决方案也很简单：添加对应的 SHA 或 nounce 值到 [style-src-attr](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src-attr) 响应头可解决1️⃣内联样式的问题；避免引用 `style` 属性，改用 `class` 将1️⃣内联样式或者2️⃣动态样式改成3️⃣样式表文件。所以，临时解决办法是，把样式都挪到 `sytles.css` 全局样式表中去。emmm，有一点小膈应，毕竟，所有组件的样式都塞到一个样式表文件中，不好管理，挺糟心的。等之后找到了再更新吧。\n\n从上面 `web.config` 的 CSP 配置中，可以看出，默认浏览器是默认(推荐)禁止 `unsafe-inline` 的 script 和 style。即内联的脚本和样式都是被禁止的。\n\n##### 2021/2/14 更新\n\n网络安全有一系列响应头，除了 `Content-Security-Policy` 之外，还有 `X-Frame-Options`、`Strict-Transport-Security`、`X-XSS-Protection`、`X-Content-Type-Options`、`Referrer-Policy`、`Permissions-Policy` 等。想要查看您的网站还存在哪些问题，可以查看 [此网站](https://securityheaders.com/)。有关各响应头的详情，请查看 [MDN](https://developer.mozilla.org/en-US/)。\n\n以下是 `web.config` 样例：\n\n```xml\n<configuration>\n  <system.webServer>\n    <httpProtocol>\n      <customHeaders>\n        <!-- Protects against Clickjacking attacks. ref.: http://stackoverflow.com/a/22105445/1233379 -->\n        <add name=\"X-Frame-Options\" value=\"SAMEORIGIN\" />\n        <!-- Protects against Clickjacking attacks. ref.: https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet -->\n        <add name=\"Strict-Transport-Security\" value=\"max-age=31536000; includeSubDomains\"/>\n        <!-- Protects against XSS injections. ref.: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/ -->\n        <add name=\"X-XSS-Protection\" value=\"1; mode=block\" />\n        <!-- Protects against MIME-type confusion attack. ref.: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/ -->\n        <add name=\"X-Content-Type-Options\" value=\"nosniff\" />\n        <!-- CSP modern XSS directive-based defence, used since 2014. ref.: http://content-security-policy.com/ -->\n        <add name=\"Content-Security-Policy\" value=\"default-src 'self'; font-src *;img-src * data:; script-src *; style-src *;\" />\n        <!-- Prevents from leaking referrer data over insecure connections. ref.: https://scotthelme.co.uk/a-new-security-header-referrer-policy/ -->\n        <add name=\"Referrer-Policy\" value=\"strict-origin\" />\n        <!-- formerly known as Feature-Policy ref.: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy -->\n        <!-- Permissions-Policy syntax ref.:https://github.com/w3c/webappsec-permissions-policy/blob/main/permissions-policy-explainer.md#appendix-big-changes-since-this-was-called-feature-policy -->\n        <add name=\"Permissions-Policy\" value=\"notifications=(),magnetometer=(),gyroscope=(),fullscreen=(self)\"/>\n      </customHeaders>\n    </httpProtocol>\n  </system.webServer>\n</configuration>\n```\n\n### clientCache 设置 Cache-Control\n\n公司要求禁用 `cache` ？？？\n\n``` xml\n<configuration>\n    <system.webServer>\n        <staticContent>\n            <clientCache cacheControlMode=\"DisableCache\"/>\n        </staticContent>\n    </system.webServer>\n</configuration>\n```\n\n### 产品环境隐藏错误细节\n\n这个简单，改改 `customErrors` 的模式即可。\n\n``` xml\n<configuration>\n  <system.web>\n    <customErrors mode=\"On\"/>\n    <!-- <customErrors mode=\"RemoteOnly\"/> -->\n  </system.web>\n</configuration>\n```\n\n### 连接字符串加密\n\n`web.config` 中连接字符串 (`connection string`) 默认是不加密的。如果启用 Windows 集成认证，那倒问题不大，但是有些情形下，会直接提供 `user id` 和 `password`，一旦泄露，会造成困扰。\n\n对此，建议应用程序本身对连接字符串做简单加密。常见加密解密算法如下（引用 [网上的一张图](/images/webapp-security/algorithms.png)）：\n\n| 序号 | 加密方式   | 是否可解密 | 存在密钥         | 解密后的特征                                                                                        | 备注                                                |\n| ---- | ---------- | ---------- | ---------------- | --------------------------------------------------------------------------------------------------- | --------------------------------------------------- |\n| 1    | BASE64加密 | YES        | 不存在           | 长度是3的倍数，只含有65种字符，大写的A至Z，小写的a至z，数字到9，以及3种符号+/=，=最多两个，且在末尾 | 只要知道加密类型是BASE64，可通过BASE64解密程序解密  |\n| 2    | 异或加密   | YES        | 存在             |                                                                                                     | 需要知道异或的值，再次异或该值，可得到加密前的value |\n| 3    | MD5加密    | NO         |                  | 32位或者16位                                                                                        |                                                     |\n| 4    | SHA128加密 | NO         |                  |                                                                                                     |\n| 5    | SHA1加密   | NO         |                  |                                                                                                     |\n| 6    | AES加密    |            | 需要密钥解密     |                                                                                                     |\n| 7    | RSA加密    |            | 公钥加密私钥解密 |                                                                                                     |\n\n###### BASE64\n\n这个算法其实就是简单地把人类能读懂的语言文字变成 ASCII 编码。这样处理之后，人类是很难读懂了，但是机器读懂它简直不能太 easy。所以，一般这个算法不会单独用来加密，但是可以用来混淆内容。\n\n###### MD5\n\nemmm，严格来说，这个不算是加密算法，它只是信息摘要算法，就是把一大堆的内容转换成一串 ASCII 编码，同时这个算法有以下两个特点：\n\n1. 相同内容的正文，肯定能输出相同的 ASCII 编码；\n2. 只要内容稍加不同，输出的 ASCII 编码完全不一样。\n\n这个算法（目前）是不可解密，所以不存在密钥一说。常用于校验我们从网上下载下来的文件是否被人恶意修改或植入病毒。在当前场景不适用。\n\n###### SHA \n\nMD5 的升级版。\n\n###### AES 对称加密\n\n加密和解密使用同一套密码，\n\n###### RSA 非对称加密\n\nemmm，当今互联网社会的基石啊，多少人都在使用 `RSA` 当作公司 `VPN` 连接的双重身份认证凭证。加密的密钥（公钥）和解密的密钥（私钥）不一样，使用公钥加密的信息可以在互联网上传播，因为没有私钥解密的话此信息就算是天书吧。\n\n结合当前场景（加密连接字符串），我们还用不上 `AES`、`RSA`，同时我们也不能单纯使用 `BASE64` 和 `MD5`/`SHA`，前者过于简单，后者不可逆（加密完我自己都读不懂，要你何用？）。\n\n那，可不可以结合着使用？\n\n以下是我个人在用的示例代码，仅供参考：\n\n``` cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\npublic class Program\n{\n    public static void Main()\n    {\n        string connectionStringName = \"Vanilla\";\n        /// remember to update the connection string value below\n        string connectionStringValue = \"Data Source=xxx.xxx.xxx.xxx;Initial Catalog=Project_Vanilla;user id=yyyy;password=zzzz\";\n        string secret = EncryptConnectionString(connectionStringName, connectionStringValue);\n        Console.WriteLine(secret);\n    }\n    private static string EncryptConnectionString(string name, string connectionString)\n    {\n        if (string.IsNullOrWhiteSpace(name))\n            throw new ArgumentNullException(nameof(name));\n        if (string.IsNullOrWhiteSpace(connectionString)) \n            throw new ArgumentNullException(nameof(connectionString));\n        if (!connectionString.Contains('=')) \n            throw new ArgumentException(nameof(connectionString));\n\n        connectionString = string.Join(string.Empty, connectionString.Reverse());\n        int location = connectionString.IndexOf('=') / 2;\n        string hash = GetCustomHash(name);\n        string content = connectionString.Substring(0, location) +hash +connectionString.Substring(location);\n        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(content);\n        return System.Convert.ToBase64String(bytes);\n    }\n    private static string GetCustomHash(string content)\n    {\n        if (string.IsNullOrWhiteSpace(content))\n            return string.Empty;\n        using(MD5 provider = MD5.Create())\n        {\n            string SALT = \"NewGreenLife\";\n            byte[] bytes = Encoding.UTF8.GetBytes(content+SALT);\n            byte[] hashBytes = provider.ComputeHash(bytes);\n            return BitConverter.ToString(hashBytes).Replace(\"-\", string.Empty);\n        }\n    }\n    private static string DecryptConnectionString(string name, string secret)\n    {\n        if (string.IsNullOrWhiteSpace(name))\n            throw new ArgumentNullException(nameof(name));\n        if (string.IsNullOrEmpty(secret)) \n            throw new ArgumentNullException(nameof(secret));\n        byte[] bytes = System.Convert.FromBase64String(secret);\n        string base64Content = System.Text.Encoding.UTF8.GetString(bytes);\n        string hash = GetCustomHash(name);\n        if (!base64Content.Contains(hash))\n            throw new ArgumentOutOfRangeException(nameof(secret));\n        int location = base64Content.IndexOf(hash);\n        string rawContent = base64Content.Substring(0, location) + base64Content.Substring(location + hash.Length);\n        return string.Join(string.Empty, rawContent.Reverse());\n    }\n}\n```\n\n###### 使用 aspnet_regiis 加密\n\n*2020/12/16 更新*\n\n更推荐的做法（加密 connection string）是，使用 aspnet_regiis 命令行，将本机的 web.config 中对应节点加密。更多技术细节请参考 [官网介绍](https://docs.microsoft.com/en-ca/previous-versions/aspnet/zhhddkxy(v=vs.100))，这里就说其特点和使用方法：\n\n特点：加密后的文件对人不可读，对其他机器也不可解密，.Net Framework 会自动运行时解密。\n\n使用方法(先找到 `aspnet_regiis.exe` 所在文件夹位置，一般在 `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319` )：\n\n1. 加密: `ASPNET_REGIIS -pef \"connectionStrings\" \"D:\\inetpub\\wwwroot\\applicationFolder\"`\n\n2. 解密：`ASPNET_REGIIS -pdf \"connectionStrings\" \"D:\\inetpub\\wwwroot\\applicationFolder\"`\n\n### 表单校验\n\n表单校验，不仅仅是前端的事。好的系统，会在 API 层面，甚至数据库层面都会加上用户输入验证。验证要点包括但不限于：\n\n1. 是否输入非法字符\n2. 输入字符长度是否合法（最短、最长）\n3. 特别地，密码是否符合公司密码复杂度要求\n4. 特殊字符是否转译（防止 SQL 注入、XSS、CSRF）\n\n前三项可能会根据业务，稍有不同，但基本大同小异，此处就不过多展开了。\n\n##### 防止 SQL 注入\n\n[ScottGu](https://weblogs.asp.net/scottgu/Tip_2F00_Trick_3A00_-Guard-Against-SQL-Injection-Attacks) 早在十多年前就教大家如何防止 SQL 注入了，我搬一下砖：\n\n1. 不要拼接动态 SQL 语句，使用更加类型安全的参数编码机制，如 `ADO.NET` 中的 [SqlParameter](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlparameter?view=dotnet-plat-ext-5.0)；\n2. 在部署到产品环境之前，始终坚持安全审查，每次更新时都坚持走正式的安全流程审核所有代码；\n3. 从不存储明文的敏感数据在数据库；\n4. 确保你编写了自动单元测试，显式的验证了你的数据访问层和应用程序能够很好防御 SQL 注入攻击；\n5. 锁定你的数据库，仅授权网页应用程序访问它是功能所需的最小权限集。\n\n##### 防止 XSS 攻击\n\n`ASP.NET` 中防止 `XSS` 有一套内置的办法：[AntiXssEncoder](https://docs.microsoft.com/en-us/dotnet/api/system.web.security.antixss.antixssencoder?view=netframework-4.8)。\n\n1. 修改 `web.config`，启用 AntiXssEncoder:\n   ```xml\n   <httpRuntime encoderType=\"System.Web.Security.AntiXss.AntiXssEncoder\" />  \n   ```\n2. 编码所有用户输入/潜在 `XSS` 攻击的参数：\n   ```cs\n   user_comment = System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(user_comment, true);\n   ```\n3. 解码上一步编码的数据（以下代码仅展示 `Angular` 中如何解码，实际也可采用纯 `js`/`React`/`Vue` 等其它方式）：\n   ```ts\n  import { Pipe, PipeTransform } from '@angular/core';\n\n  /** Used to map HTML entities to characters. */\n  const htmlUnescapes = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#39;': '\\''\n  };\n\n  /** Used to match HTML entities and HTML characters. */\n  const reEscapedHtml = /&(?:amp|lt|gt|quot|#(0+)?39);/g;\n  const reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n  /** unescape HTML entities */\n  @Pipe({ name: 'unescape' })\n  export class UnescapePipe implements PipeTransform {\n      transform(value: any, args?: any): any {\n          // solution 1 (may ignore \"<script>\")\n          // const doc = new DOMParser().parseFromString(value, 'text/html');\n          // return doc.documentElement.textContent;\n          // solution 2 (not working for HTML entities like &amp;)\n          // return value.replace(/&#(\\d+);/g, (match, dec) => {\n          //     return String.fromCharCode(dec);\n          // });\n          // solution 3 (enhanced version for solution 2)\n          // reference: https://github.com/lodash/lodash/blob/2f79053d7bc7c9c9561a30dda202b3dcd2b72b90/unescape.js\n          const escapedHtml = (value && reHasEscapedHtml.test(value))\n              ? value.replace(reEscapedHtml, (entity) => (htmlUnescapes[entity] || '\\''))\n              : (value || '');\n          return escapedHtml.replace(/&#(\\d+);/g, (match, dec) => {\n              return String.fromCharCode(dec);\n          });\n      }\n  }\n   ```\n##### 防止 CSRF 攻击\n\nASP.NET 中防止 CSRF 攻击很简单，前端页面 (.cshtml) 中添加 `@Html.AntiForgeryToken()`，后台 Controller 代码中，在相应的 Action 加上 \\[ValidateAntiForgeryToken\\] 即可。\n\n### 参考链接\n\n- [常见的加密解密算法](https://www.cnblogs.com/qianjinyan/p/10418750.html)\n- [谷歌CSP工程化实践导读](https://mp.weixin.qq.com/s/YOpb8x-3Lp_WomRu-p1dIw)\n- [Locking Down Your Website Scripts with CSP, Hashes, Nonces and Report URI](https://www.troyhunt.com/locking-down-your-website-scripts-with-csp-hashes-nonces-and-report-uri/)\n- [Connection string encryption and decryption](https://techcommunity.microsoft.com/t5/iis-support-blog/connection-string-encryption-and-decryption/ba-p/830094)\n- [Preventing Cross-site scripting (XSS) attacks in Angular and React](https://alex-klaus.com/protecting-angular-from-xss-attacks-with-csp/)\n- [Cross Site Scripting, JavaScript Injection, Contextual Output Encoding](https://privacy.ellak.gr/wp-content/uploads/sites/9/2015/12/XSS_-_5.pdf)\n","tags":["asp.net","mvc","web","security","csp","content-security-policy","cache-control"]},{"title":"C# 动态类型","url":"/2020/11/17/CSharp-dynamic-type/","content":"\n以前大家常说，虽说 `C#` 是强类型的静态编程语言，数据类型都在编译的时候已经确定了，不支持运行时更改数据类型（像 `JS` 或者 `Python` 那样）。但是在某些特定场景，开发者就是希望 `C#` 支持动态类型，怎么办。比如以下场景：\n\n1. 数据由数据库中的 `JSON` 字符串反序列化得出，但反序列化后数据的属性不定；\n2. 某个方法的某个参数，它可以是类型A，也可以是类型B（类似于 `C++` 或者 `TypeScript` 中的 [Union](https://en.cppreference.com/w/cpp/language/union) 类型），但是我不想因为这个简单的场景，去定义一个父类或者接口。\n\n针对于此，自 `C# 4.0` (`.Net 4.5`) 开始即推出了 `dynamic` 类型。`dynamic` 类型的变量，在编译的时候不会类型检查，所以运行时可以更改数据类型（就像 `JS` 或者 `Python` 那样）。大部分场景，`dynamic` 类型变量，就像 `object` 类型变量一样，可以使用 `ToString()` 等方法，并且可以使用 `GetType` 方法获取运行时当前变量的实际数据类型。\n\n即便有如此便利的工具，我个人还是不建议大家频繁使用这个关键字。就像 `TypeScript` 不推荐大家使用 `any` 关键字一样。能够解决问题，但不是最佳实践。\n\n## 与 object 类型的区别\n\n`C#` 中所有类型都直接或间接继承于 `Object` 类型，原始数据类型（`int`、`float` 等等）也不例外！我们可以把任意类型定义为 `object` 类型，比如 `object i = 666;`。这里面涉及装箱和拆箱的问题，此处就不展开了。但是使用 `dynamic` 就不涉及装拆箱操作，看起来更丝滑，更像是一个动态类型编程语言了。\n\n## 与 var 声明的变量区别\n\n与大多数现代编程语言一样，`C#` 支持使用 `var` 声明变量，自带类型推断。表面上看，`var` 也是可以声明任意类型的变量，但是 `dynamic` 类型和 `var` 的变量完全不一样。\n\n##### 动态类型和静态类型\n\n`var` 关键字虽然可以存储任意类型的变量，但是其类型一旦确定（在**编译**的时候，**推断**得出）**不可变更**。`dynamic` 的类型则是**运行时**由编译器得出。声明为类型1之后仍可重新赋值为类型2，**可变更**。\n\n##### `var` 需要初始化，~~`dynamic` 不用~~\n\n保持一个简单的想法在脑子里，`C#` 的 `var` 只是一个语法糖，我们可以在写代码时候偷懒，不必书写完整的类型名称，编译器会在编译的时候替我们自动补全，但是毕竟 `C#` 是一门强类型的编程语言，数据类型在编译的时候必须指定。所以，类似于 `JS` 或者 `Python` 中 `var temp;` 或者 `var temp = null;` 这样书写风格的语句，是会报错的。\n\n~~`dynamic temp;` 这样的书写风格倒是没毛病，但是个人不建议。~~\n\n##### `dynamic` 类型变量可以作为函数参数或者函数返回值，`var` 不可以\n\n原因和上面一点一样。`var` 仅仅是语法糖，实际上是有数据类型的，由编译器编译时推断得出。如果 `var` 作为函数的参数/返回值类型，他从何推断？？一切少了右半部分赋值操作的 `var` 使用方法都是错误的。\n\n使用 `dynamic` 就没有这些烦恼。\n\n##### `var` 只能在方法体内使用，不能用作类实例的属性。\n\n↑ 原因同上。\n\n## 与 Anonymous Type （匿名类型） 变量区别\n\n`Anonymous` 类型（匿名类型）的变量，一般都是结合 `var` 使用得出的。 `Anonymous` 类型的变量，其实也是一种类型的，只不过对于开发者不可见（开发者也不用知道其类型），编译器及 IDE 都会自动推断出来 `Anonymous` 类型变量的各个属性。详细参见下图：\n\n![Anonymous type, source](/images/csharp-dynamic-type/anonymous-type.png)\n\n![Anonymous type, compiled assembly](/images/csharp-dynamic-type/anonymous-type-2.png)\n\n我的理解是这样的，`Anonymous` 类型是一种泛型，类似于元组 `Tuple`，不同的是，你不需要书写 `Tuple` 或者 `Anonymous` 这样的关键字。[<fa-link/>](https://docs.microsoft.com/en-us/dotnet/standard/base-types/choosing-between-anonymous-and-tuple)\n\n其实，更常见的场景是，我们在用 `LINQ` 的时候会用到 `Anonymous` 类型 [<fa-link/>](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/features-that-support-linq#anonymous-types)。\n\n## 引用链接\n\n- [Using type dynamic (C# Programming Guide)](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/using-type-dynamic)\n- [Dynamic Data Type In C#](https://www.c-sharpcorner.com/UploadFile/f0b2ed/dynamic-data-type-in-C-Sharp/)\n- [Dynamic Type in C#](https://thedotnetguide.com/dynamic-type-in-csharp)\n- [Anonymous Types in C#](https://thedotnetguide.com/anonymous-types-in-csharp/)\n","tags":["csharp","dynamic","anonymous type","var"]},{"title":"JS 中如何取消任务","url":"/2020/11/05/cancelling-tasks-in-JS/","content":"\n在前端编程过程中，虽然很少发生，但确实会遇到，需要取消此前的任务。一般这些任务是耗时任务，比如网络请求、`setTimeout` 或动画等等。而这些不同的场景分别都有不同的解决方案。\n\n## XMLHttpRequest\n\n就是传统的 ajax 请求，要取消非常简单，直接调用 [abort](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort) 方法即可，炒鸡简单，完全木有兼容性问题，这里就不赘述了。\n\n## Promise\n\n[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) 是早在 ES6 中就推出的方案，很早之前就被各大浏览器实现的，兼容性也 [挺好的](https://caniuse.com/promises) (IE：？？？)。但是，自 Promise 推出之日，就有两个备受诟病的点，其中一个就是无法取消任务。*另一个点是无法监听最新状态（类似于 [XMLHttpRequest: progress](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/progress_event) 事件)*\n\n基本上现在很多的前端项目都用到 Promise，毕竟真的很好用。但是没有取消功能，有时候真的很让人捉急。W3C 规范一时半会儿是不会支持此功能了，难道只能这样，坐以待毙？作为一枚爱瞎折腾的前端开发，当然会说 “不” 。\n\n[Stackoverflow](https://stackoverflow.com/questions/30233302/promise-is-it-possible-to-force-cancel-a-promise) 上有一个问答已经很好的回答了大部分用户的疑惑了。简单来说，① 是的，Promise 不支持取消功能 ② 但你可以使用第三方类库比如 [bluebird](https://github.com/petkaantonov/bluebird) ③ 手动传入取消 token ④ 利用 [Promise.race](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race) 方法\n\n##### 第三方类库\n\nemmm，我就是想要取消一个 Promise 任务（停止执行 then 方法），为什么要我引入第三方库，而且还要对以前的代码大改？！anyway，第三方存在即合理，我就不去纠结引入第三方库的利弊了。各位如果感兴趣，请移步至其官网或各大搜索引擎。\n\n##### 手动传入取消 token\n\n这个稍微有点复杂，就是自己处理取消逻辑。拿 XMLHttpRequest 举例：\n\n``` js\nfunction getWithCancel(url, token) { // the token is for cancellation\n   var xhr = new XMLHttpRequest;\n   xhr.open(\"GET\", url);\n   return new Promise(function(resolve, reject) {\n      xhr.onload = function() { resolve(xhr.responseText); });\n      token.cancel = function() {  // SPECIFY CANCELLATION\n          xhr.abort(); // abort request\n          reject(new Error(\"Cancelled\")); // reject the promise\n      };\n      xhr.onerror = reject;\n   });\n};\n \n/////// sample: cancel a promise \nvar token = {};\nvar promise = getWithCancel(\"/someUrl\", token);\n// later we want to abort the promise:\ntoken.cancel();\n```\n\n简单来说，就是在返回 `Promise` 实例之前，返回一个 `token`，其自带 `cancel` 方法供之后使用。\n\n不过我个人觉得使用起来还是很麻烦，可以优化：\n\n``` js\nfunction getWithCancel(url) {\n    const xhr = new XMLHttpRequest;\n    xhr.open(\"GET\", url);\n    let cancel = ()=>{};\n    const p = new Promise(function(resolve, reject) {\n        xhr.onload = function() { resolve(xhr.responseText); });\n        cancel = function() {  // SPECIFY CANCELLATION\n            xhr.abort(); // abort request\n            reject(new Error(\"Cancelled\")); // reject the promise\n        };\n        xhr.onerror = reject;\n    });\n    return [p, cancel];\n};\n/////// sample: normal request\nvar [req1] = getWithCancel(\"/someUrl\");\n/////// sample: cancel a promise \nvar [req2, cancel2] = getWithCancel(\"/someUrl\");\n// later we want to abort the promise:\ncancel2();\n```\n\n##### 利用 Promise.race 方法\n\n没用过这个方法的，可以参考 MDN 上的 [这个范例](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race) 快速上手。\n\n```js\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, 'one');\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, 'two');\n});\n\nPromise.race([promise1, promise2]).then((value) => {\n  console.log(value);\n  // Both resolve, but promise2 is faster\n});\n// expected output: \"two\"\n```\n\n通过名字即可看出，这个方法返回一个 `Promise` 实例，只要传入的一堆 promise 其中任何一个被 resolve 或者被 reject 了，该实例相应的立马被 resolve 或者 reject。\n\n那怎么用 `Promise.race` 来实现取消功能？请参考以下代码：\n\n```js\nconst myTask = new Promise((resolve,reject)=>{\n    // use setTimeout to simulate a time-cost task\n    setTimeout(resolve, 1024, 'fulfilled');\n});\nlet cancel = ()=>{};//empty function\nconst cancelTask = new Promise(resolve=>cancel=resolve)\nconst testcase = Promise.race([cancelTask, myTask]);\ntestcase.then((result)=>{\n    console.log(result); // just for test, print the result\n    if (result !== 'cancelled'){\n        // my business logic code here\n    }\n});\n// cancel later\nsetTimeout(cancel,512,'cancelled');\n```\n*↑ 为了更好理解，上述有一些不太好编码风格。大家可以在真正需要使用取消功能之前稍加优化一下，这里我就偷个懒了 😛*\n\n其实是上一种方法的变种，需要手动传入取消 token。有一个小限制就是，如果在运行 `testcase` 之前，已经订阅了 `myTask`（调用 .then 方法），那其实在取消（调用 `cancel` 方法）之后，该订阅者还是会被通知的。所以，应该订阅 `testcase` 而非 `myTask`。\n\n##### 改写 `Promise.prototype.cancel`  ❌不推荐\n\n其实还有一个更简单又很好用的办法，就是直接更改 `Promise` 原型，添加 `Promise.prototype.cancel` 方法，这样以前代码也不用变，还附赠了 `cancel` 方法。但是个人不推荐，因为，是侵入性的，太粗鲁了。不过我相信萝卜白菜，各有所爱，总有人好这一口。既然这样，大家自行实现去吧。 😄\n\n当然，你也可以使用 [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) 或者对 `promise` 实例 [Object.defineProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) 而不是改写 `Prototype` 来减少侵入性。 👍\n\n## fetch\n\n`fetch` 是比 `Promise` 还要新的 API，现代浏览器基本上都有实现（IE：？？？），它返回的就是一个 `Promise` 实例。所以上一章节的方案也适用于 `fetch`。\n\n可能是呼声太大了，fetch 其实还提供了额外的取消方式，请参考一下代码：\n\n``` js\n// abort in 1 second\nlet controller = new AbortController();\nsetTimeout(() => controller.abort(), 1000);\n\ntry {\n  let response = await fetch('/article/fetch-abort/demo/hang', {\n    signal: controller.signal\n  });\n} catch(err) {\n  if (err.name == 'AbortError') { // handle abort()\n    alert(\"Aborted!\");\n  } else {\n    throw err;\n  }\n}\n```\n\n简单理解，**此方案取消发送该网络请求并模拟 `reject` 一个 `AbortError` 实例**（执行 `then:onrejected`、`catch`、`finally`，但不执行`then:onfulfilled`）。\n\n![source](/images/cancelling-tasks-in-JS/F12.source.2.png)\n![console](/images/cancelling-tasks-in-JS/F12.console.2.png)\n![network](/images/cancelling-tasks-in-JS/F12.network.2.png)\n\n*更多请查看 [此文档](https://javascript.info/fetch-abort)*\n\n代码不长，就是先初始化一个 [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) 实例，在调用 `fetch` 方法的时候，将此实例的 `signal` 属性也传进去。在之后，如果想要取消了，直接调用该实例的 [abort](https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort) 方法。emmm，还挺香的嘛~\n\n基本上支持 Promise 的现代浏览器，也都支持 [AbortController](https://www.caniuse.com/abortcontroller)。\n\n## rxjs Subscription\n\n在我平时的工作中，接触 [Angular](https://angular.cn) 比较多，`Angular` 默认依赖 [rxjs](https://rxjs.dev)。[HttpClient](https://angular.cn/api/common/http/HttpClient)（用于网络请求）的 `get` 或 `post` 方法返回值是 `rxjs` 中的 [Observable](https://rxjs.dev/guide/observable)。 如果此 `Observable` 未被订阅，那该请求就不会被发送出去；如果此 `Observable` 已被订阅（调用 `subscribe` 方法，返回值为 `Subscription` 类型），想要取消，很简单，直接调用 [unsubscribe](http://reactivex.io/rxjs/class/es6/Subscription.js~Subscription.html#instance-method-unsubscribe) 方法即可。值得注意的是，此方法不仅可以终止订阅时定义的成功返回的方法，也会 **终止发生错误的方法** (当然，第三个参数 `complete` 方法也会一并终止执行)，还同时回取消网络请求，一步到位！\n\n![source](/images/cancelling-tasks-in-JS/F12.source.png)\n![console](/images/cancelling-tasks-in-JS/F12.console.png)\n![network](/images/cancelling-tasks-in-JS/F12.network.png)\n\n## 参考链接\n\n- [XMLHttpRequest.abort()](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort)\n- <i class=\"fa fa-stack-overflow\" aria-hidden=\"true\"></i> [Promise - is it possible to force cancel a promise](https://stackoverflow.com/questions/30233302/promise-is-it-possible-to-force-cancel-a-promise)\n- [Promise.race()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n- [AbortController.abort()](https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort)\n","tags":["javascript","promise","fetch","xmlhttprequest","rxjs","abort","cancel"]},{"title":"ASP.NET 应用国际化","url":"/2020/10/28/ASP-NET-i18n-get-started/","content":"\n一般规模稍大，或者受众同时有国内、国外用户的项目，都要考虑提供中英文两个版本，即国际化（Internationalization），简称 i18n。\n\n之前写过 [Angular i18n](/2020/07/01/Angular-internationalization/) 相关的文章，今天记录一下 ASP.NET 中如何 i18n。\n\n正片开始！\n\n*(此处省略创建项目过程)*\n\n## 一、添加资源文件\n\n在添加资源文件之前，新建一个文件夹（可选），命名 `Resources` 或者 `Locales` 等等。\n\n先添加一个英文的资源文件，取名 `Resources.resx`。请注意，记得将 `访问修饰符`（`Access Modifier`）修改成 `公开`（`Public`）！\n\n再添加一个中文的资源文件，取名 `Resources.zh.resx`。\n\n添加若干测试字符串:\n\n![Resources.zh.resx](/images/asp-net-i18n/Resources.zh.resx.png)\n\n## 二、在前端页面 (*.cshtml) 中引用资源字符串\n\n在编辑 .cshtml 页面之前，可以找到 `~/Views/web.config`，添加资源的命名空间，这样之后每次引用资源字符串就不必写全路径了。\n\n``` xml\n<?xml version=\"1.0\"?>\n<configuration>\n  <!-- ... -->\n  <system.web.webPages.razor>\n    <host factoryType=\"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.7.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" />\n    <pages pageBaseType=\"System.Web.Mvc.WebViewPage\">\n      <namespaces>\n        <add namespace=\"System.Web.Mvc\" />\n        <add namespace=\"System.Web.Mvc.Ajax\" />\n        <add namespace=\"System.Web.Mvc.Html\" />\n        <add namespace=\"System.Web.Optimization\"/>\n        <add namespace=\"System.Web.Routing\" />\n        <add namespace=\"Your.Project\" />\n        <add namespace=\"Your.Project.Resources\"/>\n      </namespaces>\n    </pages>\n  </system.web.webPages.razor>\n  <!-- ... -->\n</configuration>\n```\n\n打开需要引用资源字符串的文件，使用 `@Resources.xxxx` 获取要动态引用的字符串。\n\n``` cshtml\n✔️\n@Resources.i18n\n@Resources.test\n\n✔️\n@ViewBag.l10n\n@Resources.test\n```\n\n## 三、在后台代码 (*.cs) 中引用资源字符串\n\n后台代码直接引用：\n\n``` cs\npublic ActionResult Index()\n{\n    ViewBag.Title = Resources.Resources.home;\n    ViewBag.l10n = Resources.Resources.l10n;\n    return View();\n}\n```\n\n## 四、设置当前线程的语言\n\n首先，设置 ASP.NET MVC 的路由（可选）。打开 `RouteConfig.cs` 文件：\n\n``` cs\npublic class RouteConfig\n{\n    public static void RegisterRoutes(RouteCollection routes)\n    {\n        routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n        //routes.MapMvcAttributeRoutes();\n        routes.MapRoute(\n            name: \"Default\",\n            url: \"{culture}/{controller}/{action}/{id}\",\n            defaults: new { culture = \"en\", controller = \"Home\", action = \"Index\", id = UrlParameter.Optional }\n        );\n    }\n}\n```\n\n然后，添加 MVC 的父 Controller：\n\n``` cs\npublic class CISBaseController : Controller\n{\n    protected bool isChineseCulture\n    {\n        get; private set;\n    }\n    private static readonly IEnumerable<string> ChineseCultures = new List<string>() { \"zh\", \"zh-han\", \"zh-hans\" };\n    \n    public ActionResult RedirectToDefaultLocalized()\n    {\n        return RedirectPermanent(\"/en\");\n    }\n\n    protected override void OnActionExecuting(ActionExecutingContext filterContext)\n    {\n        // Grab the culture route parameter\n        string culture = filterContext.RouteData.Values[\"culture\"]?.ToString();\n        // Set the action parameter just in case we didn't get one\n        // from the route.\n        filterContext.ActionParameters[\"culture\"] = culture;\n        // update this.isChineseCulture\n        this.isChineseCulture = ChineseCultures.Contains(culture.ToLower());\n        var cultureInfo = CultureInfo.GetCultureInfo(culture);\n        Thread.CurrentThread.CurrentCulture = cultureInfo;\n        Thread.CurrentThread.CurrentUICulture = cultureInfo;\n        // Because we've overwritten the ActionParameters, we\n        // make sure we provide the override to the \n        // base implementation.\n        base.OnActionExecuting(filterContext);\n    }\n}\n```\n\n## 五、测试\n\nVisual Studio 直接开启调试：\n\n（默认英文路由）：\n\n![index.en](/images/asp-net-i18n/index.en.png)\n\n切换到中文路由：\n\n![index.zh](/images/asp-net-i18n/index.zh.png)\n\n✔️ 完美！\n\n## 参考链接\n\n- [Getting Started With ASP.NET MVC i18n](https://phrase.com/blog/posts/getting-started-with-asp-net-mvc-i18n/)\n- [CultureInfo Class](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo?view=netframework-4.7)\n","tags":["asp.net","mvc","get started","i18n"]},{"title":"SQL Server 数据透视表","url":"/2020/10/20/SQL-Server-Pivot-Tables/","content":"\n## 背景\n\n在搜索 [STRING_AGG](https://docs.microsoft.com/en-us/sql/t-sql/functions/string-agg-transact-sql?view=sql-server-ver15) 方法（同 MySQL 中的 [GROUP_CONCAT](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat)）在低版本 SQL Server 中实现的时候，无意中想到，之前好像有用过 pivot table (数据透视表)，用来拼接字符串？？年代久远，记忆模糊了，没办法，又得学习一遍。为加深印象，还是记一下笔记吧。\n\n## TLDR，太长不看版\n\n数据透视表就是 **把数据表转置，行变列，或者列变行**。\n\n## pivot 范例\n\n脚本如下：\n\n``` sql\nUSE AdventureWorks2014;  \nGO  \nSELECT VendorID, [250] AS Emp1, [251] AS Emp2, [256] AS Emp3, [257] AS Emp4, [260] AS Emp5  \nFROM   \n(SELECT PurchaseOrderID, EmployeeID, VendorID FROM Purchasing.PurchaseOrderHeader) p  \nPIVOT  \n(COUNT (PurchaseOrderID) FOR EmployeeID IN  ([250], [251], [256], [257], [260])) AS pvt  \nORDER BY pvt.VendorID;\n```\n\n输出结果如下：\n\n|VendorID    |    Emp1    |    Emp2    |    Emp3    |    Emp4    |    Emp5    |\n|------------|------------|------------|------------|------------|------------|\n|1492        |     2      |       5      |     4      |     4      |     4    |\n|1494        |     2      |       5      |     4      |     5      |     4    |\n|1496        |     2      |       4      |     4      |     5      |     5    |\n|1498        |     2      |       5      |     4      |     4      |     4    |\n|1500        |     3      |       4      |     4      |     5      |     4    |\n\n## unpivot 范例\n\n脚本如下：\n\n```sql\n-- Create the table and insert values as portrayed in the previous example.  \nCREATE TABLE pvt (\n    VendorID INT, \n    Emp1 INT, \n    Emp2 INT,  \n    Emp3 INT, \n    Emp4 INT, \n    Emp5 INT\n);  \nGO  \nINSERT INTO pvt VALUES (1,4,3,5,4,4);  \nINSERT INTO pvt VALUES (2,4,1,5,5,5);  \nINSERT INTO pvt VALUES (3,4,3,5,4,4);  \nINSERT INTO pvt VALUES (4,4,2,5,5,4);  \nINSERT INTO pvt VALUES (5,5,1,5,5,5);  \nGO  \n-- Unpivot the table.  \nSELECT VendorID, Employee, Orders  \nFROM   \n(SELECT VendorID, Emp1, Emp2, Emp3, Emp4, Emp5  FROM pvt) p  \nUNPIVOT  \n(Orders FOR Employee IN (Emp1, Emp2, Emp3, Emp4, Emp5))AS unpvt;  \nGO\n```\n\n输出结果如下：\n\n|VendorID  |  Employee  |  Orders|\n|-----------|-----------|--------|\n|1      |      Emp1    |   4|\n|1      |      Emp2    |   3|\n|1      |      Emp3    |   5|\n|1      |      Emp4    |   4|\n|1      |      Emp5    |   4|\n|2      |      Emp1    |   4|\n|2      |      Emp2    |   1|\n|2      |      Emp3    |   5|\n|2      |      Emp4    |   5|\n|2      |      Emp5    |   5|\n|...  |...  |...  |\n\n## 附录1：STRING_AGG polyfill\n\n虽然 [STRING_AGG](https://docs.microsoft.com/en-us/sql/t-sql/functions/string-agg-transact-sql?view=sql-server-ver15) 方法只在 SQL Server 2017 及之后版本可用，但在此之前的版本，则可以通过运行以下代码创建自定义方法：\n\n``` sql\n-- coming soon\n```\n\n## 附录2：STRING_SPLIT polyfill\n\n[STRING_SPLIT](https://docs.microsoft.com/en-us/sql/t-sql/functions/string-split-transact-sql?view=sql-server-ver15) 方法只在 SQL Server 2016 及之后版本可用，在此之前的版本，则可通过运行以下代码创建自定义方法：\n\n``` sql\nCREATE FUNCTION [dbo].[fx_STRING_SPLIT](\n\t@SourceString NVARCHAR(MAX)\n\t,@Seperator VARCHAR(25)=','\n)\nRETURNS @ResultTable TABLE(\n\t[Position] INT IDENTITY(1,1),\n\t[Value] NVARCHAR(MAX)\n)\nAS\n/**************************************************************\n* Author: Beaulin @ www.MyTecBits.com\n* Description: Function to split the delimited text and\n* returns teh result in table format\n**************************************************************/\nBEGIN\nDECLARE @w_xml xml;\n\nSET @w_xml = N'<root><i>' + replace(@SourceString, @Seperator,'</i><i>') + '</i></root>';\n\nINSERT INTO @ResultTable\n([Value])\nSELECT \n\t[i].value('.', 'NVARCHAR(MAX)') AS Value \nFROM \n@w_xml.nodes('//root/i') AS [Items]([i]);\nRETURN;\nEND;\n\nGO\n```\n\n## 参考链接\n\n- [FROM - Using PIVOT and UNPIVOT](https://docs.microsoft.com/en-us/sql/t-sql/queries/from-using-pivot-and-unpivot?view=sql-server-ver15)\n","tags":["随笔","sql","sql server","pivot table"]},{"title":"React Hooks 学习笔记","url":"/2020/10/10/react-hooks/","content":"\n## 背景\n\n刚看到一篇文章，2019年最值得学习的前端技能，里面给了 React Hooks 很大一部分介绍，不禁引起我的好奇，决定稍微深入了解一下，虽然我平时用 Angular 比较多。 🙂\n\n## TLDR，太长不看版\n\n其实这就是*面向对象编程* 和*函数式编程* 在前端编程的碰撞。\n\n![ReactJS Function Component VS Class Component](https://www.wangbase.com/blogimg/asset/202009/bg2020091407.jpg)\n\n以前类组件的编写方式是面向对象编程，而用 Hooks 是函数式编程。给个例子就能很好理解了：\n\n![Function Component and Class Component](https://www.wangbase.com/blogimg/asset/202009/bg2020091320.jpg)\n\n## 为什么会有 React Hooks，动机是什么？\n\n官方的解释：\n\n##### 类组件不能很好重用状态逻辑代码\n\n使用 Hooks 则可以在不改变组件层次地前提下很好地重用状态逻辑，因为状态逻辑已经从组件中抽离出来了。\n\n##### 复杂组件变得越来越难以理解（维护）\n\n其实 React JS 以前的代码我也不喜欢，即使它使用了 JSX。因为感觉把所有东西都揉在一起了，这和以前 JSP，ASP.NET 不是差不多嘛。是时代在倒退吗？我喜欢模板（HTML）、样式（CSS）、逻辑（JS）分的清清楚楚的，就像 Angular 那样。我的确是个老顽固，但是我在用 Angular 之前，也用了 [mustache](https://github.com/mustache/mustache) 和 scss，感觉都挺好的。\n\n使用 Hooks 就逼迫我们把组件拆分成更小的方法了，模板和逻辑可以不用像以前那样，严重依赖于组件的生命周期。\n\n##### 程序员和机器并不能更好理解类\n\nemmm，前端等了这么多年，终于有了 class （虽然只是个语法糖），前端开发千辛万苦学会了面向对象，你现在说，不要面向对象？好吧，你说的都对，我继续学还不行吗！\n\n不过也的确是这样，机器里才没有类的概念，函数倒是基本上每个编程语言都有。使用函数（Hooks）可以让我们更贴近机器，也就能更好的利用 React 的特性。\n\n## 我的理解\n\n看起来挺好的，确实值得一学。毕竟，朝着我喜欢的方向在走（模板、样式、逻辑分清）。\n\n## 参考链接\n\n- [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html)\n- [轻松学会 React 钩子：以 useEffect() 为例](http://www.ruanyifeng.com/blog/2020/09/react-hooks-useeffect-tutorial.html)\n- [ReactJS | useState Hook](https://www.geeksforgeeks.org/reactjs-usestate-hook/)\n- ~~[带你快速了解React Hooks](https://mp.weixin.qq.com/s?__biz=MzU0OTExNzYwNg==&mid=2247486638&idx=1&sn=6168cd4c6ebd46bb7626d5e1acac199a&chksm=fbb58767ccc20e71c147abd5816d85c85addfe9bb7f7ae531b3be6874e82bbf3aeff10b3151f&mpshare=1&scene=1&srcid=1030zRXiWBapn8lTHy7okyV4&sharer_sharetime=1604039376391&sharer_shareid=fc704ae6aea43f30cbec7d9e541d4beb&exportkey=A9iZHUit3MmzB9UtwIFqMKE%3D&pass_ticket=tzMbsF%2FeUkmqmIp8swkg9KboR45uJ3wADbDOUq8VTpvz9SXqBf7n2B5O3xo%2Fhbg6&wx_header=0#rd)~~\n- [带你快速了解React Hooks](https://mp.weixin.qq.com/s/FQzSFwx3wWqwLCeQZ1eAEA)\n","tags":["随笔","javascript","react","hooks"]},{"title":"译：从代码中发帖至 WordPress.com","url":"/2020/10/01/translate-POSTING-TO-WORDPRESS-COM-IN-CODE/","content":"\n各位中秋&国庆节日快乐~\n\n[Jon Skeet](https://codeblog.jonskeet.uk) 大神更新博客啦！作为 C# 专家、Stackoverflow 排名第一的神一样的人物，自然是订阅的啦。正好放假，闲来无事，不如把这篇文章翻译一下，正好加深理解。 🙂\n\n声明：如果各位英文够用，请移步[原文](https://codeblog.jonskeet.uk/2020/08/29/1793/)，本文仅仅是随笔，英文捉急的朋友可自由食用。\n\n正文开始：\n\n-----\n\n## 历史\n\n我从 2005 年开始写博客，也就是在我打算参加唯一的 [MVP 大会](https://mvp.microsoft.com/en-us/Summit) (Microsoft Most Valuble Professional Summit) 前不久。彼时，我把博客托管在 msmvps.com，那还是个很大的事情。\n\n2014 年，我迁移到 wordpress.com 了，期望这会让事情变得美好、简单：它是个专注于博客托管的服务，因此我不应担心写作之外的事情。 事情没有这么简单。\n\n我不记得我是什么时候开始使用 Markdown 来书写博客来取代使用 Windows Live Writer 创建 HTML，但是这绝对是我更喜欢的书写方式。我可以把它 *（译者：Markdown）* 的格式用到任何地方，它让发布代码变得更简单…它就是正确的格式（对于我而言）。\n\n我在 wordpresscom 遇到的几乎所有问题都可以分为两类：\n\n- WordPress 的 Markdown 并未按照我期望的方式运行。\n- wordpress.com 的编辑器对 Markdown 用户不友好。\n\n第一类，有两个问题。第一，我对于代码以外的换行感到烦恼。我喜欢书写段落的时候包括换行，这样文本可以可以基本上维持 80 - 100 字符每行。不幸的是，WordPress 和 GitHub 都将这种段落格式转换成多个短行，而不是一整个段落。我不知道为什么做这个决定，格式化成这样的，我可以看到 *一些* 场景下这样的处理确实有益处（比如“添加一个单词”的变动仅仅显示这一个变动，而不是所有当前段落的改动）。尽管如此，我还是不喜欢这个决定。\n\n第二个令人烦恼的是代码中的尖括号（使用代码栅栏 &#96;&#96;&#96; 或反引号 &#96;）在 WordPress 中表现不可预期，以一种我不记得在其他哪个地方见过的方式。最常见的不得不更新文章的原因是我需要去修复一些 C# 代码中的泛型，摆弄 Markdown 以转义括号。最近这些天，我可能会试着记录这点，这样的话将来发表文章的时候可以正确使用它。总而言之，这肯定会让人很挫败。\n\n我并不期望能够解决所有的问题，我也许可以通过某些形式的预处理来处理这些文章，但我担心只有非 *（尖括号）* 包围的段落而非代码块才能够变得这么快。没关系，我可以和这些问题共存。\n\n第二种烦恼，在 wordpress.com 上编辑，正式本篇所要讲的大部分内容。\n\n我严重怀疑大部分博主想要一个合理的所见即所得（`WYSIWYG`, What you see is what you get）体验，并且他们肯定不想以未格式化的原始格式（通常是 HTML，但对于我而言是 Markdown）看他们的博客。我记得很久之前，wordpress.com 的编辑器有两种模式：图形的和文本的。在某些情况下，图形编辑器可以转换 Markdown 为 HTML，进而显示在文本编辑器中…它只需要保留纯文本。我的习惯是保留一份文章备份的文本（最开始是在 [StackEdit](https://stackedit.io/) 但现在是在 [GitHub](https://github.com)），然后当我想要编辑东西的时候，复制全部到 WordPress 中。这样我不需要关心 WordPress 如何工作的。\n\n然而，现在 wordpress.com 让这个工作流更加复杂了，他们切换到一个“块”编辑器，以一种简易的界面方式，且你只能通过管理员界面才能得到这个文本编辑器。\n\n我觉得这真的是够了。如果我本地拿到这边文章的时候是以文本形式（然后存在 GitHub 上），完全没有必要去 wordpress.com 界面上去做除了评论之外的任何其他事情。是时候破解他们的 API 了。\n\n## 什么是无 .NET 包？\n\nWordPress 是一个非常通用的博客平台，让我们接受它。我完全不奇怪它有一个 REST API 允许你去发表文章（我之前使用 StackEdit 多年的事实就是一个很好的证明）。我也不奇怪它使用 OAuth2 来认证，判定 OAuth 的异常。\n\n我好奇的是，我不能找到任何 .NET 包来写一个控制台应用程序来调用仅包含极简代码的 API。我甚至不能找到任何简单的适用于控制台应用程序而非 web 应用程序的 OAuth 库。 [RestSharp](https://restsharp.dev/) 看起来像他承诺的那样，就像他的首页所说：“支持 Basic, OAuth 1, OAuth 2, JWT, NTLM”，但是 [这篇认证文档](https://restsharp.dev/usage/authenticators.html) 仅能够做有限的事情。看他们的源码，它除了启动一个本地的 web 服务器以接收 OAuth 代码，然后用于交换完整的认证令牌之外，并未做任何其它的事情（我知道并不多的 OAuth 2，但是足够我在查看一些库源码的时候明白缺少了什么）。[WordPressPCL](看起来)也像他承诺的那样，但是依赖 JWT 认证插件，我不想仅仅是为了安装一个简单的插件从 wordpress.com 个人账户升级商业账户（我知道它可能还有其他的好处，但……）。\n\n因此，我有如下选项：\n\n- 升级到商业账户，安装 JWT 插件，然后尝试使用 WordPressPCL\n- 完全远离 wordpress.com，自行运行 WordPress（或者找另一个类 wordpress.com 站点，我猜）并让 JWT 插件可用，然后再使用 WordPressPCL\n- 自行实现 OAuth2\n\n## 自托管 WordPress\n\n我很乐意自己运行 WordPress。我有一个 [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine) 群，用来托管 [nodatetime.org](https://nodatime.org/) 和其他的站点。我到现在才看明白，在 Kubernetes 群中安装 WordPress 会非常简单。有一个 [Bitnami Helm Chart](https://bitnami.com/stacks/helm) 正好合适，因此我决定试一试。\n\n首先我必须安装 Helm，我听说过它，但从未使用过。我第一次尝试使用 shell 脚本，失败了……但用 Chocolatey，安装成功。\n\n安装 WordPress 轻而易举，直到它出错，因为我的 Kubernetes 群没有足够的可用资源。它是个很小的群，当然，它并不用于商业，是我个人掏钱付的，因此我尝试保持花销相对较低。显然它太低了。\n\n我调查了一下我大概需要花费多少来提高我的 Kubernetes 群的能力以自主运行 WordPress，最后我得出结论，这个比我开一个 wordpress.com 商业账户还要贵（甚至在我运维这个站点之前），我决定停止继续往前。\n\n## 实现 OAuth2\n\n最后，我不应该这么害怕自行实现 OAuth2。它并没有那么坏，特别是当我需要一个新的 token 时我喜欢通过一些手动步骤来实现，而不是全自动。\n\n首先我必须在 wordpress.com 上创建一个“应用”。这个仅仅是一个注册，为了拿到用于 OAuth 的 `client_secret`、`client_id` 和批准的重定向 URI。我知道我正在本地运行服务，因此我允许 http://127.0.0.1:8080/auth 作为重定向 URI，并相应的创建此应用。\n\n基本流程如下：\n\n- 启动本地 web 服务器，接收来自 WordPress 服务器的重定向响应\n- 在浏览器中访问一个精心构建的 URL\n- 在浏览器中授权访问\n- WordPress 响应并重定向到本地服务器，包含一个 `code`\n- 本地服务器发起另一个 HTTP 请求到 WordPress 服务器，以交换 `code` 获取 `token`\n- 本地服务器显示此 `token` 这样我可以复制粘贴到其他地方使用\n\n当然，在一个正常的应用中，用户从不需要看见 `token`，这所有的一切都发生在背后。然而，在我最终的“调用 WordPress API 创建或更新文章的控制台应用程序”中执行此操作，比起复制、粘贴并硬编码 token 更加麻烦。这个代码安全吗，它是否被偷窃过？当然没有。我能接受这个风险吗？当然！\n\n因此，最简单的方式是在一个独立的应用中启动 HTTP 服务器（我不需要它和其他东西集成）？你当然可以创建一个新的空 ASP.NET Core 应用，找到合适的地方处理请求…但我个人更喜欢使用 [.NET Functions 框架](https://github.com/GoogleCloudPlatform/functions-framework-dotnet)。作为框架的作者，我显然存在偏见，但我很高兴看到在实际工作中使用它是如此简单。解决方案非常简单，使用 `dotnet new gcf-http` 命令创建一个单 C# 文件和项目文件。这个 C# 文件包含一个类（`Function`）和一个函数 （`HandleAsync`），总共 50 行代码。\n\n提醒你，它仍需要花费超过一小时以获取可正常创建 WordPress 文章的 token。是因为表单 URL 编码太复杂吗？不，尽管我的调查使我朝这个方向前进。是因为发出请求时需要对 token 进行 base64 编码吗？不是的，尽管 *（我的）* 很多尝试也是在这条路上。\n\n我犯了两个错误：\n\n- 在我的 *交换 code 以换取 token 的服务器* 上，我在交换请求时，我把 `redirect_uri` 填写成 “http://127.0.0.1/auth” 而不是 “http://127.0.0.1:8080/auth”\n- 在 *测试 token 的应用* 中，我在 `AuthenticationHeaderValue` 中指定 schema 为 “Basic” 而不是 “Bearer” \n\n基本上全是拼写错误。难以置信的沮丧，但我确实在这里犯错了。\n\n我有一个有趣的想法，现在我不是有一个 Function 可以做 OAuth 吗，那为什么我不将之部署成一个真的 Google Cloud Function 呢，这样我可以随时通过访问一个 URL 获取 `token` 而不需要本地运行任何程序。我只需要一点点的配置，当然 ASP.NET Core 已经让这一点做起来很容易了，不需要我们来做。\n\n## 发表文章至 WordPress\n\n当前，我有一个可以创建 WordPress 文章（以 Markdown 格式，这点非常重要）的测试应用，它也可以更新文章。\n\n下一步是想办法找到我将来发表博客的工作流。考虑到我把博客的资源存储在 GitHub 上，我也许可以通过一个 GitHub 行为来触发代码，但我不确定这是不是一个行之有效的工作流。现在，我要“当我要创建/更新文章时显式运行一个应用”。\n\n现在更新一个文章必须要知道文章 ID，这个我可以通过 WordPress 界面获取，但我也可以在最初创建文章的时候获取。但我需要一个存储它的地方，我可以为这些文章创建一个单独的元数据文件（metadata），但这个听起来像事情往复杂的方向发展的感觉。\n\n取而代之，我目前的解决方案是在文章正文开始添加一点元数据头，这样应用可以读取它并做相应的处理。它也可以在 wordpress.com 上创建文章之后更新成文章 ID。这样也避免我在命令行中不得不指定比如标题这样的信息。在我写这篇文章的时候，这篇文章的元数据头如下：\n\n```\ntitle: Posting to wordpress.com in code\ncategories: C#, General\n---\n```\n\n在我第一次运行我的应用之后，我预计这篇文章将会变成这样：\n\n```\npostId: 12345\ntitle: Posting to wordpress.com in code\ncategories: C#, General\n---\n```\n\n下次我让它去处理这个文件的时候，因为有 `postId` 值的存在，它将触发我的应用去“更新”而不是去“创建”。\n\n这样就行了吗？几分钟之后见分晓。这段代码并未真正运行过。是的，我可以为它编写一些测试。但我就不，我并不打算编写测试。我觉得它很容易通过一些尝试和错误就能看出问题所在（它并不是特别复杂的代码）。\n\n## 结论\n\n如果你看到这篇文章，我已经用这个新的流程来发表我的博客了。我绝对不会手动创建这篇文章——如果这个代码不行的话，我是绝对不会让你看到的。\n\n这个流程是其他人想要的吗？可能是，也可能不是。我并未打算开源它。但它是一个很好的范例，通过不大的努力来排解烦恼……我可以享受使用自己的 Function 框架并付诸行动，这对于我来说是个奖励。\n\n该发布了！\n","tags":["随笔","c#","translate","wordpress","blog"]},{"title":"微信小程序入门","url":"/2020/09/11/get-started-with-WeChat-mini-program/","content":"\n还记得很多年前，那时候没有微信小程序，只有微信公众号（订阅号/服务号/企业号）。彼时，个人想要注册一个公众号，各种门槛，各种收费。作为一个本不富裕的铮铮男儿，为了省 **￥300/年** 的认证费，毅然决然的去学习其他的技术，并妄下断言：这种对大众开发者不友好的技术，注定走不长久！\n\n糊涂啊，少年！！后来的现实，疯狂打脸这位少年，并将这位少年的脸按在地上疯狂摩擦。\n\n唉，往事如风，不堪回首！\n\n然后，有一天，这位少年突然有一个想法：将现有的网页应用迁移至微信小程序究竟有多难？\n\n容不得多想，说干就干！\n\n*此处省略各种注册、配置环节* （网上有很多入门教程，微信官方也有，炒鸡简单）\n\n如今注册环节简明了很多，注册个人小程序的话，还剩了认证费用。开心。\n\n从一个 `Hello, World` 开始：\n\n打开微信开发者工具，扫码登陆，新建小程序项目。\n\n工具默认会添加一些示例代码，大家可按需增加/删除代码。此处我只是把简单的踩的坑罗列一下，已提供给各位少侠发现美的眼睛。\n\n### table 组件\n\n微信小程序默认支持的组件有限，但是 `table` 在日常 web 开发，特别是办公场景中，使用的超级广泛。网上也有很多的第三方插件，都不太满意。虽说众多前端页面优化文章都推荐说尽量减少 `table` 的使用，以减少重绘及重排导致的性能开销，但是图表可是办公类应用使用最广泛的控件类型之一。\n\n考虑到微信小程序的 `wxss` 其实就是 `css`（除了多了 `rpx` 这一个单位），所以，其实可以将小程序中的 `view` (同 `div`) 设置成 `display:table`。\n\n### 发布\n\n微信开发者工具集成发布功能，一键点击即可发布。此处不过多赘述了。\n\n### 2020.10.29 更新\n\n哈哈，阮一峰终于也 [染指微信小程序](http://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html) 了，大家快去观摩啊~ 😄\n\n### 参考链接\n\n1. [微信官方文档·小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)\n2. [教程|《小程序开发指南》](https://developers.weixin.qq.com/ebook?action=get_post_info&docid=0008aeea9a8978ab0086a685851c0a&pass_ticket=X5FAAzGjV66sjEQ5vheOV8ZXQBv0LFA5jBNu9mm48OC3JJsyPNTBhka1%2FWfj%2BZ6Y)\n","tags":["get started","wechat","mini program"]},{"title":"javascript 剪切板","url":"/2020/09/07/javascript-clipboard-API/","content":"\n在页面上启用剪切板，一直是一个常见而又头疼的问题。我说的是自定义需要复制/剪切的内容。\n\n以前，有如下几种解决方案：\n\n1. 如果需要复制的内容来自页面上已有标签（`input`、`textarea`等），先调用该标签的 `.select()` 选中文本，然后调用 `document.execCommand('copy')` 复制至剪切板；\n2. 如果需要复制的内容不来自页面上已有标签（比如拼接字符串），可以先创建一个 `input` 或 `textarea`，赋值需要复制的内容，append 到页面上，调用 `document.execCommand('copy')` 复制至剪切板，再从页面上 remove；\n3. 把需要复制的内容，使用 `window.prompt` 弹出来，再提示用户按 `Ctrl` + `C`；\n4. 使用第三方插件，具体内部原理因插件不同而不同。大概 4、5 年前依稀记得有一款插件还需要依赖 `Flash`？？？现在与时俱进了，有一款不依赖 `Flash` 和其他 framework 的插件 [clipboard.js](https://clipboardjs.com/)；\n\n不过如果仅仅是自定义需要复制内容的话，完全没必要引入第三方库。有了 Clipboard 的新 API，使用剪切板将变得炒鸡方便啦。\n\n先看一下目前（2020/9/7）的[兼容性](https://caniuse.com/?search=clipboard)。\n\n*(仅看最重要的 [writeText](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText) 的情况)*\n\n![`writeText` 的兼容性](/images/javascript-clipboard-API/writeText%20compatibility.PNG)\n\n嗯，还行，82.33% 啦。如果不需要其他 API（readText、监听 ClipboardEvent 等），不考虑 IE 用户的话，足够了！\n\n说干就干。那就从本博客的源代码复制开始着手吧。\n\nHexo 的默认主题 landscape 不支持源代码复制功能，那就手撸一个吧。\n\n先更改 `themes/landscape/source/js/script.js`，在末尾处添加如下代码：\n\n``` js\n  // append copy icon to each source code section\n  if (navigator.clipboard) {\n    const className_shining = \"shining\";\n    const copySourceCode = async () => {\n      const $elem = event.currentTarget;\n      const sourceCode = $elem.parentElement.querySelector(\".code\").innerText;\n      await navigator.clipboard.writeText(sourceCode);\n      const $msg = $elem.querySelector(\"span\");\n      // const duration = $msg.style.animationDuration;\n      const duration = 512; // 512ms\n      $elem.classList.add(className_shining); // add the class to trigger the animation\n      // swap the innerText during the animation\n      setTimeout(() => {\n        $msg.innerText = $msg.dataset.afterMsg;\n      }, duration / 2);\n      // resume\n      setTimeout(() => {\n        // https://css-tricks.com/restart-css-animation/\n        $elem.classList.remove(className_shining);\n        void $elem.offsetWidth; // trigger reflow\n        $elem.classList.add(className_shining);\n        setTimeout(() => {\n          $msg.innerText = $msg.dataset.beforeMsg;\n        }, duration / 2);\n        setTimeout(() => {\n          $elem.classList.remove(className_shining);\n        }, duration);\n      }, duration * 4);\n    };\n    Array.from(\n      document.querySelectorAll(\".article-entry figure.highlight\")\n    ).forEach($fig => {\n      const $fa = document.createElement(\"i\");\n      $fa.classList.add(\"copy\");\n      $fa.classList.add(\"fa\");\n      $fa.classList.add(\"fa-files-o\");\n      const beforeMsg = `👈 tap this icon to copy the code snippet`;\n      const afterMsg = `copied`;\n      const $msg = document.createElement(\"span\");\n      $msg.classList.add(\"msg\");\n      $msg.innerText = beforeMsg;\n      $msg.dataset.beforeMsg = beforeMsg;\n      $msg.dataset.afterMsg = afterMsg;\n      const $row = document.createElement(\"div\");\n      $row.classList.add(\"source-clipboard\");\n      $row.appendChild($fa);\n      $row.appendChild($msg);\n      $row.addEventListener(\"click\", copySourceCode);\n      $fig.appendChild($row);\n    });\n  }\n```\n\n更改 `themes/landscape/source/css/_partial/article.styl`，设置样式:\n\n``` styl\nfigure\n  &.highlight\n    .source-clipboard\n      margin-top: 0.5em\n      border-top: 1px solid gray\n      padding-top: 0.5em\n      .msg\n        display: inline-block\n        padding: 0 0.5em\n        opacity: 1\n      &.shining\n        .msg\n          animation-name: shining \n          animation-duration: 0.512s\n          animation-iteration-count: 1\n          animation-timing-function: ease-in-out\n          animation-fill-mode: forwards\n          animation-direction: alternative\n\n@keyframes shining{\n  0% { opacity: 1;}\n  50% { opacity: 0;}\n  100% { opacity: 1;}\n}\n```\n\n使用了点 CSS 3 animation 新特性。🙂\n\n## 友情提醒\n\nThe clipboard-write permission is granted automatically to pages when they are in the active tab. The clipboard-read permission must be requested, which you can do by trying to read data from the clipboard.\n\n## 展示\n\n![copy source code demo](/images/javascript-clipboard-API/demo.gif)\n\n## 参考链接\n\n- [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API)\n- [Interact with the clipboard](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard)\n- [How do I copy to the clipboard in JavaScript?](https://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript)\n","tags":["javascript","clipboard"]},{"title":"ASP.NET 极简缓存及日志","url":"/2020/09/06/tiny-caching-and-logging-in-ASP-NET/","content":"\n声明：本文仅仅是我的个人工作回顾，各位看官不必深抠字眼。本人一贯主张点到为止、够用就行，省下来的时间留给自己多去钻研自己感兴趣的东西。😄\n\n开篇闲聊：缓存和日志，是软件从原型走向产品必经之路。前者能显著提升性能，后者则是快速定位问题及后期用户数据挖掘的基础。二者都是传统软件项目的基础中间件，往复杂了写，能够写出非常庞大的企业级软件（如 [Redis](https://redis.io) 和 [Logstash](https://www.elastic.co/logstash)），但也可以非常简单，简单到百行代码即可搞定日常大部分应用场景。\n\n考虑到我即将要下手的这个**项目体量够小**，且公司/部门没有现成的基础中间件，想要安装第三方的缓存/日志软件又**极其麻烦且不保证审核通过**，所以打算手撸一个。\n\n本文目录：\n\n- [缓存](#缓存)\n- [日志](#日志)\n- [ASP.NET应用](#aspnet应用)\n- [参考链接](#参考链接)\n\n## 缓存\n\n提到缓存，小团队的选择，[Memcached](https://www.memcached.org/) 还是 [Redis](https://redis.io/)？稍大一点的团队可以直接购买阿里云或其他云平台的相关产品，省时省力有保证。大型企业基本上都有自己的中间件了。\n\n前面说到，我打算自己造轮子，采用的是 C# 自带的 [System.Runtime.Caching.MemoryCache](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.caching.memorycache)。Web 和非 Web 应用都可以使用。好处是基于内存（和目标应用公用一个 app pool 或进程），支持任意数据类型，避免同目标应用间的网络通信，支持简单的过期策略；坏处就是无法与其他因应用共享数据，无法启动自恢复（随着 app pool 或进程的终止而清空），数据量大了还会影响目标应用的性能。\n\nLinus Torvalds 大神说过：\n\n> Talk is cheap, show me ~~the fucking~~ code.\n\n``` csharp\nusing System;\nusing System.Runtime.Caching;\n\nnamespace ProjX.Common.Caching\n{\n    /// <summary>\n    /// super lite version of caching\n    /// </summary>\n    public static class LiteCache\n    {\n        /// <summary>\n        /// default eviction and expiration details for a specific cache entry\n        /// </summary>\n        private static readonly CacheItemPolicy policy = new CacheItemPolicy()\n        {\n            //AbsoluteExpiration = DateTime.Now.AddHours(4),\n            SlidingExpiration = TimeSpan.FromHours(4)\n        };\n        /// <summary>\n        /// caching storage\n        /// </summary>\n        private static MemoryCache _store\n        {\n            get\n            {\n                return MemoryCache.Default;\n            }\n        }\n        /// <summary>\n        /// get the cache item by key\n        /// </summary>\n        /// <typeparam name=\"T\"></typeparam>\n        /// <param name=\"key\"></param>\n        /// <returns></returns>\n        public static T Get<T>(string key) where T : class\n        {\n            return _store.Get(key) as T;\n        }\n        /// <summary>\n        /// set value by key, nothing changed if value is null\n        /// </summary>\n        /// <param name=\"key\"></param>\n        /// <param name=\"value\"></param>\n        public static void Set(string key, object value)\n        {\n            if (value == null) return;\n            _store.Set(key, value, policy);\n        }\n        /// <summary>\n        /// remove cache entry by key\n        /// </summary>\n        /// <param name=\"key\"></param>\n        /// <returns>If the entry is found in the cache, the removed cache entry; otherwise, null.</returns>\n        public static object Remove(string key)\n        {\n            return _store.Remove(key);\n        }\n        public static void RemoveAll()\n        {\n            // flush all\n            foreach (var entry in _store)\n                _store.Remove(entry.Key);\n        }\n    }\n}\n```\n\n这样简单封装之后就可以使用了。\n\n这个缓存也可以在 web.config 或 app.config 中配置的，详细请参考[此文档](https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/add-element-for-namedcaches)。\n\n使用方法过于简单，这里就不贴代码了。\n\n## 日志\n\n说起日志，以前我使用的是 [Log4Net](https://logging.apache.org/log4net/)，但是我嫌弃配置麻烦，本打算尝试 [NLog](https://nlog-project.org/)、[Serilog](https://serilog.net) 或者 [Microsoft.Extensions.Logging](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-3.1) 其中一个的，但是都要安装第三方依赖包，就暂时打消了这个念头，\n\n上菜！\n\n``` csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.Linq;\nusing System.Threading;\n\nnamespace ProjX.Common.Logging\n{\n    /// <summary>\n    /// represents a EventLog record\n    /// </summary>\n    public struct EventLog\n    {\n        public int ID { get; set; }\n        /// <summary>\n        /// log levels: Debug, Info, Error\n        /// </summary>\n        public string Level { get; set; }\n        /// <summary>\n        /// predefined code for the response\n        /// </summary>\n        public string EventCode { get; set; }\n        /// <summary>\n        /// when the event occurred\n        /// </summary>\n        public DateTime EventTime { get; set; }\n        /// <summary>\n        /// form data for investigation\n        /// </summary>\n        public string EventData { get; set; }\n        /// <summary>\n        /// who trigger the event\n        /// </summary>\n        public string User { get; set; }\n        /// <summary>\n        /// execution callstack of the event\n        /// </summary>\n        public string Callstack { get; set; }\n        /// <summary>\n        /// detail message when error occurred\n        /// </summary>\n        public string ErrorMessage { get; set; }\n    }\n    /// <summary>\n    /// represents the Level of the log\n    /// </summary>\n    public static class LogLevel\n    {\n        public static readonly string Debug = \"Debug\";\n        public static readonly string Info = \"Info\";\n        public static readonly string Error = \"Error\";\n    }\n    public static class Logger\n    {\n        public static void Debug(EventLog log)\n        {\n            Log(log, LogLevel.Debug);\n        }\n        public static void Info(object eventData, string user, long duration = 0)\n        {\n            EventLog log = new EventLog()\n            {\n                EventCode = string.Empty,\n                EventData = eventData == null ? string.Empty : Newtonsoft.Json.JsonConvert.SerializeObject(eventData),\n                EventTime = DateTime.Now,\n                Level = LogLevel.Info,\n                User = user,\n                Callstack = Environment.StackTrace,\n                ErrorMessage = $\"duration:{Convert.ToInt32(duration)}ms\"\n            };\n            Info(log);\n        }\n        public static void Info(EventLog log)\n        {\n            Log(log, LogLevel.Info);\n        }\n        public static void Error(string eventCode, object eventData, string user, Exception exception)\n        {\n            EventLog log = new EventLog()\n            {\n                EventCode = eventCode,\n                EventData = eventData == null ? string.Empty : Newtonsoft.Json.JsonConvert.SerializeObject(eventData),\n                EventTime = DateTime.Now,\n                Level = LogLevel.Error,\n                User = user,\n                Callstack = Environment.StackTrace,\n                ErrorMessage = ProjX.Common.Utility.GetExceptionMessage(exception)\n            };\n            Error(log);\n        }\n        public static void Error(EventLog log)\n        {\n            Log(log, LogLevel.Error);\n        }\n        private static void Log(EventLog log, string level)\n        {\n            if (default(EventLog).Equals(log))\n            {\n                return;\n            }\n            log.Level = level;\n            theQueue.Enqueue(log);\n            if (theQueue.Count >= CAPACITY)\n            {\n                // the queue is full, persist them to database\n                ThreadPool.QueueUserWorkItem((Object state) =>\n                {\n                    PersistenceEventLogs();\n                });\n            }\n        }\n        private static void PersistenceEventLogs()\n        {\n            if (theQueue.Count >= CAPACITY)\n            {\n                lock (theQueue)\n                {\n                    if (theQueue.Count >= CAPACITY)\n                    {\n                        // sp: just insert the log\n                        string spName = \"[ProjX].[log]\";\n                        // Constants.ConnectionString_Log comes from your application setting file\n                        using (SqlConnection con = new SqlConnection(Constants.ConnectionString_Log))\n                        {\n                            con.Open();\n                            using (SqlCommand cmd = con.CreateCommand())\n                            {\n                                cmd.CommandText = spName;\n                                cmd.CommandType = System.Data.CommandType.StoredProcedure;\n                                // TODO: bulk insert\n                                EventLog defaultLog = default(EventLog);\n                                while (theQueue.Count > 0)\n                                {\n                                    try\n                                    {\n                                        EventLog log = theQueue.Dequeue();\n                                        if (defaultLog.Equals(log))\n                                            continue;\n                                        cmd.Parameters.Clear();\n                                        cmd.Parameters.AddWithValue(\"level\", log.Level);\n                                        cmd.Parameters.AddWithValue(\"eventCode\", log.EventCode ?? string.Empty);\n                                        cmd.Parameters.AddWithValue(\"eventData\", log.EventData ?? string.Empty);\n                                        cmd.Parameters.AddWithValue(\"user\", log.User ?? string.Empty);\n                                        cmd.Parameters.AddWithValue(\"callstack\", formatCallstack(log.Callstack));\n                                        cmd.Parameters.AddWithValue(\"errorMessage\", log.ErrorMessage ?? string.Empty);\n                                        cmd.Parameters.AddWithValue(\"eventTime\", log.EventTime);\n                                        if (ENABLED)\n                                            cmd.ExecuteNonQuery();\n                                    }\n                                    catch (Exception)\n                                    {\n                                        continue;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /// <summary>\n        /// remove lines which start with \"at System.\"\n        /// </summary>\n        /// <param name=\"callstack\"></param>\n        /// <returns></returns>\n        private static string formatCallstack(string callstack)\n        {\n            if (string.IsNullOrWhiteSpace(callstack)) return string.Empty;\n            return string.Join\n                (\n                    Environment.NewLine,\n                    callstack.Split(new string[1] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).\n                        Where(_ => !_.Contains(\"at System.\"))\n                ).Trim();\n        }\n        /// <summary>\n        /// the capacity of the log queue\n        /// </summary>\n        private static readonly int CAPACITY = 128;\n        private static readonly Queue<EventLog> theQueue = new Queue<EventLog>(CAPACITY);\n        /// <summary>\n        /// enabled by default, you can disabled it temporary for special build\n        /// </summary>\n        private static readonly bool ENABLED = true;\n    }\n}\n```\n\n创建表及出入的存储过程此处省略。\n\n使用方法在下一节讲 👇👇👇\n\n## ASP.NET应用\n\n缓存和日志都是跟业务逻辑无关的代码，如果直接做侵入式的代码修改，将会使得原有代码变得冗长、重复，变得越来越难以维护。这里就涉及到一个概念，[面向方面编程](https://stackoverflow.com/questions/242177/what-is-aspect-oriented-programming)(Aspect-Oriented Programming)。Python 使用 [decorator](https://wiki.python.org/moin/PythonDecorators) 实现 AOP，Java Spring 也支持 AOP，C# 也有自己的想法 😄\n\n我用的是 Attribute 这个特性。\n\n以下代码同时使用了上两节实现的缓存及日志。\n\n``` csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text;\nusing System.Web.Http.Controllers;\nusing System.Web.Http.Filters;\nusing Proj.Common.Caching;\nusing Proj.Common.Logging;\nusing EventLog = Proj.Common.Logging.EventLog;\n\nnamespace ProjX.API\n{\n    // reference: https://www.davidhaney.io/custom-asp-net-mvc-action-result-cache-attribute/\n\n    /// <summary>\n    /// Cache result &amp; Log request and response information for ActionResult of Controllers\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Method)]\n    //public class ActionCacheLogAttribute : Attribute, IActionFilter\n    public class APICacheLogAttribute : ActionFilterAttribute\n    {\n        /// <summary>\n        /// Gets a value that indicates whether multiple filters are allowed\n        /// </summary>\n        public override bool AllowMultiple { get { return false; } }\n        /// <summary>\n        /// default constructor of APICacheLogAttribute\n        /// </summary>\n        /// <param name=\"cacheable\">set the variable as false if you want to log only (no caching)</param>\n        public APICacheLogAttribute(bool cacheable = true)\n        {\n            this.cacheable = cacheable;\n        }\n        private readonly bool cacheable;\n\n        /// <summary>\n        /// Occurs when an action is executing.\n        /// </summary>\n        /// <param name=\"actionContext\">The filter context.</param>\n        public override void OnActionExecuting(HttpActionContext actionContext)\n        {\n            start_time = DateTime.Now.Ticks;\n            if (cacheable)\n            {\n                // try to get result from cache\n                string cacheKey = CreateCacheKey(actionContext);\n                string cacheValue = LiteCache.Get<string>(cacheKey);\n                if (!string.IsNullOrWhiteSpace(cacheValue))\n                {\n                    // Set the response\n                    actionContext.Response = actionContext.Request.CreateResponse(System.Net.HttpStatusCode.OK);\n                    actionContext.Response.Content = new StringContent(cacheValue, Encoding.UTF8, \"application/json\");\n                }\n            }\n            // logging\n            EventLog log = GetLogEntry(actionContext);\n            Logger.Info(log);\n        }\n        /// <summary>\n        /// ticks when the request begin\n        /// </summary>\n        private long start_time;\n        /// <summary>\n        /// Occurs when an action has executed.\n        /// </summary>\n        /// <param name=\"actionExecutedContext\">The filter context.</param>\n        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)\n        {\n            var actionContext = actionExecutedContext.ActionContext;\n            Exception e = actionExecutedContext.Exception;\n            if (e != null)\n            {\n                // Don't cache errors\n                EventLog err = GetLogEntry(actionContext, e);\n                Logger.Error(err);\n            }\n            else if (cacheable)\n            {\n                // Get the cache key from HttpContext Items\n                string cacheKey = CreateCacheKey(actionContext);\n                // Cache the result of the action method\n                LiteCache.Set(cacheKey, actionExecutedContext.Response.Content.ReadAsStringAsync().Result);\n            }\n            // logging the process\n            EventLog log = GetLogEntry(actionContext);\n            Logger.Info(log);\n        }\n        /// <summary>\n        /// Creates the cache key.\n        /// </summary>\n        /// <returns>The cache key</returns>\n        private string CreateCacheKey(HttpActionContext actionContext)\n        {\n            string controllerName = actionContext.ActionDescriptor.ControllerDescriptor.ControllerType.FullName,\n                actionName = actionContext.ActionDescriptor.ActionName;\n            Dictionary<string, object> arguments = actionContext.ActionArguments;\n            string form = arguments != null && arguments.Count > 0 ? Newtonsoft.Json.JsonConvert.SerializeObject(arguments) : string.Empty;\n            return $\"{controllerName}.{actionName}^.^{form}\";\n        }\n        private EventLog GetLogEntry(HttpActionContext actionContext, Exception exception = null)\n        {\n            Dictionary<string, object> arguments = actionContext.ActionArguments;\n            string reqBody = arguments != null && arguments.Count > 0 ? Newtonsoft.Json.JsonConvert.SerializeObject(arguments) : string.Empty;\n\n            string controllerName = actionContext.ActionDescriptor.ControllerDescriptor.ControllerType.FullName,\n                actionName = actionContext.ActionDescriptor.ActionName;\n\n            int duration = Convert.ToInt32(TimeSpan.FromTicks(DateTime.Now.Ticks - start_time).TotalMilliseconds);\n            HttpRequestMessage req = actionContext.Request;\n            return new EventLog()\n            {\n                User = req.Headers.UserAgent.ToString(),\n                EventCode = controllerName + '`' + actionName,\n                EventTime = DateTime.Now,\n                EventData = reqBody,\n                Callstack = Environment.StackTrace,\n                ErrorMessage = exception == null\n                    ? $\"duration:{duration}ms\"\n                    : ProjX.Common.Utility.GetExceptionMessage(exception)\n            };\n        }\n    }\n}\n```\n\n从源码可以看出，该 `[APICacheHelper]` 可以 ① 将上次请求返回的数据先序列化成**字符串**然后缓存起来，下次相同的请求进来了直接从缓存读取结果并返回；② 记录每次 Action 执行的结果。\n\n使用方法有两种：\n\n1. 同时启用缓存和日志(默认)\n    ``` csharp\n    /// <summary>\n    /// return the mock data\n    /// </summary>\n    /// <returns></returns>\n    [APICacheLog]\n    public IEnumerable<object> MockData()\n    {\n        return new List<object>()\n        {\n            new {foo = \"foo\", bar = \"bar\"},\n            new {foo = \"foo1\", bar = \"bar1\"},\n        };\n    }\n    ```\n2. 只启用日志，无缓存。应用场景：非查询类（新增、删除、更新）数据请求、返回结果仅依赖函数参数列表（唯一输入确定唯一输出，没有全局/环境变量依赖）、返回结果非 JSON。\n   ``` csharp\n    /// <summary>\n    /// sample WebAPI to update data\n    /// </summary>\n    /// <returns></returns>\n    [APICacheLog(cacheable:false)]\n    public bool UpdateRecord()\n    {\n        return true;//just for test\n    }\n   ```\n\n就是这么简单。\n\n## 参考链接\n\n- [Caching in .NET Framework Applications](https://docs.microsoft.com/en-us/dotnet/framework/performance/caching-in-net-framework-applications)\n- [Memory Cache in C#](https://www.c-sharpcorner.com/article/memory-cache-in-c-sharp/)\n","tags":["asp.net","cache","caching","log","logging","memorycache"]},{"title":"ASP.NET WebAPI 编译包瘦身","url":"/2020/08/31/shrink-ASP-NET-WebAPI-build-package-file-size/","content":"\n伏尔泰曾说：\n\n> 生命，在于~~运动~~折腾！\n\n不知何时起，经过数次迭代，项目的依赖项（第三方包）逐渐变多，导致现在编译的时间变长了，发布包也慢慢的变大了。有些依赖项可能只是引用了其中的某一个小功能，有些则是完全废弃的包，但是项目编译的时候都会编译。确实是因为项目小，人手少，所有的改动（还包括不成熟的 research 模块）都在一个代码库上，导致现在编译包过大。理想做法是，有一个主分支，至少一个开发分支。考虑到，可预见的未来内，项目组成员是不会变了（对，就我一个），所以，还是一个开发分支省事（其实就是因为懒）。但也不能屈服于现状，得做点事，改善一下，证明我还是个好程序猿。\n\n说干就干。但是动手前，得足够了解自身项目，了解所有的项目依赖项。\n\n其次，了解哪些源文件/依赖项还在用，这样我们就可以删除掉那些不再使用的源文件/依赖项。前端有 [Tree Shaking](https://webpack.js.org/guides/tree-shaking/) 的概念，相应地可以推广到 ASP.NET 中。虽说强类型语言编译时已做到了排除未使用(unused)/无法触达(unreachable)代码，但是奈何有些开发人员代码编写不规范，编译器也无法识别出 TA 写的代码到底该不该排除，导致编译时默认还是会包含很多不需要的内容。所以，Tree Shaking 也应该推广到开发人员的思维。🙂\n\n以下是动手之前，我的项目依赖项清单 (NuGet 的 `packages.config` 文件)：\n\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<packages>\n  <package id=\"Antlr\" version=\"3.5.0.2\" targetFramework=\"net461\" />\n  <package id=\"BouncyCastle\" version=\"1.8.3.1\" targetFramework=\"net461\" />\n  <package id=\"EntityFramework\" version=\"6.2.0\" targetFramework=\"net461\" />\n  <package id=\"Google.Protobuf\" version=\"3.6.1\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.Mvc\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.Razor\" version=\"3.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.TelemetryCorrelation\" version=\"1.0.0\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.Web.Optimization\" version=\"1.1.3\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.Client\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.Core\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.HelpPage\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.WebHost\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebPages\" version=\"3.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform\" version=\"2.0.0\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.Web.Infrastructure\" version=\"1.0.0.0\" targetFramework=\"net461\" />\n  <package id=\"MySql.Data\" version=\"8.0.16\" targetFramework=\"net461\" />\n  <package id=\"MySql.Data.Entities\" version=\"6.8.3.0\" targetFramework=\"net461\" />\n  <package id=\"MySql.Data.Entity\" version=\"6.10.8\" targetFramework=\"net461\" />\n  <package id=\"Newtonsoft.Json\" version=\"12.0.2\" targetFramework=\"net461\" />\n  <package id=\"popper.js\" version=\"1.14.0\" targetFramework=\"net461\" />\n  <package id=\"System.Diagnostics.DiagnosticSource\" version=\"4.4.1\" targetFramework=\"net461\" />\n  <package id=\"WebGrease\" version=\"1.5.2\" targetFramework=\"net461\" />\n</packages>\n```\n\n可以看到，虽然之前已经移除了很多默认的、没必要的依赖项，比如 `bootstrap`、`jQuery` 等，但是还是有 23 个包！考虑到该项目是个 Web API 程序，所以，还是有很多依赖项可以删除。\n\n⚠⚠⚠ 警告 ⚠⚠⚠： **一定要在足够了解自身项目，并且明白每个依赖项的用处的前提下，思考再三才能动手**。前者可以在平日的项目经验积累获得，后者只能通过看官方文档、社区问答、博客去了解。\n\n官方文档是指 [NuGet](https://www.nuget.org/) 的官方链接或者其 [Github](https://github.com/) 主页介绍。社区问答参考 [Stackoverflow](https://stackoverflow.com) 等。博客的话就比较广了，可以参考各搜索引擎的结果。\n\n以下是我的参考链接节选：\n\n- [What's This and Can I Delete It? Examining A Default ASP.NET MVC Project](https://exceptionnotfound.net/whats-this-and-can-i-delete-it-examining-a-default-asp-net-mvc-project/)\n- [Removing roslyn from ASP.NET 4.5.2 project template](https://galdin.dev/blog/removing-roslyn-from-asp-net-4-5-2-project-template/)\n- [NuGet Gallery | MySql.Data](https://www.nuget.org/packages/MySql.Data/)\n\n以下是此次移除的依赖项清单：\n\n##### Antlr [<fa-link/>](https://www.nuget.org/packages/Antlr/) ###\n\n此依赖项被 `WebGrease` 所引用（参考 NuGet 主页 Used By 章节，一般 top 5 NuGet packages 都会有你想要的东西），后者是优化 `JavaScript`、`CSS` 及图片的工具包。考虑到该项目性质是 Web API，不是 Web Application，删除。\n\n##### BouncyCastle [<fa-link/>](https://www.nuget.org/packages/BouncyCastle/) ###\n\n此依赖项被 `MySql.Data` 所引用，后者是项目前期 Research 阶段使用 MySQL 引入的。现阶段项目采用 SQL Server 作为结构化数据存储数据库，删除。\n\n##### EntityFramework [<fa-link/>](https://www.nuget.org/packages/EntityFramework/) ###\n\nEntityFramework 是项目前期快速搭建 prototype 引入的。现阶段项目采用 ADO.NET 及 Stored Procedure 作为底层数据访问方式，删除。\n\n##### Google.Protobuf [<fa-link/>](https://www.nuget.org/packages/Google.Protobuf/) ###\n\n此依赖项被 `MySql.Data` 所引用，后者是项目前期 Research 阶段使用 MySQL 引入的。现阶段项目采用 SQL Server 作为结构化存储数据库，删除。\n\n##### Microsoft.AspNet.TelemetryCorrelation [<fa-link/>](https://www.nuget.org/packages/Microsoft.AspNet.TelemetryCorrelation/) ###\n\n此依赖项被 `Microsoft.ApplicationInsights.Web`，后者在上一次瘦身中已经移除，故移除。\n\n##### Microsoft.AspNet.Web.Optimization [<fa-link/>](https://www.nuget.org/packages/Microsoft.AspNet.Web.Optimization/) ###\n\n此依赖项是优化 `JavaScript` 和 `CSS` 文件打包的，考虑到该项目性质是 Web API，不是 Web Application，删除。\n\nTips: 既然不是个 Web Application，那就应在项目中排除 `Views` 文件夹。\n\n##### Microsoft.CodeDom.Providers.DotNetCompilerPlatform [<fa-link/>](https://www.nuget.org/packages/Microsoft.CodeDom.Providers.DotNetCompilerPlatform/) ###\n\n这个是 .Net 编译平台 [Roslyn](https://github.com/aspnet/RoslynCodeDomProvider/) 的包，移除此依赖项得当心，因为很可能导致项目编译不通过。但是移除此依赖项会带来显著的效果。移除前，每次编译，都会在项目的 `bin\\roslyn` 文件夹下生成一堆你并不想要的东西，还特别大。移除后，这些烦恼随着文件夹一并烟消云散了。\n\n根据官方文档，`Roslyn` 是能够让我们在老的运行环境 （.Net Framework）里可以使用新的语法，比如 [C# 6.0](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6) 里 `?.`、`??` 空值条件运算符，新的使用美元符进行字符串拼接，`nameof` 运算符等等。\n\n因为项目的目标运行环境(.Net Framework)版本是 4.6.1，[该版本天然支持 C# 6.0 语法](https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-6/) (或参考此[问答](https://stackoverflow.com/questions/28921701/does-c-sharp-6-0-work-for-net-4-0))，只要我不去学习 C# 7.0，那就可以任意玩耍了，哈哈，机智如我。*（此处未经验证，如有错误，欢迎指正）*\n\n##### MySql.Data [<fa-link/>](https://www.nuget.org/packages/MySql.Data/) ###\n##### MySql.Data.Entities [<fa-link/>](https://www.nuget.org/packages/MySql.Data.Entities/) ###\n##### MySql.Data.Entity [<fa-link/>](https://www.nuget.org/packages/MySql.Data.Entity/) ###\n##### popper.js [<fa-link/>](https://www.nuget.org/packages/popper.js/) ###\n\n以上四个依赖项，皆因项目前期 Research 阶段使用 MySQL 引入的。现阶段项目采用 SQL Server 作为结构化存储数据库，删除。\n\n##### System.Diagnostics.DiagnosticSource [<fa-link/>](https://www.nuget.org/packages/System.Diagnostics.DiagnosticSource/) ###\n\n官网看不出来做什么用的，但是自信项目没用到这个依赖项，删！(迷之自信)\n\n##### WebGrease [<fa-link/>](https://www.nuget.org/packages/WebGrease/) ###\n\n`WebGrease` 是优化 `JavaScript`、`CSS` 及图片的工具包。考虑到该项目性质是 Web API，不是 Web Application，删除。\n\n所有依赖项删除完了之后，现在的 `packages.config` 长这样：\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<packages>\n  <package id=\"Microsoft.AspNet.Mvc\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.Razor\" version=\"3.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.Client\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.Core\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.HelpPage\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebApi.WebHost\" version=\"5.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.AspNet.WebPages\" version=\"3.2.4\" targetFramework=\"net461\" />\n  <package id=\"Microsoft.Web.Infrastructure\" version=\"1.0.0.0\" targetFramework=\"net461\" />\n  <package id=\"Newtonsoft.Json\" version=\"12.0.2\" targetFramework=\"net461\" />\n</packages>\n```\n\n舒服多了 ~\n\n还差最后一步，编译：✔️ 通过；发布：✔️ 通过；部署到测试环境：✔️ 运行没问题。\n\n![自信](/images/shrink-ASP-NET-WebAPI-build-package-file-size/confidence.gif) \n\n对比一下瘦身前与瘦身后的文件大小，可以开心一整天了。😄\n\n![编译文件前后对比](/images/shrink-ASP-NET-WebAPI-build-package-file-size/comparison.png) \n","tags":["asp.net","webapi","build","package","shrink"]},{"title":"node 包的版本号","url":"/2020/08/20/node-package-version/","content":"\n## 背景\n\n复习时间到啦 <i class=\"fa fa-bell\" aria-hidden=\"true\"></i>\n\n突然脑子不灵光了，不记得 `package.json` 文件下面的包，带 `^` 和 `~` 有什么区别了，看来是上年纪了。\n\n## TLDR，太长不看版\n\n一句话加深印象：\n\n> `~`(波峰小)表示接受补丁升级(变动小)，`^`(波峰大)表示接受次要版本及补丁升级(变动大)。 \n\n## 正片\n\n直接上[官方解释](https://nodejs.dev/learn/the-package-json-guide)：\n\n---------------------------\n\n##### Package versions\n\nYou have seen in the description above version numbers like these: `~3.0.0` or `^0.13.0`. What do they mean, and which other version specifiers can you use?\n\nThat symbol specifies which updates your package accepts, from that dependency.\n\nGiven that using semver (semantic versioning) all versions have 3 digits, the first being the major release, the second the minor release and the third is the patch release, you have these rules:\n\n- `~`: if you write ~0.13.0, you want to only update patch releases: 0.13.1 is ok, but 0.14.0 is not.\n- `^`: if you write ^0.13.0, you want to update patch and minor releases: 0.13.1, 0.14.0 and so on.\n- `*`: if you write *, that means you accept all updates, including major version upgrades.\n- `>`: you accept any version higher than the one you specify\n- `>=`: you accept any version equal to or higher than the one you specify\n- `<=`: you accept any version equal or lower to the one you specify\n- `<`: you accept any version lower to the one you specify\n\nThere are other rules, too:\n\n- no symbol: you accept only that specific version you specify\n- `latest`: you want to use the latest version available\n\nand you can combine most of the above in ranges, like this: `1.0.0 || >=1.1.0 <1.2.0`, to either use 1.0.0 or one release from 1.1.0 up, but lower than 1.2.0.\n\n---------------------------\n\n简单翻译一下：\n\n---------------------------\n\n##### Package versions\n\n你可以在上面描述中看到类似于 `~3.0.0` 或 `^0.13.0` 这样的版本编号。它们是什么意思，我们又如何抉择？\n\n这个符号指明了哪些更新为当前依赖包所接受的。\n\n考虑到所有版本号都遵循 `semver` (semantic versioning，语义版本控制) 规则：第一个数字是主版本号，第二个数字是此版本号，第三个数字是补丁编号，我们有如下规则：\n\n- `~`: 如果我们写 ~0.13.0，我们仅更新补丁版本： 0.13.1 可以更新，但 0.14.0 不行\n- `^`: 如果我们写 ^0.13.0，我们可以更新补丁及次要版本：0.13.1, 0.14.0 等等\n- `*`: 如果我们写 *, 意味着我们可以接受所有更新，包括主版本\n- `>`: 我们可以更新到任何比指定版本高的版本\n- `>=`: 我们可以更新到指定版本或者任何比指定版本号高的版本\n- `<=`: 我们可以更新到指定版本或者任何比指定版本号低的版本\n- `<`: 我们可以更新到任何比指定版本低的版本\n\n也有一些其他的规则：\n\n- 没有标识符：仅接受指定版本\n- `latest`：我们可以使用最新可用版本\n\n同时我们可以结合上面所列的大部分规则，就像这样：`1.0.0 || >=1.1.0 <1.2.0`，表示或者使用 1.0.0，或者使用一个大于 1.1.0 且小于 1.2.0 的版本。\n","tags":["node","package.json"]},{"title":"Windows 文件管理器快捷键","url":"/2020/08/07/windows-shortcut-key-for-file-explorer/","content":"\n作为一名程序员，快捷键的使用是日常操作，而对性能的极致追求，则是一名合格程序员的基本修养。\n\n平时使用的最多的快捷键之一，是 `Win` + `E`，打开文件管理器，默认会打开“快捷访问”。但是快捷访问会加载最近访问项（文件及文件夹），每次打开都会刷新，所以基本上每次都会卡顿一下会儿，即使使用的是 SSD，极端情况下还会导致文件管理器进程重启。\n\n改进方法是，打开文件管理器，视图，文件夹选项，常规选项卡，\n\n1. 切换打开文件管理器至“我的电脑”\n2. 或者将隐私下面的“在快捷访问中显示最近使用的文件”和“在快捷访问中显示最近常用的文件夹”两个复选框去掉\n\n![Folder Options](/images/windows-shortcut-key-for-file-explorer/folder-options.png)\n\n点击确定，再次按下 `Win` + `E`，丝般顺滑，舒坦~\n","tags":["随笔","windows","shortcuts"]},{"title":"CDN 故障转移","url":"/2020/07/23/CDN-failover/","content":"\n首先说一句，这篇文章标题可能不太准确，因为涉及的技能点可能有点杂，比较跳跃，但是都是我在做 CDN 故障转移时碰到的，所以全都扔在一篇文章里，不介意的话，将就着吧，有什么不懂的，请点击文章中的各种链接 😄\n\n这篇文章是继上篇文章 [可靠 CDN](/2020/07/19/reliable-CDN/) 之后的另一篇关于 CDN 的思考及实践。\n\n## SRI 检查\n\n[SRI](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) 是一种安全机制，让浏览器通过验证它接收到的资源（比如从 CDN）是未经过更改的。简单理解就是浏览器把（从 CDN）拿到的资源进行哈希计算，然后把这个哈希值与开发者事先计算好的哈希值（integrity) 匹配。目前[大多数浏览器都支持 SRI 检查](https://caniuse.com/#feat=subresource-integrity)(emmm，除了 IE)。 \n\n实际使用很简单，就是指定 `script` 或 `link` 标签的 `integrity` 属性，值为事先计算的该静态资源的哈希值（sha256，sha384，sha512中的一个或多个） [<fa-link/>](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity#Using_Subresource_Integrity)。MDN 推荐了一个 [SRI Hash Generator](https://www.srihash.org/) *（有一个缺点，只能生成 script 便签，不能根据 css 文件成 link 标签，需要手动调整）*\n\n需要注意的是，一般需要 SRI 检查的静态资源都在 CDN 上，所以都是需要开启 CORS。好在 CDN 默认都开启了，我们需要做的是浏览器端手动添加上 [crossorigin 属性](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes)，不然可能会出错 :(\n\n## 标记 script 标签为 async 或 defer\n\n下面是 `script` 标签的属性（`async`、`defer`、`module`、`nomodule`等）常用场景 [<fa-link/>](https://gist.github.com/jakub-g/385ee6b41085303a53ad92c7c8afd7a6)：\n\n|`script`标签类型        |常见使用场景                     |\n|------------|-------------------------------------|\n|script src     |a legacy library that is needed by subsequent inline scripts|\n|script src defer|deferred execution, maintaining order; e.g. a lib that is needed by other defer scripts; progressive enhancement code|\n|script src async|deferred execution, without order (independent scripts); e.g. self-instantiating analytics lib|\n|script src async defer|like above, but with IE9 support|\n|script inline|1) small piece of code that must be executed immediately, before some subsequent code (inlined polyfills, timers, server-generated configuration), or to register certain event listeners as soon as possible; 2) non-cacheable (generated, often changing etc.) code; 3) experience critical code that is small and the round-trip latency to download it separately would be too much|\n|script src module|library/app, for modern browsers only|\n|script src module async|progressive enhancement code, for modern browsers only|\n|script inline module |small piece of and/or non-cacheable code, for modern browsers only; perhaps inline config that is necessary for another non-async module declared after it|\n|script inline module async|small piece of and/or non-cacheable progressive enhancement code (independent script), for modern browsers only; it may `import`s a well-cacheable library|\n|script nomodule ...|a fallback script for legacy browsers, when shipping ES modules to modern browsers|\n\n简略版的请看图：\n\n![A comparison of various ways the script tags in HTML](/images/cdn-failover/a%20comparison%20of%20various%20ways%20the%20script%20tags%20in%20HTML.png)\n\n总结：**一般情况下，`async` 用于加载基础类库（加载完立即执行，无依赖项），`defer` 用于加载一些 addon（待基础类库加载完后，`DOMContentLoaded` 事件前，依次执行）**。\n\n## 调整 Hexo 模板生成脚本\n\n##### 增加 CDN 配置项\n\n👇 _config.yaml\n\n``` yaml\ncdn: https://cdn.bootcdn.net/ajax/libs/\n```\n\n##### 使用 [Hexo 默认的 helper 方法](https://hexo.io/docs/helpers.html) js/css 生成 script/link 标签。\n\n👇 after-footer.ejs\n\n``` ejs\n<%- js({src:config.cdn+'jquery/2.0.3/jquery.min',integrity:'sha256-pXtSQrmprcTB74RsNlFHuJxHK5zXcPrOMx78uWU0ayU= sha384-ECTndYny330R2jlSXBiZkdXzAVi0Z/iDXJTwV6cp39HECmalqg6+b2sFZFf/Y2m6 sha512-epzJ9ms+0Pq+zFMrG1lXVNvjEXgtfKx9iuEWqz3hmbaU2m/Dp1pcmpYzuSdDLqX6PMIjzMOyGFwMc+SkgFhMFg==',crossorigin:'anonymous'}) %>\n<% if (theme.fancybox){ %>\n<%- css({href:config.cdn+'fancybox/2.1.5/jquery.fancybox.min',integrity:'sha384-RMsmRsuFJAxdvCCX2XHjTlWajoB7207PpLqA4HMVuie0TAWK0x+7ubbuDa58Tcij',crossorigin:'anonymous'}) %>\n<%- js({src:config.cdn+'fancybox/2.1.5/jquery.fancybox.pack',integrity:'sha384-A/Tc8RFHsjkPvgL0yZebgTxxmCGCSaTpGkyQLeFFFJQIAzSozLwNGX9AOCIpxoXC',crossorigin:'anonymous',defer:true}) %>\n<% } %>\n<%- js({src:'js/script',defer:true}) %>\n```\n\n##### 编写自定义 Hexo Helper 方法 (*Optional*)\n\nHexo 默认的 helper 方法 `js` 和 `css` 足够使用，但是还有精简的空间。比如每个方法的参数均包含 `config.cdn` 和 `crossorigin:'anonymous'`，一个程序员的基本素养就是 DRY (Don't Repeat Yourself)。以下就是其中一种优化措施 （[参考链接](https://hexo.io/api/helper.html)）：\n\n在 `theme/your-theme/scripts` 下新建 `js_cdn.js` 和 `css_cdn.js` 文件。其中前者内容如下（后者内容极其相似）：\n\n``` js\nhexo.extend.helper.register(\"js_cdn\", function(item) {\n  const js = hexo.extend.helper.get(\"js\").bind(hexo);\n  const integrityProp = \"integrity\";\n  const placeholder = \" \" + integrityProp;\n  const crossoriginAttr = ' crossorigin=\"anonymous\"';\n  let markup = js(item);\n  if (item.hasOwnProperty(integrityProp)) {\n    // default `js` helper function doesn't include crossorigin=\"anonymous\" in the generated script markup\n    const idx = markup.indexOf(placeholder);\n    markup = [markup.substring(0, idx), crossoriginAttr, markup.substring(idx)].join(\"\");\n  }\n  return markup;\n});\n```\n\n更新模板生成脚本 `after-footer.ejs` (删除 `,crossorigin:'anonymous'`)\n\n``` ejs\n<%- js_cdn({src:config.cdn+'jquery/2.0.3/jquery.min',integrity:'sha256-pXtSQrmprcTB74RsNlFHuJxHK5zXcPrOMx78uWU0ayU= sha384-ECTndYny330R2jlSXBiZkdXzAVi0Z/iDXJTwV6cp39HECmalqg6+b2sFZFf/Y2m6 sha512-epzJ9ms+0Pq+zFMrG1lXVNvjEXgtfKx9iuEWqz3hmbaU2m/Dp1pcmpYzuSdDLqX6PMIjzMOyGFwMc+SkgFhMFg=='}) %>\n<% if (theme.fancybox){ %>\n<%- css_cdn({href:config.cdn+'fancybox/2.1.5/jquery.fancybox.min',integrity:'sha384-RMsmRsuFJAxdvCCX2XHjTlWajoB7207PpLqA4HMVuie0TAWK0x+7ubbuDa58Tcij'}) %>\n<%- js_cdn({src:config.cdn+'fancybox/2.1.5/jquery.fancybox.pack',integrity:'sha384-A/Tc8RFHsjkPvgL0yZebgTxxmCGCSaTpGkyQLeFFFJQIAzSozLwNGX9AOCIpxoXC',defer:true}) %>\n<% } %>\n<%- js_cdn({src:'js/script',defer:true}) %>\n```\n\n## CDN 故障转移\n\n进入本文正文了！\n\n考虑到 CDN 也有会有打盹的时候，所以，一个比较好的实践就是时刻做好 Plan B。我的方法是，在页面的自定义脚本中检查脚本加载情况并在执行尝试加载候选资源。\n\n以下是示例代码（`js/script.js`）：\n\n``` js\n(function() {\n  var dependencies = [\n    {\n      export: window.jQuery,\n      failover: \"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.3.min.js\",\n      // failover: \"https://code.jquery.com/jquery-2.0.3.min.js\",\n      integrity: \"sha256-sTy1mJ4I/LAjFCCdEB4RAvPSmRCb3CU7YqodohyeOLo=\"\n    },\n    {\n      export: (window.jQuery || {}).fancybox,\n      failover:\n        \"https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/jquery.fancybox.pack.js\",\n      integrity:\n        \"sha384-A/Tc8RFHsjkPvgL0yZebgTxxmCGCSaTpGkyQLeFFFJQIAzSozLwNGX9AOCIpxoXC\"\n    }\n  ];\n  // failover to load alternative files when CDN libraries failed.\n  var nonLoadedDependencies = dependencies.filter(function(dep) {\n    return !dep.export;\n  });\n  /** lazy load js files */\n  function loadDependency(dep) {\n    return new Promise(function(resolve, reject) {\n      var script = document.createElement(\"script\");\n      script.src = dep.failover;\n      if (dep.integrity && dep.integrity.length) {\n        script.integrity = dep.integrity;\n        script.crossOrigin = \"anonymous\";\n      }\n      // // https://www.html5rocks.com/en/tutorials/speed/script-loading/#toc-dom-rescue\n      script.async = false;\n      script.addEventListener(\"load\", function() {\n        resolve(dep.failover + \" is loaded\");\n      });\n      script.addEventListener(\"error\", function() {\n        reject(dep.failover + \" can't be loaded!\");\n      });\n      document.body.appendChild(script);\n    });\n  }\n\n  (nonLoadedDependencies.length\n    ? new Promise(function(resolve, reject) {\n        Promise.all(nonLoadedDependencies.map(loadDependency)).then(function() {\n          resolve(\"All dependencies are loaded!\");\n        }, reject);\n      })\n    : Promise.resolve(\"All dependencies are loaded!\")\n  ).then(myBiz);\n\n  /** business logic, will be executed when all dependencies loaded */\n  function myBiz() {\n    /// your business code comes here\n  }\n})();\n\n```\n\n其中有一行语句需要单独拎出来讲一下的，就是上面脚本的第 31 行，`script.async = false;`\n\n如果您的 `dependencies` 都没有依赖项，有没有这条语句关系不大，相反还能提高加载性能。但是，现实情况是很多脚本都是有依赖项的，上面贴的代码就是个很好的例子。`jquery.fancybox.pack.js` 文件依赖于 `jquery.min.js` 文件。\n\n所以，如果没有这行语句，默认这些 `script` 会按 `async` 的方式去执行（脚本下载成功立即执行），也就是说，可能会出现后面的脚本先被执行的情况。但是后面的脚本依赖于前面的脚本，立即执行会报错。\n\n![](/images/cdn-failover/dependent%20script%20execution%20error.png)\n\n受 [这篇文章](https://www.html5rocks.com/en/tutorials/speed/script-loading/) 启发，加上上面说的这条语句，就可以确保 async 的脚本的执行顺序了。\n\n调整完之后的脚本下载时间不变，但是不报错了，因为执行顺序对上了。\n\n![](/images/cdn-failover/async%20script%20execution%20order.png)\n\n当然，这个脚本还有很大的提升空间（比如，`Promise` 在低版本浏览器兼容问题），这里暂时就不浪费体力了。\n\n## 思考\n\n既然动态添加的 `async` 脚本执行顺序不确定，那 `defer` 脚本如何呢？？\n\n## 参考链接：\n\n- [&lt;script&gt; async, defer, async defer, module, nomodule, src, inline - the cheat sheet](https://gist.github.com/jakub-g/385ee6b41085303a53ad92c7c8afd7a6)\n- [Scripts: async, defer](https://javascript.info/script-async-defer)\n","tags":["cdn","javascript","failover","async","defer","execution order"]},{"title":"可靠 CDN","url":"/2020/07/19/reliable-CDN/","content":"\n前几天，把博客的 [font-awesome](https://fontawesome.com/) 引用从博客站点本身切换到 CDN。图省事，就用了以前国内外通用的 [cloudflare](https://www.cloudflare.com/zh-cn/network/china/)，因为之前不管是在公司（外网），还是在家里（国内），访问都挺快的。然后，就出事了。。。\n\n今天在家，闲来没事，打开自己的博客，发现 font-awesome 加载不了。起初，我以为是浏览器问题，因为我用 Firefox 有时候能正常渲染 icon font，过一会儿刷新一下又不能了，但是我用 Chrome 一直都可以正常工作。\n\n去网上搜索一圈，发现 MDN 说：\n\n> [<i class=\"fa fa-link\" aria-hidden=\"true\"></i>](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) Web Fonts (for cross-domain font usage in @font-face within CSS), so that servers can deploy TrueType fonts that can only be cross-site loaded and used by web sites that are permitted to do so. \n\n> [<i class=\"fa fa-link\" aria-hidden=\"true\"></i>](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) Fonts applied with @font-face. Some browsers allow cross-origin fonts, others require same-origin. \n\n发生跨域了？废话，用 CDN 肯定要跨域啊。但这些应该都是正常操作，Chrome 都行。emmm，Firefox 你在作妖吗。MDN 说的 others，该不会说的就是它自己吧。。。\n\n查证一下 [Can I use](https://caniuse.com/#feat=fontface)：\n\n![](/images/reliable-cdn/caniuse%20font%20face%20web%20fonts.jpg)\n\n只要服务器支持 CORS 浏览器就没问题！[这篇文章](http://cssbakery.com/2010/07/fixing-firefox-font-face-cross-domain_25.html) 遇到的问题也是这样。\n\n不会吧，CDN 不支持 CORS 那 CDN 要怎么用，cloudflare 肯定是支持 CORS 的！\n\n再回头对比一下，我发现是 Firefox 请求字体文件出错时，发送的请求，是不带 HTTP 版本号的。\n\n![firefox 请求字体文件不带版本号](/images/reliable-cdn/firefox%20cert%20invalid.jpg)\n\n而正常请求是指定了 HTTP 版本号的：\n\n![firefox 正常请求字体](/images/reliable-cdn/firefox%20working.jpg)\n\n但是偶然又有一次带了版本号依然无法请求资源\n\n![firefox 请求字体文件不带版本号](/images/reliable-cdn/firefox%20cert%20invalid%204.jpg)\n\n什么鬼，你耍我？ ![？？？](/images/reliable-cdn/questions.png) \n\n莫非，真的是 CDN 问题？我查查...\n\n好家伙，还真有问题！[Cloudflare DNS 服务中断，大量网站和服务无法访问](https://segmentfault.com/a/1190000023290310) \n\n虽然文中并未提及国内是否受波及，但为什么我受影响了？我去 [官网](https://www.cloudflarestatus.com/) 看看。官网说了\n\n> All Systems Operational\n\n所有节点均正常？你确定？然后，我发现，7月17号，也就是前天有一个 incident\n\n> ## Cloudflare Network and Resolver Issues \n> Resolved - This incident has been resolved.\n> Jul 17, 22:57 UTC\n> Monitoring - A fix has been implemented and we are monitoring the results.\n> Jul 17, 22:34 UTC\n> Update - This afternoon we saw an outage across some parts of our network. It was not as a result of an attack. It appears a router on our global backbone announced bad routes and caused some portions of the network to not be available. We believe we have addressed the root cause and are monitoring systems for stability now.\n> Jul 17, 22:09 UTC\n\n嘶~~~ 有点不靠谱的感觉。没人攻击您，后台路由出问题了？\n\n稍等，我之前好像看见，cloudflare 国内是和百度云合作的？嘶~~~ （不吹不黑，只是个人不喜欢太商业化的东西）\n\n拜拜咯，cloudflare！下载一个 js 和 css 文件都这么慢，还不如直接使用自己站点资源 🤦‍\n\n![firefox 请求 css 文件](/images/reliable-cdn/firefox%20cert%20invalid%202.jpg)\n![firefox 请求 js 文件](/images/reliable-cdn/firefox%20cert%20invalid%203.jpg)\n\n既然不用 cloudflare，那换谁呢？简单搜索了一下，目前看起来，bootcdn 还不错，行，安排！！\n\n刷刷刷，搞定！\n\nfirefox 打开，正常！\n\n","tags":["cdn","cloudflare","baidu","firefox","iconfont"]},{"title":"Flutter 入门","url":"/2020/07/18/get-started-with-Flutter/","content":"\n## 为什么要学 Flutter？\n\n- 提升技能。移动端 skillset √ ，全栈开发 √\n- Flutter 是趋势。“*Google 出品，必是精品！*”\n- React Native 不感冒\n\n## 网站\n\n- [Flutter](https://flutter.dev/) *【Flutter 官网】*\n- [Flutter 中文社区](https://flutter.cn/) *【Flutter 官网（中文）】*\n- [Dart 开发语言概览](https://dart.cn/guides/language/language-tour) *【1小时入门 Dart】*\n- [Flutter Codelabs](https://codelabs.flutter-io.cn/) *【更多入门案例】*\n- [重磅|庖丁解牛之——Flutter for Web · 语雀](https://www.yuque.com/xytech/flutter/aqsvov) *【咸鱼出品】*\n\n## 安装 \n\n因为本来就打算尝试 Flutter for Web，而此功能目前还处于 beta 分支，所以下载 `xxxx-stable.zip` 安装包基本没用，最终还是需要切换分支，重新更新。所以，以下是我的安装方法：\n\n##### 1. 从 GitHub 上下载最新 beta 分支 (git clone)\n\n``` shell\ngit clone https://github.com/flutter/flutter.git -b beta\n```\n\n##### 2. 更新环境变量 [<fa-link/>](https://flutter.cn/docs/get-started/install/windows)\n\n将 `flutter\\bin` 添加至环境变量 `PATH`。Linux 和 Mac 用户命令行搞定：\n\n``` shell\nexport PATH=\"$PWD/flutter/bin:$PATH\"\n```\n\nWindows 用户可以选择鼠标点点，更改环境变量 （我的电脑->属性->高级系统设置->环境变量->用户变量）\n\n##### 3. 配置 flutter 使用镜像站点 [<fa-link/>](https://flutter.cn/docs/get-started/install/windows)\n\nFlutter 官方站点 (https://flutter.dev) 是在境外，被小镇禁止访问了，所以，此步骤是小镇用户需要做的额外操作。\n\n类似于第二步，不同的是，这一步更改的是 `PUB_HOSTED_URL` 和 `FLUTTER_STORAGE_BASE_URL`\n\n``` shell\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n```\n\n当然，Flutter 镜像站点，除了 Flutter 中文社区 `flutter-io.cn` 这一个，还有另外两个，如果觉得这个主站点慢，可以随时切换：\n\n- 上海交通大学软件源镜像服务\n\n``` shell\nexport FLUTTER_STORAGE_BASE_URL: https://mirrors.sjtug.sjtu.edu.cn/\nexport PUB_HOSTED_URL: https://dart-pub.mirrors.sjtug.sjtu.edu.cn/\n```\n\n- 清华大学开源软件镜像站\n\n``` shell\nexport FLUTTER_STORAGE_BASE_URL: https://mirrors.tuna.tsinghua.edu.cn/flutter\nexport PUB_HOSTED_URL: https://mirrors.tuna.tsinghua.edu.cn/dart-pub\n```\n\n##### 4. 初始化 [<fa-link/>](https://flutter.cn/docs/get-started/web)\n\n``` shell\nflutter channel beta\nflutter upgrade\nflutter config --enable-web\n```\n*备注：初始化过程中，可能会遇到下载失败问题，这时候可以参照第三步骤，切换镜像站点，并检查您此时的网络链接是否可以访问到镜像站点*\n\n##### 5. 验证安装 [<fa-link/>](https://flutter.cn/docs/get-started/web)\n\n``` shell\nflutter devices\nflutter doctor\n```\n\n![install successfully](/images/flutter/flutter%20doctor%20no%20issues%20found.jpg)\n\n如果 `flutter devices` 书出一个名为 Chrome 的设备信息，则表示所有的安装、配置均完成。\n\n## Hello, World! [<fa-link/>](https://flutter.cn/docs/get-started/web)\n\n``` shell\nflutter create testflutter\ncd testflutter\nflutter run -d chrome --web-hostname=127.0.0.1\n```\n\n打开 Chrome 浏览器，访问站点\n\n![flutter run -d chrome --web-hostname=127.0.0.1](/images/flutter/flutter%20run.png)\n\n## 编译、部署 [<fa-link/>](https://flutter.cn/docs/deployment/web)\n\n编译：\n\n``` shell\nflutter build web\n```\n\n部署：随便找个站点挂挂，本地的，或者云上的。\n\n![flutter build web](/images/flutter/flutter%20build%20web.png)\n\n🎉🎉🎉 完美，算是迈出了第一步了！接下来就是找个练手项目，积攒经验值了。\n","tags":["get started","flutter"]},{"title":"微信、微博、QQ一键分享","url":"/2020/07/15/share-to-WeChat-QQ-and-weibo/","content":"\nHexo 默认的主题 Landscape，默认支持分享到 <i class=\"fa fa-twitter\" aria-hidden=\"true\"></i> Twitter、<i class=\"fa fa-facebook-square\" aria-hidden=\"true\"></i> Facebook、<i class=\"fa fa-pinterest\" aria-hidden=\"true\"></i> Pinterest、<i class=\"fa fa-linkedin-square\" aria-hidden=\"true\"></i> Linkedin 等国外社交媒体。但是，众所周知，这些社交媒体，在镇上都被🈲了！！\n\n所以，这篇文章介绍如何将 Hexo 主题本地化，以支持 <i class=\"fa fa-weibo\" aria-hidden=\"true\"></i> 微博、<i class=\"fa fa-wechat\" aria-hidden=\"true\"></i> 微信、<i class=\"fa fa-qq\" aria-hidden=\"true\"></i> QQ 及 <i class=\"fa fa-envelope-o\" aria-hidden=\"true\"></i> 邮件分享。\n\n## 替换文章分享生成脚本\n\n大概位置从第 60 行开始，替换原来的 Twitter、Facebook、Pinterest、Linkedin 模板，用以下代码：\n\n文件：`themes\\landscape\\source\\js\\script.jsthemes\\landscape\\source\\js\\script.js`\n\n``` js\n  // Share\n  $(\"body\")\n    .on(\"click\", function() {\n      $(\".article-share-box.on\").removeClass(\"on\");\n    })\n    .on(\"click\", \".article-share-link\", function(e) {\n      e.stopPropagation();\n\n      var $this = $(this),\n        url = $this.attr(\"data-url\"),\n        title = \"👍 //\" + $this.attr(\"data-title\"),\n        encodedUrl = encodeURIComponent(url),\n        encodedTitle = encodeURIComponent(title),\n        id = \"article-share-box-\" + $this.attr(\"data-id\"),\n        offset = $this.offset();\n\n      if ($(\"#\" + id).length) {\n        var box = $(\"#\" + id);\n        if (box.hasClass(\"on\")) {\n          box.removeClass(\"on\");\n          return;\n        }\n      } else {\n        var html = [\n          '<div id=\"' + id + '\" class=\"article-share-box\">',\n          '<input class=\"article-share-input\" value=\"' + url + '\" readonly>',\n          '<div class=\"article-share-links\">',\n          // 微博分享\n          '<a href=\"http://service.weibo.com/share/share.php?title=' +\n            encodedTitle +\n            \"&url=\" +\n            encodedUrl +\n            '\" class=\"article-share-weibo\" target=\"_blank\" title=\"微博分享\"></a>',\n          // 微信二维码分享\n          '<a href=\"https://zixuephp.net/inc/qrcode_img.php?url=' +\n            encodedUrl +\n            '\" class=\"article-share-wechat\" target=\"_blank\" title=\"微信分享\"></a>',\n          // QQ 好友分享\n          '<a href=\"https://connect.qq.com/widget/shareqq/index.html?url=' +\n            encodedUrl +\n            \"&sharesource=qzone&title=\" +\n            encodedTitle +\n            '\" class=\"article-share-qq\" target=\"_blank\" title=\"分享给QQ好友\"></a>',\n          // 邮件分享\n          '<a href=\"mailto:your@mail.com?subject=' +\n            encodedTitle +\n            \"&body=\" +\n            encodedUrl +\n            '\" class=\"article-share-mail\" target=\"_blank\" title=\"邮件分享\"></a>',\n          \"</div>\",\n          \"</div>\"\n        ].join(\"\");\n\n        var box = $(html);\n        $(\"body\").append(box);\n      }\n\n      $(\".article-share-box.on\").hide();\n\n      box\n        .css({\n          top: offset.top + 25,\n          left: offset.left\n        })\n        .addClass(\"on\");\n    })\n    /// more click events here\n```\n\n## 更改配置 \n\n（此步骤可省略，可用于 Contact 页面）\n\n大概从第 30 行开始，增加 `weibo`、`wechat`、`qq`、`mail` 配置项\n\n文件：`_config.yml`\n\n```yml\n# Miscellaneous\nweibo: your weibo name\nwechat: your wechat name\nqq: your QQ\nmail: your email\n```\n\n## 更改文章模板文件 \n\n大概从第 26 行开始，增加 `data-title` 属性绑定\n\n文件：`themes\\landscape\\layout\\_partial\\article.ejs`\n\n```ejs\n    <footer class=\"article-footer\">\n      <a data-url=\"<%- post.permalink %>\" data-id=\"<%= post._id %>\" data-title=\"<%= post.title %>\" class=\"article-share-link\"><%= __('share') %></a>\n      <% if (post.comments && config.disqus_shortname){ %>\n      <a href=\"<%- post.permalink %>#disqus_thread\" class=\"article-comment-link\"><%= __('comment') %></a>\n      <% } %>\n      <%- partial('post/tag') %>\n    </footer>\n```\n\n## 配置文章分享样式 \n\n大概从第 273 行开始，添加一下样式\n\n文件：`themes\\landscape\\layout\\_partial\\article.styl`\n\n```styl\n.article-share-weibo\n  @extend $article-share-link\n  &:before\n    content: \"\\f18a\"\n  &:hover\n    background: color-weibo\n    text-shadow: 0 1px darken(color-weibo, 20%)\n\n.article-share-qq\n  @extend $article-share-link\n  &:before\n    content: \"\\f1d6\"\n  &:hover\n    background: color-qq\n    text-shadow: 0 1px darken(color-qq, 20%)\n\n.article-share-wechat\n  @extend $article-share-link\n  &:before\n    content: \"\\f1d7\"\n  &:hover\n    background: color-wechat\n    text-shadow: 0 1px darken(color-wechat, 20%)\n    \n.article-share-mail\n  @extend $article-share-link\n  &:before\n    content: \"\\f003\"\n  &:hover\n    background: color-mail\n    text-shadow: 0 1px darken(color-mail, 20%)\n```\n\n## 更改变量 \n\n大概从第 5 行开始\n\n文件：`themes\\landscape\\source\\css\\_variables.styl`\n\n``` styl\n// Colors\ncolor-default = #555\ncolor-grey = #999\ncolor-border = #ddd\ncolor-link = #258fb8\ncolor-background = #eee\ncolor-sidebar-text = #777\ncolor-widget-background = #ddd\ncolor-widget-border = #ccc\ncolor-footer-background = #262a30\ncolor-mobile-nav-background = #191919\ncolor-weibo = #ff8140\ncolor-wechat = #1aad19\ncolor-qq = #00aced\ncolor-mail = #a2e65b\n```\n\n## 升级 iconfont 版本\n\nHexo 默认使用 [fontawesome](http://www.fontawesome.com.cn/) 作为 iconfont，如果您的 fontawesome 版本过低，请升级到至少 4.1，因为 [qq](http://www.fontawesome.com.cn/icons/qq/) 和 [wechat](http://www.fontawesome.com.cn/icons/wechat/) 图标是从 4.1 开始才收录的。我的升级方法，简单粗暴，就是下载最新的 iconfont，替换 `themes\\landscape\\source\\css\\fonts` 下的相关字体文件。\n\n## 参考链接\n\n- [一键分享到QQ空间、QQ好友、新浪微博、微信代码](https://zixuephp.net/article-309.html)\n- <i class=\"fa fa-github\" aria-hidden=\"true\"></i> [hexojs/hexo-theme-landscape](https://github.com/hexojs/hexo-theme-landscape)\n","tags":["hexo","javaScript"]},{"title":"Windows 显示已保存 WiFi 密码","url":"/2020/07/15/Windows-Saved-WiFi-password/","content":"\n有的时候，需要查看 Windows 下已保存的 WiFi 密码。比如好基友问：你要你家 WiFi 密码多少，连上去一起打局 Dota 玩玩。额，我看看。。。\n\n只知道，在网络配置里可以找得到，但是具体在哪里，emmm，别问，问就是不知道。Windows 7 之后，Windows 的设置经常改来改去，传统的设置界面和新款的设置界面经常纠缠不清。\n\n一般情况，快速的解决办法就是去度娘一下。  [出门左转](https://www.baidu.com/s?wd=Windows%2010%E6%9F%A5%E7%9C%8Bwifi%E5%AF%86%E7%A0%81)\n\n下面的方案，则是使用命令行，简单粗暴又高效。\n\n## 步骤一: 显示所有已保存配置\n\n``` bat\nnetsh wlan show profiles\n```\n\n![](/images/windows-saved-wifi-password/Windows%20saved%20wifi_1.png)\n\n## 步骤二: 显示指定配置的详情\n\n``` bat\nnetsh wlan show profile name=\"your-profile-name\" key=clear\n```\n\n![](/images/windows-saved-wifi-password/Windows%20saved%20wifi_2.png)\n\n找到图片中 Key Content 就是了！\n\n## 参考链接\n\n[How to See All Your Saved Wi-Fi Passwords on Windows 10](https://www.howtogeek.com/426257/how-to-see-all-your-pcs-saved-wi-fi-passwords/)\n","tags":["windows","command","wifi","password"]},{"title":"JavaScript Web Speech API","url":"/2020/07/12/JavaScript-Web-Speech-API/","content":"\nWeb Speech API 是 JavaScript 新的规范，主要分为 Speech Recognition 和 Speech Synthesis。目前（2020/7/12），除了 Chrome，其他浏览器基本上都不支持。即使是 Chrome，也是在联网情况下方可使用。\n\n## 兼容性/限制\n\nWeb Speech API 还是比较新的功能，兼容性并没有那么好。最新的浏览器支持情况请参考 [Can I Use](https://caniuse.com/#feat=speech)。\n\n## Speech Recognition API\n\n其实，最想体验的就是 Speech Recognition API，毕竟，如果有免费的语音识别 API 可用，谁还会去购买收费的云语音识别，除非，人傻钱多，或者后者识别率要高很多。\n\nemmm，我还是太年轻了，看着这个功能的支持情况，我觉得，还是过几年再看吧。\n\n![Speech Recognition API](/images/javascript-web-speech-api/Speech%20Recognition%20API.20200713.PNG)\n\n## Speech Synthesis API\n\nSpeech Synthesis API 虽然实用性没前者大，但是也是值得一玩的。\n\n![Speech Synthesis API](/images/javascript-web-speech-api/Speech%20Synthesis%20API.20200713.PNG)\n\n(Coming soon...)\n\n## 参考链接\n\n- [Using the Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API)\n","tags":["javascript","web speech api"]},{"title":"Entity Framework 最佳实践","url":"/2020/07/08/best-practices-for-Entity-Framework/","content":"\n平时如果需要搭建原型，选择 [Entity Framework](https://docs.microsoft.com/en-us/ef/)（后简称 EF）将会帮助您**更快地交付和迭代**。\n\n但是，EF 虽好，可不要贪杯哦。原型阶段使用 EF 完全莫得问题，但是到后期项目变的越来越大，需要真正交付产品时，建议还是切换到其他的 ORM 框架或者 ADO.NET，因为，这里面真的有很多莫名坑，新手，甚至是有一定经验的程序员都会不知不觉地踩进去。\n\n## EF 访问数据的架构\n\nEF 其实就是负责 C# Object 和数据库数据之间的映射，让 .Net 开发人员操作 Object 就像操作数据库一样丝滑，背后 EF 会自动转换 sql 代码。\n\n祭一张 EF 数据访问架构图\n\n![Entity Framework architecture for accessing data](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/media/wd-efarchdiagram.gif)\n\n*来自 [Microsoft Docs](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/overview)*\n\n下面就是我这个踩坑小能手用泪水和汗水总结的笔记，希望下次再用 EF 的时候，能够减少入坑次数。\n\n## 及时调用 `.ToList()` 方法 ！！！\n\n这第一条，自然是有它的道理的。只怪自己当初没有好好理解透彻 EF 深层原理。\n\nEF 默认会做很多操作，优化我们的查询，比如延迟发送请求，再比如合并查询请求。这就引进了一个常见的错误，\n\n`.ToList()` 方法就是告诉立即执行查询，\n\n## 序列化配置\n\n把 Controller 返回结果序列化成 JSON 字符串时，在 `Global.asax.cs` 文件 `Application_Start` 方法中添加以下代码：\n\n``` CSharp\n/// append below code to the end of Application_Start\nvar serializerSettings = GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings;\n/// no returned loop reference objects\nserializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;\n/// decrease json string length by removing null value\nserializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore;\n```\n\n## API 仅返回页面需要的字段\n\n好习惯！虽然累了点，但是优秀的程序员始终将高性能和可扩展性放在心里 🙂\n\n## 查询表时，删除关联表结果\n\n同上一点相关，当数据库的表有外键时，如果直接查询该表，它相关联表的记录也会跟着返回，不仅拖慢查询，序列化返回页面时也会徒增流量。解决办法是返回结果集前，把相应的属性置空。\n\n```CSharp\n/// <summary>\n/// the EF will return referencing tables along with current table value,\n/// this method will prevent this default behavior\n/// </summary>\n/// <typeparam name=\"T\"></typeparam>\n/// <param name=\"data\"></param>\n/// <returns></returns>\npublic static IEnumerable<T> ReturnEFResult<T>(IEnumerable<T> data) where T : class, new()\n{\n    if (IsNullOrEmptyList(data)) return data;\n    // remove all ICollection type fields\n    List<T> ls = new List<T>();\n    //Type icollectionType = typeof(ICollection<>);\n    //var props = typeof(T).GetProperties().Where(_ => !_.PropertyType.IsAssignableFrom(icollectionType));\n    \n    var props = typeof(T).GetProperties().Where(_ =>\n    {\n        //return !ImplementsInterface(_.PropertyType, icollectionType);\n        var pt = _.PropertyType;\n        return pt.Name != \"ICollection`1\" && !pt.Namespace.StartsWith(\"your.namespace.here\");\n    }).ToList();\n    foreach (T d in data)\n    {\n        T tmp = new T();\n        foreach (var p in props)\n        {\n            p.SetValue(tmp, p.GetValue(d));\n        }\n        ls.Add(tmp);\n    }\n    return ls;\n}\n```\n## 新增、更新或删除记录，记得调用 `SaveChanges()` 方法提交改动\n\n多撸几次自然就记住了，不浪费各自精力了。\n\n## (待续)\n\n是的，因为懒，就到这里了，鸽了。。。\n\n## 参考链接\n\n- [Performance considerations for EF 4, 5, and 6](https://docs.microsoft.com/en-us/ef/ef6/fundamentals/performance/perf-whitepaper)\n- [Tips to improve Entity Framework Performance](https://www.dotnettricks.com/learn/entityframework/tips-to-improve-entity-framework-performance)\n- [Six ways to build better Entity Framework (Core and EF6) applications](https://www.thereformedprogrammer.net/six-ways-to-build-better-entity-framework-core-and-ef6-applications/)\n\n\n","tags":["entity framework","c#","best practices"]},{"title":"Angular × web worker","url":"/2020/07/05/Angular-and-web-worker/","content":"\n继前段时间瞎折腾 Angular 应用性能之后，页面性能确实有所提升，但感觉还有提升空间。想到此前一直缠绕在心中的 Web Worker，于是耐不住萌（ji）动（mo）的心，准备再接再厉，来一顿骚操作，让页面更加丝滑。\n\n## 升级 Angular\n\n此前项目的 Angular 版本是 v7，足够支撑所有的业务功能了。**如果没有足够充分的理由，强烈不建议这种大版本升级（v7 -> v10.0.0）！！！强烈不建议这种大版本升级（v7 -> v10.0.0）！！！强烈不建议这种大版本升级（v7 -> v10.0.0）！！！** 不要问我为什么，问就是 *“谁升级谁知道”*。😔……\n\n但是，想要在 Angular 应用中体验 Web Worker，则必须版本至少是 8.0。写原生 js？没问题，但是既然官方支持了，所有的配置、最佳实践啊都是现成的，它不香吗。正好体验一下 Ivy  :)\n\n“诸位，青春可是永无止境的！” - 【[凯皇](https://naruto.fandom.com/wiki/Might_Guy)】\n\n![Might Guy](https://vignette.wikia.nocookie.net/naruto/images/c/cf/Guy_Opening_7th_Gate.png/revision/latest/scale-to-width-down/1000?cb=20150709214439)\n\n所以，尽情绽放吧，少年！哈哈哈哈哈哈哈哈哈\n\n完整文档请参考此[官网链接](https://update.angular.io/#7.2:10.0)\n\n## 升级依赖项 （可选）\n\n我是使用如下命令一次性升级所有的依赖项（不推荐，但是我这个项目小，所以无所谓啦）：\n\n``` bash\nng update --all --force\n```\n\n## 尝试运行项目，解决编译时/运行时的警告/错误提示 （可选）\n\n毕竟，从 7 到 10，步子有点大，很多 breaking changes，不仅仅是 Angular 本身，包括我项目用到的 [NG ZORRO](https://github.com/NG-ZORRO/ng-zorro-antd) 等等。\n\n我的项目中遇到的问题有（大概记录一下，不记得每个改动了）：\n\n- 更改所有 `/deep/` 为 `::ng-deep`\n- `nzTooltip` 移除 `nzTitle`，推荐使用 `nzTooltipTitle`\n- `nzTable` 新的排序方式\n- `nzModal` API 下，`nzGetContainer` 设置非空时，弹出框正文可能被遮挡\n\n## 跑起来，确保升级之后应用仍可以正常运行且编译（很重要！！！）\n\n一般情况下都是可以的正常运行的。真碰见问题，问 [Github](github.com/angular/angular/issues/) 或者搜索引擎。\n\n好了，终于可以进入正题啦！\n\n## 在项目目录中，创建一个基础的 Web Worker \n\n``` shell\nng generate webWorker [name]\n```\n\n[参考链接](https://angular.cn/cli/generate#webworker)\n\n## 查看项目变化\n\n此时 Angular CLI 会自动处理好所有变更。比如添加 `tsconfig.worker.json`、修改 `angular.json`、添加 web worker 文件等等。\n\n## 编写 web worker 文件\n\n一般情况下，web worker 是需要操作请求服务器数据的，所以这里简单贴一下请求代码\n\n##### `xxxx.worker.ts` 文件：\n\n``` TypeScript\n/// <reference lib=\"webworker\" />\n\n// importScripts('./worker-common.model');\nimport { WorkerMessage, WorkerAction } from './worker-common.model';\n\naddEventListener('message', async ({ data }) => {\n  if (data) {\n    const theMessage = data as WorkerMessage;\n    const theData = theMessage.data;\n    const theAction = theMessage.action;\n\n    let responseMessage: WorkerMessage;\n    if (theAction === WorkerAction.FetchCheckpoints) {\n      const tagID = +theData;\n      if (typeof tagID !== 'number') {\n        // throw new Error('tagID should be number');\n        return postMessage(new Error('tagID should be number'));\n      }\n      const responseData = await fetchCheckpointsByTag(+theData);\n      responseMessage = new WorkerMessage(responseData, theAction);\n    } else {\n      // if (action === WorkerAction.Ping)\n      const content = (theData || '').split('').sort().join('');\n      responseMessage = new WorkerMessage(content, theAction);\n    }\n    return postMessage(responseMessage);\n  } else {\n    console.error('data of MessageEvent is empty');\n  }\n});\n\n/// localStorage is not available in web worker\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\n/** caching */\nconst __STORAGE__ = new Map<string, any>();\n\n/** generate key for localStorage */\nconst genStorageKey = (...parameters) => {\n  // arguments.callee is also not availabe in web worker\n  return (parameters || []).join(':');\n};\n\nconst fetchCheckpointsByTag = async (tagID?: number) => {\n  const checkpoints = await fetchCheckpoints();\n  if (tagID) {\n    const checkpointIDs = (await fetchCheckpointTagMap()).filter(_ => _.TagID === tagID).map(_ => _.CheckPointID);\n    const hashMap = new Set(checkpointIDs);\n    return checkpoints.filter(_ => hashMap.has(_.ID));\n  } else {\n    return checkpoints;\n  }\n};\n\ntype CheckPoint = { ID: number, Title: string };\n\n/** function to fetch checkpoints */\nconst fetchCheckpoints = async () => {\n  const storeKey = genStorageKey(fetchCheckpoints.name);\n  let checkpoints: Array<CheckPoint> = __STORAGE__.get(storeKey);\n  if (!(Array.isArray(checkpoints) && checkpoints.length)) {\n    // no data stored in localStorage\n    const resp = await fetch('http://localhost:44316/api/CheckPoints', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    checkpoints = await resp.json();\n    __STORAGE__.set(storeKey, checkpoints);\n  }\n  return checkpoints || [];\n};\n\ntype CheckPoint_Tag_Map = { CheckPointID: number, TagID: number };\nconst fetchCheckpointTagMap = async () => {\n  const storeKey = genStorageKey(fetchCheckpointTagMap.name);\n  let checkpointTagMap: Array<CheckPoint_Tag_Map> = __STORAGE__.get(storeKey);\n  if (!(Array.isArray(checkpointTagMap) && checkpointTagMap.length)) {\n    const resp = await fetch('http://localhost:44316/api/CheckPointTagMap', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    checkpointTagMap = await resp.json();\n    __STORAGE__.set(storeKey, checkpointTagMap);\n  }\n  return checkpointTagMap || [];\n};\n\n```\n\n##### `worker-common.model.ts` 文件\n\n``` TypeScript\n\n/** enumerator for all worker actions */\nexport enum WorkerAction {\n    Ping,\n    FetchCheckpoints\n}\n\nexport enum WorkerStatusCode {\n    Initial,\n    OK,\n    Error,\n    Empty,\n    ToBeContinued\n}\n\nexport class WorkerMessage {\n    constructor(\n        public data: any,\n        public action: WorkerAction\n    ) {\n\n    }\n    public status?: WorkerStatusCode = WorkerStatusCode.Initial;\n}\n\n```\n\n## 编写 `*.component.ts` 文件\n\n同样，简单示例一下，`xxxx.component.ts` 文件：\n\n``` TypeScript\n\n  ngOnInit(): void {\n    // register web worker\n    if (typeof Worker !== 'undefined') {\n      this.webWorker = new Worker('../xxxx.worker', { type: 'module' });\n      this.webWorker.addEventListener('message', ({ data }) => {\n        const theMessage = data as WorkerMessage;\n        const theAction = theMessage.action;\n        if (theAction === WorkerAction.FetchCheckpoints) {\n          this.qwCheckPoints.response.Data = theMessage.data || [];\n          this.qwCheckPoints.status = Utility.isNotEmptyArray(this.qwCheckPoints.response.Data) ?\n            QueryStatus.SUCCESS : QueryStatus.EMPTY;\n        }\n      });\n      this.webWorker.postMessage(new WorkerMessage(null, WorkerAction.FetchCheckpoints));\n    } else {\n      // Web workers are not supported in this environment.\n      // TODO: You should add a fallback so that your program still executes correctly.\n      console.log('The browser doesn\\'t support Web Worker.');\n    }\n  }\n  \n  someAction(tce) {\n    const tagID = tce.index === 0 ? 0 : (this.qwCheckPointTags.response.Data[tce.index - 1] || {}).ID;\n    // this.qwCheckPoints.query(tagID);\n    this.webWorker.postMessage(new WorkerMessage(tagID, WorkerAction.FetchCheckpoints));\n  }\n```\n\n## 拉出来遛一遛\n\n[<i class=\"fa fa-search\" aria-hidden=\"true\"></i> Emoji 搜索工具](/app/#/lab/emoji)\n\nemmmm，一切都按照预期走了，没什么问题。除了：Google Chrome 调试 Web Worker 真的是鸡肋！！！以后真的在项目中大量使用了再说吧。。。。。。\n\n## 参考链接：\n\n- [Using Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)\n- [The Basics of Web Workers](https://www.html5rocks.com/en/tutorials/workers/basics/#toc-gettingstarted)\n- [Functions and classes available to Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers)\n- [Web Worker 文献综述](https://github.com/CntChen/cntchen.github.io/issues/19)\n","tags":["Angular","Web Worker","Performance"]},{"title":"Angular 应用国际化","url":"/2020/07/01/Angular-internationalization/","content":"\n\n如何 Angular i18n，不做过多赘述，有任何问题，请移步 [官网](https://angular.cn/guide/i18n)。\n\n## 背景\n\n当前端页面有大批量更新，`trans-unit` 有大幅变动(新增、更改 `context-group` 或删除等等)时，如果人工手动去调整，工作量大不说，很容易出错。所以必须想办法去自动更新。\n\n## 我的解决方案\n\n在没有去搜索引擎找寻方案的前提下，下面是自己写的 C# 控制台项目：\n\n1. 备份当前 `messages.zh.xlf` 文件。\n2. 新建 C# 控制台项目，复制如下代码：[<i class=\"fa fa-github\" aria-hidden=\"true\"></i>ZXS66/GenerateNewI18NFile.cs](https://gist.github.com/ZXS66/69c397ccc7db3687376edc1ff55acf09)\n``` CSharp\nnamespace ConsoleApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            generateNewI18NFile();\n            return;\n        }\n        private static void generateNewI18NFile()\n        {\n            // step 1: extract all translations from history.xlf\n            // trans-unit@id, target\n            IDictionary<string, string> dict = new Dictionary<string, string>();\n            string[] allLines = File.ReadAllLines\n            (\n                \"./history.xlf\",\n                Encoding.UTF8   //Encoding.Default\n            );\n            string lastTransUnitId = string.Empty;\n            string lastTarget = string.Empty;\n            foreach (string line in allLines)\n            {\n                string line_trimed = line.Trim();\n                if (line_trimed.StartsWith(\"<trans-unit \"))\n                {\n                    int firstQuote = line_trimed.IndexOf(\"\\\"\"), secondQuote = line_trimed.IndexOf(\"\\\"\", firstQuote + 1);\n                    lastTransUnitId = line_trimed.Substring(firstQuote + 1, secondQuote - firstQuote - 1);\n                    continue;\n                }\n                if (line_trimed.StartsWith(\"<target>\"))\n                {\n                    // all target values are inside one line\n                    lastTarget = line;\n                    dict.Add(lastTransUnitId, lastTarget);\n                }\n            }\n            // step 2: generate new translation file by appending target node\n            List<string> outputLines = new List<string>();\n            allLines = File.ReadAllLines(\"./now.xlf\", Encoding.Default);\n            string[] prefixOfIgnoreLines = new string[]\n            {\n                \"<?xml \",\n                \"<xliff \",\n                \"<file \",\n                \"<body>\",\n                \"</body>\",\n                \"</file>\",\n                \"</xliff>\"\n            };\n            foreach (string line in allLines)\n            {\n                outputLines.Add(line);\n                string line_trimed = line.Trim();\n\n                if (prefixOfIgnoreLines.Any(_ => line_trimed.StartsWith(_)))\n                    continue;\n\n                if (line_trimed.StartsWith(\"<trans-unit \"))\n                {\n                    int firstQuote = line_trimed.IndexOf(\"\\\"\"), secondQuote = line_trimed.IndexOf(\"\\\"\", firstQuote + 1);\n                    lastTransUnitId = line_trimed.Substring(firstQuote + 1, secondQuote - firstQuote - 1);\n                    continue;\n                }\n                if (line_trimed.EndsWith(\"</source>\"))\n                {\n                    lastTarget = dict.ContainsKey(lastTransUnitId) ? dict[lastTransUnitId] : string.Empty;\n                    if (!string.IsNullOrEmpty(lastTarget))\n                    {\n                        outputLines.Add(lastTarget);\n                    }\n                }\n            }\n            // step 3: write result to file\n            File.WriteAllLines(\"./output.xlf\", outputLines);\n            //Console.WriteLine(string.Join(Environment.NewLine, outputLines));\n        }\n    }\n}\n```\n3. 复制 `messages.zh.xlf` 到当前项目的根目录，并重命名未 `history.xlf`。\n4. 运行命令 `ng xi18n --output-path locale` 重新生成新的 `messages.xlf` 文件。\n5. 复制 `messages.xlf` 到当前项目的根目录，并重命名未 `now.xlf`。\n6. 将 `history.xlf` 和 `now.xlf` 文件设置成 copy always。\n7. 运行项目，得到 `output.xlf`（位于项目根目录/bin/Debug）。\n8. 复制 `messages.xlf` 到 Angular 的 `locale` 文件夹，并重命名未 `messages.zh.xlf`。\n9. 打开 `messages.zh.xlf`，找到所有后面不是 `target` 节点的 `source` 节点 （很多 IDE 支持正则或者换行符查找）。\n10. 补全 `target` 节点\n\n当当当当，新鲜的 `message.zh.xlf` 出炉啦！\n","tags":["i18n","angular","internationalization"]},{"title":"企业网络下设置 git、npm 等代理","url":"/2020/07/01/proxy-for-git-and-npm-in-intranet-network/","content":"\n在某些公司内，应 IT 安全政策要求，可能需要设置代理才能访问互联网。相应地，一些工具/软件也需要设置代理才能正常运行。\n\n## 设置当前用户网络代理 \n\n``` shell\nset http_proxy=http://[username:password@]proxyserver:port\nset https_proxy=https://[username:password@]proxyserver:port\n```\n\n## 设置 Git 代理：\n\n``` shell\ngit config --global http.proxy http://xxx.xxx.xxx.xxx:80\n```\n\n## 移除 Git 代理：\n\n``` shell\ngit config --global --unset http.proxy\n```\n\n## 设置 npm 代理\n\n``` shell\nnpm config set proxy http://xxx.xxx.xxx.xxx:8080\nnpm config set https-proxy http://xxx.xxx.xxx.xxx:8080\n```\n\n## 移除 npm 代理\n\n``` shell\nnpm config rm proxy\nnpm config rm https-proxy\n```\n\n更多常用代理命令，请移步各搜索引擎或 [Stackoverflow](https://stackoverflow.com)。\n\n## 参考链接\n\n- [How to Use pip behind a Proxy](http://leifengblog.net/blog/how-to-use-pip-behind-a-proxy/)\n- [How to change Windows proxy settings using cmd/command prompt/registry/.cmd/.bat (and apply the settings instantly/immediately without reboot)](https://dannyda.com/2019/12/13/how-to-change-windows-proxy-settings-using-cmd-command-prompt-registry-cmd-bat)\n","tags":["proxy","git","npm","intranet","corpnet"]},{"title":"提升 Angular 应用性能技巧","url":"/2020/06/22/improve-Angular-application-performance/","content":"\n以下是我在项目中实际使用到的优化方法，更多详情，请移步本文末尾 [参考链接](#参考链接)\n\n## ChangeDetectionStrategy.OnPush 策略：只有我的命令，让你刷新你才刷新 💗\n\n``` Typescript\n@Component({\n  selector: 'app-gallery',\n  templateUrl: './gallery.component.html',\n  styleUrls: ['./gallery.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GalleryComponent implements OnInit, OnDestroy {  \n    constructor(\n        private cdr: ChangeDetectorRef\n    ) {\n\n    }\n}\n```\n\n## Subscription 记得及时取消订阅/销毁\n\n特别的，目前 Angular 中发送 HTTP 请求都是使用的 [`HttpClient`](https://angular.cn/api/common/http/HttpClient)，该对象实例的 `post` 和 `get` 方法默认返回 `Observable<any>`，这就是个坑，**它不会自动销毁**，在请求完成之后。我的解决办法是，在 `HttpClient.post` 方法之后，重新 `pipe` 一个 `take(1)`。\n\n``` Typescript\nexport class BaseService {\n    constructor(\n        private http: HttpClient\n    ) {\n        this.BASE_URL = '/your-app-root-path-here/';\n    }\n    /** ApiController URL */\n    private BASE_URL: string;\n\n    /** sending post request to API  */\n    _post(actionName: string, formData?: object): Observable<any> {\n        // const url = this._baseURL + actionName;\n        const url = `${this.BASE_URL}${actionName}/${Math.round(performance.now())}`;\n        return this.http.post(\n            url,\n            getRequestBody(formData),   // custom\n            _HTTP_OPTIONS    // options\n        ).pipe(take(1));\n    }\n}\n```\n更多请参考 ~~[此 gist](https://gitee.com/nextwave/codes/89lyrde47iqb1n0v6pc2a62)~~ [此 gist](https://gist.github.com/ZXS66/b31d4f513ee5d19846742844d6260921)\n\n## ngFor 指令添加 trackBy\n目的是让 Angular 刷新组件部分刷新，而不是全部。\n\n## 不要在表达式中调用方法，包括 getter\n\n使用组件的属性，它不香吗，既能缓存结果，提高页面渲染性能，又能规范书写，将业务处理规则放 js/ts 端，显示规则放页面端。\n\n## 使用纯管道 (pure pipe)\n\n上一点提到，使用组件的属性缓存结果，能够提高页面渲染性能。相应的，Angular 官方推荐使用 pure pipe。\n\n## 缓存 💗\n\n能缓存的地方，都缓存，包括但不限于 HTTP 请求、静态资源、JS Object 等。\n\n## 性能差的组件，可以考虑用原生 HTML 控件实现 💗\n\n有时候，打麻雀，一把 98K 就够了，没必要用大炮，你说呢 (好像还是大材小用了😄)。\n\n## 其他常规页面优化方法 💗\n\n[High Performance website](https://book.douban.com/subject/2084131/)\n\n## 参考链接:\n\n- [15 Angular Performance Tips & Tricks](https://angular-guru.com/blog/angular-performance-tips)\n- [Best practices for a clean and performant Angular application](https://www.freecodecamp.org/news/best-practices-for-a-clean-and-performant-angular-application-288e7b39eb6f/)\n- [Memory Management - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management)\n- [Performance - Mozilla | MDN](https://developer.mozilla.org/en-US/docs/Mozilla/Performance)\n- [mgechev/angular-performance-checklist - GitHub](https://github.com/mgechev/angular-performance-checklist)\n","tags":["angular","javascript","performance"]},{"title":"时代残党个人博客，开张啦！","url":"/2020/06/17/opening/","content":"\n不求关注，不求捐助，自行督促，力争半月更！ 😀\n","tags":["随笔"]}]